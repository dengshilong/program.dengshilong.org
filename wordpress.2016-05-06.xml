<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.4.2" created="2016-05-06 13:10" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>邓世龙的学习笔记</title>
	<link>http://127.0.0.1:8000/blog</link>
	<description>兼济天下则达,独善其身则穷</description>
	<pubDate>Fri, 06 May 2016 13:10:30 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://127.0.0.1:8000/blog</wp:base_site_url>
	<wp:base_blog_url>http://127.0.0.1:8000/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[admin]]></wp:author_login><wp:author_email><![CDATA[long470884130@163.com]]></wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>189</wp:term_id><wp:category_nicename><![CDATA[java]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[Java]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>132</wp:term_id><wp:category_nicename><![CDATA[javascript]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[Javascript]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>184</wp:term_id><wp:category_nicename><![CDATA[lucene]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[Lucene]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>98</wp:term_id><wp:category_nicename><![CDATA[php]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[PHP]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>139</wp:term_id><wp:category_nicename><![CDATA[python]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[Python]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>82</wp:term_id><wp:category_nicename><![CDATA[shell]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[shell]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>86</wp:term_id><wp:category_nicename><![CDATA[search]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[搜索引擎]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename><![CDATA[math]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[数学]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>94</wp:term_id><wp:category_nicename><![CDATA[sql]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[数据库]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>173</wp:term_id><wp:category_nicename><![CDATA[data-structure]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[数据结构]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename><![CDATA[uncategorized]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[未分类]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>169</wp:term_id><wp:category_nicename><![CDATA[machine-learning]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[机器学习]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename><![CDATA[projecteuler]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[欧拉工程]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>154</wp:term_id><wp:category_nicename><![CDATA[algorithm]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[算法]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>68</wp:term_id><wp:category_nicename><![CDATA[programming]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[编程]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>114</wp:term_id><wp:category_nicename><![CDATA[network]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[网络编程]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>77</wp:term_id><wp:category_nicename><![CDATA[software]]></wp:category_nicename><wp:category_parent><![CDATA[]]></wp:category_parent><wp:cat_name><![CDATA[软件安装]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>112</wp:term_id><wp:tag_slug><![CDATA[112]]></wp:tag_slug><wp:tag_name><![CDATA[$?]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>111</wp:term_id><wp:tag_slug><![CDATA[111]]></wp:tag_slug><wp:tag_name><![CDATA[$$]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>113</wp:term_id><wp:tag_slug><![CDATA[0]]></wp:tag_slug><wp:tag_name><![CDATA[$0]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>202</wp:term_id><wp:tag_slug><![CDATA[13%e7%90%83]]></wp:tag_slug><wp:tag_name><![CDATA[13球]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>203</wp:term_id><wp:tag_slug><![CDATA[8%e7%90%83]]></wp:tag_slug><wp:tag_name><![CDATA[8球]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>180</wp:term_id><wp:tag_slug><![CDATA[ac%e8%87%aa%e5%8a%a8%e6%9c%ba]]></wp:tag_slug><wp:tag_name><![CDATA[AC自动机]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>210</wp:term_id><wp:tag_slug><![CDATA[awk]]></wp:tag_slug><wp:tag_name><![CDATA[awk]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>191</wp:term_id><wp:tag_slug><![CDATA[byte%e6%95%b0%e7%bb%84]]></wp:tag_slug><wp:tag_name><![CDATA[byte数组]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>78</wp:term_id><wp:tag_slug><![CDATA[c]]></wp:tag_slug><wp:tag_name><![CDATA[C++]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug><![CDATA[champernowne%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[Champernowne数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>217</wp:term_id><wp:tag_slug><![CDATA[codec]]></wp:tag_slug><wp:tag_name><![CDATA[codec]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug><![CDATA[collata]]></wp:tag_slug><wp:tag_name><![CDATA[collata]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug><![CDATA[collatz]]></wp:tag_slug><wp:tag_name><![CDATA[collatz]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug><![CDATA[coredump]]></wp:tag_slug><wp:tag_name><![CDATA[coredump]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>83</wp:term_id><wp:tag_slug><![CDATA[crontab]]></wp:tag_slug><wp:tag_name><![CDATA[crontab]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>220</wp:term_id><wp:tag_slug><![CDATA[c%e5%90%8d%e9%a2%98]]></wp:tag_slug><wp:tag_name><![CDATA[C名题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>221</wp:term_id><wp:tag_slug><![CDATA[c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99]]></wp:tag_slug><wp:tag_name><![CDATA[C名题百则]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>207</wp:term_id><wp:tag_slug><![CDATA[defaultdict]]></wp:tag_slug><wp:tag_name><![CDATA[defaultdict]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>103</wp:term_id><wp:tag_slug><![CDATA[delta]]></wp:tag_slug><wp:tag_name><![CDATA[delta]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>140</wp:term_id><wp:tag_slug><![CDATA[django]]></wp:tag_slug><wp:tag_name><![CDATA[Django]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug><![CDATA[epoll]]></wp:tag_slug><wp:tag_name><![CDATA[epoll]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>168</wp:term_id><wp:tag_slug><![CDATA[evince]]></wp:tag_slug><wp:tag_name><![CDATA[evince]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>193</wp:term_id><wp:tag_slug><![CDATA[fieldcache]]></wp:tag_slug><wp:tag_name><![CDATA[fieldcache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>134</wp:term_id><wp:tag_slug><![CDATA[find]]></wp:tag_slug><wp:tag_name><![CDATA[find]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>149</wp:term_id><wp:tag_slug><![CDATA[flush]]></wp:tag_slug><wp:tag_name><![CDATA[flush]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>209</wp:term_id><wp:tag_slug><![CDATA[grep]]></wp:tag_slug><wp:tag_name><![CDATA[grep]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>195</wp:term_id><wp:tag_slug><![CDATA[group%e6%9f%a5%e8%af%a2]]></wp:tag_slug><wp:tag_name><![CDATA[group查询]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>125</wp:term_id><wp:tag_slug><![CDATA[html]]></wp:tag_slug><wp:tag_name><![CDATA[html]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>190</wp:term_id><wp:tag_slug><![CDATA[java-2]]></wp:tag_slug><wp:tag_name><![CDATA[java]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>133</wp:term_id><wp:tag_slug><![CDATA[javascript-2]]></wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>213</wp:term_id><wp:tag_slug><![CDATA[junit]]></wp:tag_slug><wp:tag_name><![CDATA[junit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>87</wp:term_id><wp:tag_slug><![CDATA[klist]]></wp:tag_slug><wp:tag_name><![CDATA[Klist]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>105</wp:term_id><wp:tag_slug><![CDATA[klists]]></wp:tag_slug><wp:tag_name><![CDATA[Klists]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>165</wp:term_id><wp:tag_slug><![CDATA[linux]]></wp:tag_slug><wp:tag_name><![CDATA[Linux]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>205</wp:term_id><wp:tag_slug><![CDATA[lsof]]></wp:tag_slug><wp:tag_name><![CDATA[lsof]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>184</wp:term_id><wp:tag_slug><![CDATA[lucene]]></wp:tag_slug><wp:tag_name><![CDATA[Lucene]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>102</wp:term_id><wp:tag_slug><![CDATA[main]]></wp:tag_slug><wp:tag_name><![CDATA[main]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>171</wp:term_id><wp:tag_slug><![CDATA[manufactoria]]></wp:tag_slug><wp:tag_name><![CDATA[manufactoria]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>142</wp:term_id><wp:tag_slug><![CDATA[markdown]]></wp:tag_slug><wp:tag_name><![CDATA[markdown]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>119</wp:term_id><wp:tag_slug><![CDATA[maven]]></wp:tag_slug><wp:tag_name><![CDATA[Maven]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>118</wp:term_id><wp:tag_slug><![CDATA[max_matches]]></wp:tag_slug><wp:tag_name><![CDATA[max_matches]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>145</wp:term_id><wp:tag_slug><![CDATA[mmseg]]></wp:tag_slug><wp:tag_name><![CDATA[mmseg]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>95</wp:term_id><wp:tag_slug><![CDATA[mysql]]></wp:tag_slug><wp:tag_name><![CDATA[MySQL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>101</wp:term_id><wp:tag_slug><![CDATA[mysqli]]></wp:tag_slug><wp:tag_name><![CDATA[mysqli]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>99</wp:term_id><wp:tag_slug><![CDATA[mysqli_fetch_all]]></wp:tag_slug><wp:tag_name><![CDATA[mysqli_fetch_all]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>100</wp:term_id><wp:tag_slug><![CDATA[mysqlnd]]></wp:tag_slug><wp:tag_name><![CDATA[mysqlnd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>206</wp:term_id><wp:tag_slug><![CDATA[netstat]]></wp:tag_slug><wp:tag_name><![CDATA[netstat]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>170</wp:term_id><wp:tag_slug><![CDATA[octave]]></wp:tag_slug><wp:tag_name><![CDATA[octave]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>167</wp:term_id><wp:tag_slug><![CDATA[pdf]]></wp:tag_slug><wp:tag_name><![CDATA[pdf]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>139</wp:term_id><wp:tag_slug><![CDATA[python]]></wp:tag_slug><wp:tag_name><![CDATA[Python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>185</wp:term_id><wp:tag_slug><![CDATA[screen]]></wp:tag_slug><wp:tag_name><![CDATA[Screen]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>216</wp:term_id><wp:tag_slug><![CDATA[securecrt]]></wp:tag_slug><wp:tag_name><![CDATA[SecureCRT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>218</wp:term_id><wp:tag_slug><![CDATA[security]]></wp:tag_slug><wp:tag_name><![CDATA[security]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>135</wp:term_id><wp:tag_slug><![CDATA[sed]]></wp:tag_slug><wp:tag_name><![CDATA[sed]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>71</wp:term_id><wp:tag_slug><![CDATA[select]]></wp:tag_slug><wp:tag_name><![CDATA[select]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>117</wp:term_id><wp:tag_slug><![CDATA[setlimits]]></wp:tag_slug><wp:tag_name><![CDATA[SetLimits]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug><![CDATA[shell]]></wp:tag_slug><wp:tag_name><![CDATA[shell]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>74</wp:term_id><wp:tag_slug><![CDATA[sigint]]></wp:tag_slug><wp:tag_name><![CDATA[SIGINT]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>200</wp:term_id><wp:tag_slug><![CDATA[site%e6%9f%a5%e8%af%a2]]></wp:tag_slug><wp:tag_name><![CDATA[site查询]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug><![CDATA[sleep]]></wp:tag_slug><wp:tag_name><![CDATA[sleep]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>122</wp:term_id><wp:tag_slug><![CDATA[smarty]]></wp:tag_slug><wp:tag_name><![CDATA[smarty]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>186</wp:term_id><wp:tag_slug><![CDATA[solr]]></wp:tag_slug><wp:tag_name><![CDATA[solr]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>219</wp:term_id><wp:tag_slug><![CDATA[solrj]]></wp:tag_slug><wp:tag_name><![CDATA[solrj]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>79</wp:term_id><wp:tag_slug><![CDATA[sort]]></wp:tag_slug><wp:tag_name><![CDATA[sort]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug><![CDATA[sph_rank_sph04]]></wp:tag_slug><wp:tag_name><![CDATA[SPH_RANK_SPH04]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>88</wp:term_id><wp:tag_slug><![CDATA[sphinx]]></wp:tag_slug><wp:tag_name><![CDATA[Sphinx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>89</wp:term_id><wp:tag_slug><![CDATA[sphinx-for-chinese]]></wp:tag_slug><wp:tag_name><![CDATA[Sphinx-for-chinese]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>152</wp:term_id><wp:tag_slug><![CDATA[sphinxclient]]></wp:tag_slug><wp:tag_name><![CDATA[sphinxclient]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>108</wp:term_id><wp:tag_slug><![CDATA[sql_query_info]]></wp:tag_slug><wp:tag_name><![CDATA[sql_query_info]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>198</wp:term_id><wp:tag_slug><![CDATA[stage]]></wp:tag_slug><wp:tag_name><![CDATA[stage]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>115</wp:term_id><wp:tag_slug><![CDATA[tcp]]></wp:tag_slug><wp:tag_name><![CDATA[TCP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>70</wp:term_id><wp:tag_slug><![CDATA[telnet]]></wp:tag_slug><wp:tag_name><![CDATA[telnet]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>96</wp:term_id><wp:tag_slug><![CDATA[timestamp]]></wp:tag_slug><wp:tag_name><![CDATA[timestamp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>177</wp:term_id><wp:tag_slug><![CDATA[trie]]></wp:tag_slug><wp:tag_name><![CDATA[trie]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>211</wp:term_id><wp:tag_slug><![CDATA[uniq]]></wp:tag_slug><wp:tag_name><![CDATA[uniq]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>166</wp:term_id><wp:tag_slug><![CDATA[u%e7%9b%98]]></wp:tag_slug><wp:tag_name><![CDATA[U盘]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>107</wp:term_id><wp:tag_slug><![CDATA[%e4%b8%80%e5%85%83%e5%88%86%e8%af%8d]]></wp:tag_slug><wp:tag_name><![CDATA[一元分词]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>116</wp:term_id><wp:tag_slug><![CDATA[%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b]]></wp:tag_slug><wp:tag_name><![CDATA[三次握手]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug><![CDATA[%e4%b8%89%e8%a7%92%e5%bd%a2%e7%9a%84]]></wp:tag_slug><wp:tag_name><![CDATA[三角形的]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug><![CDATA[%e4%b8%89%e8%a7%92%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[三角数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>75</wp:term_id><wp:tag_slug><![CDATA[%e4%b8%ad%e6%96%ad]]></wp:tag_slug><wp:tag_name><![CDATA[中断]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>104</wp:term_id><wp:tag_slug><![CDATA[%e4%b8%b4%e6%97%b6%e7%b4%a2%e5%bc%95]]></wp:tag_slug><wp:tag_name><![CDATA[临时索引]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>93</wp:term_id><wp:tag_slug><![CDATA[%e4%b8%bb%e7%b4%a2%e5%bc%95]]></wp:tag_slug><wp:tag_name><![CDATA[主索引]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>43</wp:term_id><wp:tag_slug><![CDATA[%e4%ba%8c%e9%a1%b9%e5%bc%8f%e5%85%ac%e5%bc%8f]]></wp:tag_slug><wp:tag_name><![CDATA[二项式公式]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug><![CDATA[%e4%ba%8f%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[亏数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>55</wp:term_id><wp:tag_slug><![CDATA[%e4%ba%94%e8%be%b9%e5%bd%a2%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[五边形数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug><![CDATA[%e4%ba%94%e8%be%b9%e5%bd%a2%e7%9a%84]]></wp:tag_slug><wp:tag_name><![CDATA[五边形的]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug><![CDATA[%e4%ba%b2%e5%92%8c%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[亲和数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>204</wp:term_id><wp:tag_slug><![CDATA[%e4%bf%a1%e6%81%af%e8%ae%ba]]></wp:tag_slug><wp:tag_name><![CDATA[信息论]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug><![CDATA[%e5%80%8d%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[倍数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug><![CDATA[%e5%85%a8%e4%bd%8d%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[全位数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug><![CDATA[%e5%85%a8%e6%8e%92%e5%88%97]]></wp:tag_slug><wp:tag_name><![CDATA[全排列]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug><![CDATA[%e5%85%ab%e7%9a%87%e5%90%8e%e9%97%ae%e9%a2%98]]></wp:tag_slug><wp:tag_name><![CDATA[八皇后问题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>121</wp:term_id><wp:tag_slug><![CDATA[%e5%85%ac%e5%bc%80%e8%af%be]]></wp:tag_slug><wp:tag_name><![CDATA[公开课]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug><![CDATA[%e5%85%ad%e8%be%b9%e5%bd%a2%e7%9a%84]]></wp:tag_slug><wp:tag_name><![CDATA[六边形的]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>187</wp:term_id><wp:tag_slug><![CDATA[%e5%88%86%e5%b8%83%e5%bc%8f]]></wp:tag_slug><wp:tag_name><![CDATA[分布式]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug><![CDATA[%e5%88%86%e6%95%b0%e5%8a%a0%e6%b3%95]]></wp:tag_slug><wp:tag_name><![CDATA[分数加法]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug><![CDATA[%e5%88%86%e6%95%b0%e5%8c%96%e7%ae%80]]></wp:tag_slug><wp:tag_name><![CDATA[分数化简]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>143</wp:term_id><wp:tag_slug><![CDATA[%e5%88%86%e8%af%8d]]></wp:tag_slug><wp:tag_name><![CDATA[分词]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>146</wp:term_id><wp:tag_slug><![CDATA[%e5%88%86%e8%af%8d%e7%b2%92%e5%ba%a6]]></wp:tag_slug><wp:tag_name><![CDATA[分词粒度]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>188</wp:term_id><wp:tag_slug><![CDATA[%e5%88%86%e9%a1%b5]]></wp:tag_slug><wp:tag_name><![CDATA[分页]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>182</wp:term_id><wp:tag_slug><![CDATA[%e5%88%97%e8%a1%a8%e8%a7%a3%e6%9e%90]]></wp:tag_slug><wp:tag_name><![CDATA[列表解析]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>106</wp:term_id><wp:tag_slug><![CDATA[%e5%88%a0%e9%99%a4]]></wp:tag_slug><wp:tag_name><![CDATA[删除]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>65</wp:term_id><wp:tag_slug><![CDATA[%e5%88%a9%e5%85%8b%e7%91%9e%e5%b0%94%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[利克瑞尔数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>179</wp:term_id><wp:tag_slug><![CDATA[%e5%89%8d%e7%bc%80%e6%a0%91]]></wp:tag_slug><wp:tag_name><![CDATA[前缀树]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>138</wp:term_id><wp:tag_slug><![CDATA[%e5%8a%a0%e5%be%b7%e7%ba%b3]]></wp:tag_slug><wp:tag_name><![CDATA[加德纳]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug><![CDATA[%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92]]></wp:tag_slug><wp:tag_name><![CDATA[动态规划]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>109</wp:term_id><wp:tag_slug><![CDATA[%e5%8c%88%e7%89%99%e5%88%a9]]></wp:tag_slug><wp:tag_name><![CDATA[匈牙利]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>201</wp:term_id><wp:tag_slug><![CDATA[%e5%8d%87%e7%ba%a7]]></wp:tag_slug><wp:tag_name><![CDATA[升级]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>41</wp:term_id><wp:tag_slug><![CDATA[%e5%8d%95%e5%88%86%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[单分数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>159</wp:term_id><wp:tag_slug><![CDATA[%e5%8f%96%e7%9f%b3%e5%ad%90]]></wp:tag_slug><wp:tag_name><![CDATA[取石子]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug><![CDATA[%e5%92%8c%e7%9a%84%e5%b9%b3%e6%96%b9]]></wp:tag_slug><wp:tag_name><![CDATA[和的平方]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>59</wp:term_id><wp:tag_slug><![CDATA[%e5%93%a5%e5%be%b7%e5%b7%b4%e8%b5%ab%e7%9a%84%e5%8f%a6%e4%b8%80%e4%b8%aa%e7%8c%9c%e6%83%b3]]></wp:tag_slug><wp:tag_name><![CDATA[哥德巴赫的另一个猜想]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug><![CDATA[%e5%9b%9e%e6%96%87%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[回文数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug><![CDATA[%e5%9b%a0%e5%ad%90%e4%b8%aa%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[因子个数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>174</wp:term_id><wp:tag_slug><![CDATA[%e5%a0%86]]></wp:tag_slug><wp:tag_name><![CDATA[堆]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>175</wp:term_id><wp:tag_slug><![CDATA[%e5%a0%86%e6%8e%92%e5%ba%8f]]></wp:tag_slug><wp:tag_name><![CDATA[堆排序]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>90</wp:term_id><wp:tag_slug><![CDATA[%e5%a2%9e%e9%87%8f%e7%b4%a2%e5%bc%95]]></wp:tag_slug><wp:tag_name><![CDATA[增量索引]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug><![CDATA[%e5%a4%9a%e9%87%8d%e8%83%8c%e5%8c%85]]></wp:tag_slug><wp:tag_name><![CDATA[多重背包]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>61</wp:term_id><wp:tag_slug><![CDATA[%e5%a4%a7%e6%95%b0%e8%bf%90%e7%ae%97]]></wp:tag_slug><wp:tag_name><![CDATA[大数运算]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug><![CDATA[%e5%a4%a7%e6%95%b4%e6%95%b0%e6%b1%82%e5%92%8c]]></wp:tag_slug><wp:tag_name><![CDATA[大整数求和]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>136</wp:term_id><wp:tag_slug><![CDATA[%e5%ad%90%e7%9b%ae%e5%bd%95]]></wp:tag_slug><wp:tag_name><![CDATA[子目录]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug><![CDATA[%e5%ad%97%e5%85%b8%e5%ba%8f]]></wp:tag_slug><wp:tag_name><![CDATA[字典序]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>178</wp:term_id><wp:tag_slug><![CDATA[%e5%ad%97%e5%85%b8%e6%a0%91]]></wp:tag_slug><wp:tag_name><![CDATA[字典树]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug><![CDATA[%e5%ae%8c%e7%be%8e%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[完美数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>72</wp:term_id><wp:tag_slug><![CDATA[%e5%ae%9a%e6%97%b6%e5%99%a8]]></wp:tag_slug><wp:tag_name><![CDATA[定时器]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>27</wp:term_id><wp:tag_slug><![CDATA[%e5%b9%82]]></wp:tag_slug><wp:tag_name><![CDATA[幂]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>45</wp:term_id><wp:tag_slug><![CDATA[%e5%b9%82%e6%96%b9]]></wp:tag_slug><wp:tag_name><![CDATA[幂方]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug><![CDATA[%e5%b9%b3%e6%96%b9%e7%9a%84%e5%92%8c]]></wp:tag_slug><wp:tag_name><![CDATA[平方的和]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>172</wp:term_id><wp:tag_slug><![CDATA[%e5%b9%b6%e6%9f%a5%e9%9b%86]]></wp:tag_slug><wp:tag_name><![CDATA[并查集]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>151</wp:term_id><wp:tag_slug><![CDATA[%e5%bc%80%e6%ba%90]]></wp:tag_slug><wp:tag_name><![CDATA[开源]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>84</wp:term_id><wp:tag_slug><![CDATA[%e5%bc%82%e6%88%96]]></wp:tag_slug><wp:tag_name><![CDATA[异或]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug><![CDATA[%e5%be%aa%e7%8e%af%e5%b0%8f%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[循环小数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>76</wp:term_id><wp:tag_slug><![CDATA[%e5%bf%bd%e7%95%a5]]></wp:tag_slug><wp:tag_name><![CDATA[忽略]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>64</wp:term_id><wp:tag_slug><![CDATA[%e6%89%91%e5%85%8b%e7%89%8c]]></wp:tag_slug><wp:tag_name><![CDATA[扑克牌]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>161</wp:term_id><wp:tag_slug><![CDATA[%e6%89%94%e8%9b%8b%e9%97%ae%e9%a2%98]]></wp:tag_slug><wp:tag_name><![CDATA[扔蛋问题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>46</wp:term_id><wp:tag_slug><![CDATA[%e6%89%be%e9%9b%b6%e9%92%b1%e9%97%ae%e9%a2%98]]></wp:tag_slug><wp:tag_name><![CDATA[找零钱问题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>123</wp:term_id><wp:tag_slug><![CDATA[%e6%8d%a2%e8%a1%8c]]></wp:tag_slug><wp:tag_name><![CDATA[换行]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug><![CDATA[%e6%8e%92%e5%88%97]]></wp:tag_slug><wp:tag_name><![CDATA[排列]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>53</wp:term_id><wp:tag_slug><![CDATA[%e6%8e%a8%e7%90%86]]></wp:tag_slug><wp:tag_name><![CDATA[推理]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug><![CDATA[%e6%95%b0%e5%ad%97%e5%86%99%e6%88%90%e5%8d%95%e8%af%8d]]></wp:tag_slug><wp:tag_name><![CDATA[数字写成单词]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>164</wp:term_id><wp:tag_slug><![CDATA[%e6%95%b4%e6%95%b0%e5%88%92%e5%88%86]]></wp:tag_slug><wp:tag_name><![CDATA[整数划分]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug><![CDATA[%e6%96%90%e6%b3%a2%e9%82%a3%e5%a5%91%e6%95%b0%e5%88%97]]></wp:tag_slug><wp:tag_name><![CDATA[斐波那契数列]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug><![CDATA[%e6%96%b9%e6%a0%bc]]></wp:tag_slug><wp:tag_name><![CDATA[方格]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>137</wp:term_id><wp:tag_slug><![CDATA[%e6%97%a0%e8%a7%a3%e7%9a%84%e9%9a%be%e9%a2%98]]></wp:tag_slug><wp:tag_name><![CDATA[无解的难题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug><![CDATA[%e6%97%a5%e6%9c%9f]]></wp:tag_slug><wp:tag_name><![CDATA[日期]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>91</wp:term_id><wp:tag_slug><![CDATA[%e6%9b%b4%e6%96%b0]]></wp:tag_slug><wp:tag_name><![CDATA[更新]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>181</wp:term_id><wp:tag_slug><![CDATA[%e6%9c%80%e5%a4%a7%e5%ad%90%e7%9f%a9%e9%98%b5]]></wp:tag_slug><wp:tag_name><![CDATA[最大子矩阵]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug><![CDATA[%e6%9c%80%e5%a4%a7%e7%b4%a0%e6%95%b0%e5%9b%a0%e5%ad%90]]></wp:tag_slug><wp:tag_name><![CDATA[最大素数因子]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>163</wp:term_id><wp:tag_slug><![CDATA[%e6%9c%80%e5%a4%a7%e8%bf%9e%e7%bb%ad%e5%ad%90%e5%ba%8f%e5%88%97]]></wp:tag_slug><wp:tag_name><![CDATA[最大连续子序列]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug><![CDATA[%e6%9c%80%e5%b0%8f%e4%b9%98%e7%a7%af]]></wp:tag_slug><wp:tag_name><![CDATA[最小乘积]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>156</wp:term_id><wp:tag_slug><![CDATA[%e6%9c%80%e5%b0%8f%e5%85%ac%e5%80%8d%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[最小公倍数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>176</wp:term_id><wp:tag_slug><![CDATA[%e6%9c%80%e5%b0%8f%e7%9a%84k%e4%b8%aa%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[最小的K个数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>54</wp:term_id><wp:tag_slug><![CDATA[%e6%9e%9a%e4%b8%be]]></wp:tag_slug><wp:tag_name><![CDATA[枚举]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b]]></wp:tag_slug><wp:tag_name><![CDATA[欧拉工程]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>153</wp:term_id><wp:tag_slug><![CDATA[%e6%ad%a3%e5%88%99]]></wp:tag_slug><wp:tag_name><![CDATA[正则]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>194</wp:term_id><wp:tag_slug><![CDATA[%e6%ae%b5%e5%90%88%e5%b9%b6]]></wp:tag_slug><wp:tag_name><![CDATA[段合并]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug><![CDATA[%e6%af%94%e8%be%83%e5%87%bd%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[比较函数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug><![CDATA[%e6%af%95%e8%be%be%e5%93%a5%e6%8b%89%e6%96%af%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[毕达哥拉斯数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>183</wp:term_id><wp:tag_slug><![CDATA[%e6%bc%a9%e6%b6%a1]]></wp:tag_slug><wp:tag_name><![CDATA[漩涡]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>212</wp:term_id><wp:tag_slug><![CDATA[%e7%82%b9%e5%8f%b7]]></wp:tag_slug><wp:tag_name><![CDATA[点号]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>127</wp:term_id><wp:tag_slug><![CDATA[%e7%84%a6%e7%82%b9]]></wp:tag_slug><wp:tag_name><![CDATA[焦点]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>110</wp:term_id><wp:tag_slug><![CDATA[%e7%89%b9%e6%ae%8a%e5%8f%98%e9%87%8f]]></wp:tag_slug><wp:tag_name><![CDATA[特殊变量]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>37</wp:term_id><wp:tag_slug><![CDATA[%e7%9b%88%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[盈数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>51</wp:term_id><wp:tag_slug><![CDATA[%e7%9b%b4%e8%a7%92%e4%b8%89%e8%a7%92%e5%bd%a2]]></wp:tag_slug><wp:tag_name><![CDATA[直角三角形]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>215</wp:term_id><wp:tag_slug><![CDATA[%e7%a1%ac%e9%93%be%e6%8e%a5]]></wp:tag_slug><wp:tag_name><![CDATA[硬链接]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>199</wp:term_id><wp:tag_slug><![CDATA[%e7%ac%94%e8%af%95%e9%a2%98]]></wp:tag_slug><wp:tag_name><![CDATA[笔试题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug><![CDATA[%e7%ad%9b%e6%b3%95]]></wp:tag_slug><wp:tag_name><![CDATA[筛法]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>208</wp:term_id><wp:tag_slug><![CDATA[%e7%ae%80%e6%b4%81]]></wp:tag_slug><wp:tag_name><![CDATA[简洁]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>67</wp:term_id><wp:tag_slug><![CDATA[%e7%b1%b3%e5%8b%92-%e6%8b%89%e5%ae%be]]></wp:tag_slug><wp:tag_name><![CDATA[米勒-拉宾]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>144</wp:term_id><wp:tag_slug><![CDATA[%e7%b2%92%e5%ba%a6]]></wp:tag_slug><wp:tag_name><![CDATA[粒度]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>147</wp:term_id><wp:tag_slug><![CDATA[%e7%b2%be%e7%a1%ae%e5%8c%b9%e9%85%8d]]></wp:tag_slug><wp:tag_name><![CDATA[精确匹配]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug><![CDATA[%e7%b4%a0%e6%95%b0]]></wp:tag_slug><wp:tag_name><![CDATA[素数]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>85</wp:term_id><wp:tag_slug><![CDATA[%e7%b4%a0%e6%95%b0%e5%88%a4%e5%ae%9a]]></wp:tag_slug><wp:tag_name><![CDATA[素数判定]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug><![CDATA[%e7%b4%a0%e6%95%b0%e5%9b%a0%e5%ad%90]]></wp:tag_slug><wp:tag_name><![CDATA[素数因子]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>63</wp:term_id><wp:tag_slug><![CDATA[%e7%b4%a0%e6%95%b0%e6%97%8f]]></wp:tag_slug><wp:tag_name><![CDATA[素数族]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>150</wp:term_id><wp:tag_slug><![CDATA[%e7%b4%a2%e5%bc%95]]></wp:tag_slug><wp:tag_name><![CDATA[索引]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug><![CDATA[%e7%bb%84%e5%90%88]]></wp:tag_slug><wp:tag_name><![CDATA[组合]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>197</wp:term_id><wp:tag_slug><![CDATA[%e7%bb%86%e7%b2%92%e5%ba%a6]]></wp:tag_slug><wp:tag_name><![CDATA[细粒度]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>157</wp:term_id><wp:tag_slug><![CDATA[%e7%bc%96%e8%be%91%e8%b7%9d%e7%a6%bb]]></wp:tag_slug><wp:tag_name><![CDATA[编辑距离]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug><![CDATA[%e8%80%83%e6%8b%89%e5%85%b9%e9%97%ae%e9%a2%98]]></wp:tag_slug><wp:tag_name><![CDATA[考拉兹问题]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>124</wp:term_id><wp:tag_slug><![CDATA[%e8%82%a1%e7%a5%a8]]></wp:tag_slug><wp:tag_name><![CDATA[股票]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>97</wp:term_id><wp:tag_slug><![CDATA[%e8%87%aa%e5%8a%a8%e6%9b%b4%e6%96%b0]]></wp:tag_slug><wp:tag_name><![CDATA[自动更新]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug><![CDATA[%e8%9e%ba%e6%97%8b]]></wp:tag_slug><wp:tag_name><![CDATA[螺旋]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>196</wp:term_id><wp:tag_slug><![CDATA[%e8%b4%9f%e5%80%bc]]></wp:tag_slug><wp:tag_name><![CDATA[负值]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>155</wp:term_id><wp:tag_slug><![CDATA[%e8%b4%a8%e5%9b%a0%e5%ad%90]]></wp:tag_slug><wp:tag_name><![CDATA[质因子]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>192</wp:term_id><wp:tag_slug><![CDATA[%e8%bd%ac%e6%8d%a2]]></wp:tag_slug><wp:tag_name><![CDATA[转换]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>214</wp:term_id><wp:tag_slug><![CDATA[%e8%bd%af%e9%93%be%e6%8e%a5]]></wp:tag_slug><wp:tag_name><![CDATA[软链接]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>50</wp:term_id><wp:tag_slug><![CDATA[%e8%bf%9b%e5%88%b6]]></wp:tag_slug><wp:tag_name><![CDATA[进制]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug><![CDATA[%e8%bf%9e%e7%bb%ad%e4%b9%98%e7%a7%af]]></wp:tag_slug><wp:tag_name><![CDATA[连续乘积]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>62</wp:term_id><wp:tag_slug><![CDATA[%e8%bf%9e%e7%bb%ad%e7%b4%a0%e6%95%b0%e5%92%8c]]></wp:tag_slug><wp:tag_name><![CDATA[连续素数和]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>162</wp:term_id><wp:tag_slug><![CDATA[%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f]]></wp:tag_slug><wp:tag_name><![CDATA[选择排序]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>158</wp:term_id><wp:tag_slug><![CDATA[%e9%80%92%e5%bd%92]]></wp:tag_slug><wp:tag_name><![CDATA[递归]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>92</wp:term_id><wp:tag_slug><![CDATA[%e9%80%9f%e5%ba%a6]]></wp:tag_slug><wp:tag_name><![CDATA[速度]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>120</wp:term_id><wp:tag_slug><![CDATA[%e9%87%91%e8%9e%8d%e5%ad%a6]]></wp:tag_slug><wp:tag_name><![CDATA[金融学]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug><![CDATA[%e9%97%b0%e5%b9%b4]]></wp:tag_slug><wp:tag_name><![CDATA[闰年]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug><![CDATA[%e9%98%b6%e4%b9%98]]></wp:tag_slug><wp:tag_name><![CDATA[阶乘]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>141</wp:term_id><wp:tag_slug><![CDATA[%e9%9d%99%e6%80%81%e8%b5%84%e6%ba%90]]></wp:tag_slug><wp:tag_name><![CDATA[静态资源]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>40</wp:term_id><wp:tag_slug><![CDATA[%e9%9d%9e%e9%80%92%e5%bd%92]]></wp:tag_slug><wp:tag_name><![CDATA[非递归]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>160</wp:term_id><wp:tag_slug><![CDATA[%e9%bb%84%e9%87%91%e5%88%86%e5%89%b2%e6%af%94]]></wp:tag_slug><wp:tag_name><![CDATA[黄金分割比]]></wp:tag_name></wp:tag>

	<generator>https://wordpress.org/?v=4.4.2</generator>

	<item>
		<title>关于我</title>
		<link>http://127.0.0.1:8000/blog/about-me/</link>
		<pubDate>Thu, 11 Apr 2013 07:59:12 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[一只小小鸟，相信兼济天下则达，独善其身则穷。所以在此记录学习过程中遇到的一些问题以及解决办法。
更详细的关于我请移步至<a href="http://www.dengshilong.org/about-me" target="_blank">http://www.dengshilong.org/about-me</a>

邮箱邮箱：long470884130#163.com 自行将#改为@]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date><![CDATA[2013-04-11 07:59:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-11 07:59:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[about-me]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_page_template]]></wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791105]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>本站目录</title>
		<link>http://127.0.0.1:8000/blog/sitemap/</link>
		<pubDate>Sat, 20 Apr 2013 04:53:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?page_id=11</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<!-- ddsitemapgen -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date><![CDATA[2013-04-20 04:53:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-20 04:53:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sitemap]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[page]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791106]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>填方格问题</title>
		<link>http://127.0.0.1:8000/blog/2013/04/25/%e5%a1%ab%e6%96%b9%e6%a0%bc%e9%97%ae%e9%a2%98/</link>
		<pubDate>Thu, 25 Apr 2013 10:20:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[昨天去找堂姐，看到堂姐买给她儿子的玩具，其中一个是放格子玩具。也就是在一个有6 * 6，一共36格的盒子中，放入6个1,6个2,6个3，。。。，6个6，使得各行各列的数字不重复。这个挺简单的，于是对它进行扩展，也就是在各行各列的数字不重复的基础上，还要求斜边不重复，当场没做出来，回来之后写程序。想起了以前的八皇后问题，运行了一下
N皇后问题解的个数
1    1
2    0
3    0
4    2
5    10
6    4
7    40
8    92
9    352
10    724
11    2680    
12    14200
13    73712
14    365596    
15    2279184    
16    14772512
17    95815104
发现六皇后问题，只有4个解，所以断定上面的扩展问题无解。不知道上面的数字有什么规律。顺便做了以下两个问题。
问题1
在n * n个格子里填入  n 个1，n个2，。。。 n 个 n使得各行各列出现的数字不重复
如在3 * 3的格子中填入
1 2 3
3 1 2
2 3 1
这个就可以满足条件
问对于1 * 1, 2 * 2 ,3 * 3, ...， 6 * 6分别有几种填法？
解答如下
1 1
2 2
3 12
4 576
5 161280
由于6 * 6 时解的个数已经很多，程序跑的很慢，所以这个次数还不知道。

问题2
在n * n个格子里填入  n 个1，n个2，。。。 n 个 n使得各行各列，以及斜边出现的数字不重复
此时对于3 * 3的格子中填入
1 2 3
3 1 2
2 3 1
这个就不可以满足条件了，因为从左上角往右下角方向看，有3 3,1 1 1,2 2 在同一条直线上。
而对于 5 * 5的格子中填入
1 2 3 4 5
3 4 5 1 2
5 1 2 3 4
2 3 4 5 1
4 5 1 2 3
这个就可以满足条件了。
问对于1 * 1, 2 * 2 ,3 * 3, ...， 6 * 6分别有几种填法？
解答如下
1 1
2 0
3 0 
4 0
5 240
6 0
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date><![CDATA[2013-04-25 10:20:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-25 10:20:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a1%ab%e6%96%b9%e6%a0%bc%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%85%ab%e7%9a%87%e5%90%8e%e9%97%ae%e9%a2%98"><![CDATA[八皇后问题]]></category>
		<category domain="category" nicename="math"><![CDATA[数学]]></category>
		<category domain="post_tag" nicename="%e6%96%b9%e6%a0%bc"><![CDATA[方格]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791107]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题1</title>
		<link>http://127.0.0.1:8000/blog/2013/04/26/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%981/</link>
		<pubDate>Fri, 26 Apr 2013 14:51:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=99</guid>
		<description></description>
		<content:encoded><![CDATA[决定以后有空时就翻译欧拉工程，从今天开始。不知道应不应该把解法贴出来，有点损人品了，还是决定贴吧。

原文链接  <a href="http://projecteuler.net/problem=1" target="_blank">http://projecteuler.net/problem=1</a>

Multiples of 3 and 5

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

3和5的倍数

如果我们列出10以内是3或者5的倍数的自然数，我们将得到3,5,6和9.这些倍数的总和是23.

求1000以内3或者5的倍数的总和。

解答：

最直接的方法，判断[1, 1000)中的自然数，将是3或者5的倍数相加，Python就一句

[python]print sum([i for i in xrange(1, n) if i % 3 == 0 or i % 5 == 0])
[/python]

还有一种更简便的方法，可以直接用笔算出来。例如求[1, 1000)中3的倍数的和，
这里3的倍数是3，6，9，。。。，999。也就是3 * 1，3 * 2，3 * 3，。。。3 * 333。所以求得1 + 2 + 。。。+ 333后乘以3就得到了最终结果，写成Python代码如下。

[python]sum(xrange(1, 1 + (1000 - 1) / 3)) * 3[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date><![CDATA[2013-04-26 14:51:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-26 14:51:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%981]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%80%8d%e6%95%b0"><![CDATA[倍数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791108]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题2</title>
		<link>http://127.0.0.1:8000/blog/2013/04/26/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%982/</link>
		<pubDate>Fri, 26 Apr 2013 14:52:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=115</guid>
		<description></description>
		<content:encoded><![CDATA[原题地址  <a href="http://projecteuler.net/problem=2" target="_blank">http://projecteuler.net/problem=2</a>

Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

偶数斐波纳契数
斐波那契数列中的每一个数等于前面两个数的和，从1和2开始，前面十项为：

1, 2, 3, 5, 8, 13, 21, 34, 55, 89，。。。

考虑斐波那契数中不超过4000000的数，求这些数中所有偶数的和。

解法：

这题不多说，关键是生成斐波那契数列，这里使用了一个迭代器的技巧。代码如下：

[python]
#!/usr/bin/python
# -*- coding:utf-8 -*-
'''
Created on 2013-4-26

@author: shilong
@email: long470884130@163.com
'''

def fibonacci():
    &quot;&quot;&quot;一个迭代函数，每次得到一个斐波那契数,依次将得到1, 2, 3, 5...&quot;&quot;&quot;
    a = 1
    b = 1
    while True:
        yield a
        a, b = a + b, a
        
if __name__ == &quot;__main__&quot;:
    fi = fibonacci()
    s = 0
    while True:
        n = next(fi)
        if n &gt;= 4000000:
            break
        if n % 2 == 0:
            s += n
    print s
[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date><![CDATA[2013-04-26 14:52:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-26 14:52:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%982]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%96%90%e6%b3%a2%e9%82%a3%e5%a5%91%e6%95%b0%e5%88%97"><![CDATA[斐波那契数列]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791109]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题3</title>
		<link>http://127.0.0.1:8000/blog/2013/04/29/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%983/</link>
		<pubDate>Mon, 29 Apr 2013 01:41:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[原题链接<a href="http://projecteuler.net/problem=3" target="_blank">http://projecteuler.net/problem=3</a>

Largest prime factor
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?

最大的素数因子

整数13195的素数因子有5, 7, 13和29.

求数600851475143的最大素数因子？

解法：
这一题本来想先求出600851475143的以内的素数，然后再从最小的素数开始，找到它的最大因子。可是程序运行时出现了OverflowError: Python int too large to convert to C long错误，也就是600851475143已经超出了C语言中整型的范围，这是因为xrange这个函数的范围限制在C的long长度，在32位的机器中，传入xrange的数不能大于2 ** 31 - 1.上网找这个错误时，在<a href="http://stackoverflow.com/questions/9816603/range-is-too-large-python/9833011#9833011" target="_blank">StackOverFlow</a>中找到了这个错误的解答，其中有一个人给出了一个方法。
下面举例来说明这个方法，例如要求360的素数因子，先从素数2开始，360一直除以2知道不在整除，得到45；之后一直除以素数3知道不能整除，得到5；之后3 + 2得到5，于是除以5，得到1，结束。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date><![CDATA[2013-04-29 09:41:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-29 01:41:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%983]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%9c%80%e5%a4%a7%e7%b4%a0%e6%95%b0%e5%9b%a0%e5%ad%90"><![CDATA[最大素数因子]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791110]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题4</title>
		<link>http://127.0.0.1:8000/blog/2013/04/29/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%984/</link>
		<pubDate>Mon, 29 Apr 2013 02:10:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[原题链接<a href="http://projecteuler.net/problem=4" target="_blank">http://projecteuler.net/problem=4</a>
Largest palindrome product
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.

Find the largest palindrome made from the product of two 3-digit numbers.

最大的回文乘积

回文数的定义是从左右两边读都是相同的。在两个两位数的乘积中，最大的回文数是9009 = 91 * 99.

求两个三位数的乘积中，最大的回文数是什么？

解法：
这题没找到什么好的方法，暴力解决。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date><![CDATA[2013-04-29 10:10:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-04-29 02:10:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%984]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%9b%9e%e6%96%87%e6%95%b0"><![CDATA[回文数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791111]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题5</title>
		<link>http://127.0.0.1:8000/blog/2013/05/03/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%985/</link>
		<pubDate>Fri, 03 May 2013 15:51:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=150</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h2>原题链接<a href="http://projecteuler.net/problem=5" target="_blank">http://projecteuler.net/problem=5</a></h2>
<h2>Smallest multiple</h2>
</div>
<div>

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is <dfn title="divisible with no remainder">evenly divisible</dfn> by all of the numbers from 1 to 20?

最小乘积

2520是能够被1到10整除的正整数中最小的。

求能够被1到20整除的正整数中最小的。

解答：

其实这题就是求1到10中的素数出现的最多次数，例如1到10中有素数2,3,5,7。其中2出现的次数最多为3次，即8；3出现的次数最多为2次，即9；其它为1次.所以最终的结果是8 * 9 * 5 * 7，即2520.

对于1到20，则有素数2,3,5,7,11,13,17,19.其中2出现的次数最多为4次，即16；3出现的次数为2，即9；其它都为 1次。所以最终的结果是16 * 9 * 5 * 7 * 11 * 13 * 17 * 19。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date><![CDATA[2013-05-03 23:51:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-03 15:51:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%985]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%9c%80%e5%b0%8f%e4%b9%98%e7%a7%af"><![CDATA[最小乘积]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791112]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>151</wp:comment_id>
			<wp:comment_author><![CDATA[procr]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[procr@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[120.38.73.70]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-01-19 20:03:05]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-01-19 12:03:05]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不太理解  能不能解释一下下~~？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>198</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[long470884130@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.33.201.170]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-03-01 21:14:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-03-01 13:14:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[这个还是比较容易的。首先，任何一个合数都可以表示成素数的乘积。而我们需要求的是其中的素数以及出现的次数。先从最简单的开始，求能够被1,2,3,4,5,6整除的数，1 * 2 * 3 * 4 * 5 * 6显然可以，但这个不是最小。要求最小的，我们只要把素数先找出来，这里是2 3 5,之后分别求2 3 5的次数，这里2只能出现两次，因为2的三次方是8已经大于6了，而3只能出现一次，因为3的二次方9已经大于6了，而5只能出现一次，因为5的二次方25已经大于6了。最终的结果就是4 * 3 * 5 = 60]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>151</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>欧拉工程-问题6</title>
		<link>http://127.0.0.1:8000/blog/2013/05/04/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%986/</link>
		<pubDate>Sat, 04 May 2013 07:32:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h2>原题链接 <a href="http://projecteuler.net/problem=6" target="_blank">http://projecteuler.net/problem=6</a></h2>
<h2>Sum square difference</h2>
</div>
<div>

The sum of the squares of the first ten natural numbers is,
<div>1<sup>2</sup> + 2<sup>2</sup> + ... + 10<sup>2</sup> = 385</div>
The square of the sum of the first ten natural numbers is,
<div>(1 + 2 + ... + 10)<sup>2</sup> = 55<sup>2</sup> = 3025</div>
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

和平方差

前10个自然数的平方和是，

1<sup>2</sup> + 2<sup>2</sup> + ... + 10<sup>2</sup> = 385

前10个自然数的和的平方是，

(1 + 2 + ... + 10)<sup>2</sup> = 55<sup>2</sup> = 3025

因此前10个自然数的和的平方与平方的和之间的差是 3025 - 385 = 2640.

求前100个自然数的和的平方与平方的和之间的差。

解答：

其实就是用公式

\(1^2 + 2 ^2 + \ldots + n^2 = \frac{1}{6}n(n + 1)(2n + 1)\)<sup>
</sup>

\((1 + 2 + \ldots + n)^2 = (\frac{1}{2}n(n+1))^2\)

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date><![CDATA[2013-05-04 15:32:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-04 07:32:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%986]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%92%8c%e7%9a%84%e5%b9%b3%e6%96%b9"><![CDATA[和的平方]]></category>
		<category domain="post_tag" nicename="%e5%b9%b3%e6%96%b9%e7%9a%84%e5%92%8c"><![CDATA[平方的和]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791113]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maven插件安装</title>
		<link>http://127.0.0.1:8000/blog/2014/03/08/%e5%ae%89%e8%a3%85maven/maven%e6%8f%92%e4%bb%b6%e5%ae%89%e8%a3%85/</link>
		<pubDate>Sat, 08 Mar 2014 04:06:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/03/Maven插件安装.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>622</wp:post_id>
		<wp:post_date><![CDATA[2014-03-08 12:06:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-08 04:06:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven%e6%8f%92%e4%bb%b6%e5%ae%89%e8%a3%85]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>621</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/03/Maven插件安装.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/Maven插件安装.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:877;s:6:"height";i:435;s:4:"file";s:29:"2014/03/Maven插件安装.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"Maven插件安装-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"Maven插件安装-300x148.png";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maven-Installations配置</title>
		<link>http://127.0.0.1:8000/blog/2014/03/08/%e5%ae%89%e8%a3%85maven/maven-installations%e9%85%8d%e7%bd%ae/</link>
		<pubDate>Sat, 08 Mar 2014 04:07:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-Installations配置.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>623</wp:post_id>
		<wp:post_date><![CDATA[2014-03-08 12:07:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-08 04:07:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven-installations%e9%85%8d%e7%bd%ae]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>621</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/03/Maven-Installations配置.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/Maven-Installations配置.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:660;s:6:"height";i:401;s:4:"file";s:37:"2014/03/Maven-Installations配置.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"Maven-Installations配置-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"Maven-Installations配置-300x182.png";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maven-Installations配置结果</title>
		<link>http://127.0.0.1:8000/blog/2014/03/08/%e5%ae%89%e8%a3%85maven/maven-installations%e9%85%8d%e7%bd%ae%e7%bb%93%e6%9e%9c/</link>
		<pubDate>Sat, 08 Mar 2014 04:07:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-Installations配置结果.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>624</wp:post_id>
		<wp:post_date><![CDATA[2014-03-08 12:07:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-08 04:07:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven-installations%e9%85%8d%e7%bd%ae%e7%bb%93%e6%9e%9c]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>621</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/03/Maven-Installations配置结果.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/Maven-Installations配置结果.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:659;s:6:"height";i:400;s:4:"file";s:43:"2014/03/Maven-Installations配置结果.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"Maven-Installations配置结果-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:43:"Maven-Installations配置结果-300x182.png";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maven-User-Settings配置</title>
		<link>http://127.0.0.1:8000/blog/2014/03/08/%e5%ae%89%e8%a3%85maven/maven-user-settings%e9%85%8d%e7%bd%ae/</link>
		<pubDate>Sat, 08 Mar 2014 04:08:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-User-Settings配置.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>625</wp:post_id>
		<wp:post_date><![CDATA[2014-03-08 12:08:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-08 04:08:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven-user-settings%e9%85%8d%e7%bd%ae]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>621</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/03/Maven-User-Settings配置.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/Maven-User-Settings配置.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:693;s:6:"height";i:325;s:4:"file";s:37:"2014/03/Maven-User-Settings配置.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"Maven-User-Settings配置-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"Maven-User-Settings配置-300x140.png";s:5:"width";i:300;s:6:"height";i:140;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maven插件安装</title>
		<link>http://127.0.0.1:8000/blog/2014/03/08/%e5%ae%89%e8%a3%85maven/maven%e6%8f%92%e4%bb%b6%e5%ae%89%e8%a3%85-2/</link>
		<pubDate>Fri, 21 Mar 2014 08:44:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/03/Maven插件安装.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>633</wp:post_id>
		<wp:post_date><![CDATA[2014-03-21 16:44:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-21 08:44:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven%e6%8f%92%e4%bb%b6%e5%ae%89%e8%a3%85-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>621</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/03/Maven插件安装.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/Maven插件安装.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:877;s:6:"height";i:435;s:4:"file";s:29:"2014/03/Maven插件安装.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:29:"Maven插件安装-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:29:"Maven插件安装-300x148.png";s:5:"width";i:300;s:6:"height";i:148;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maven-Installations配置</title>
		<link>http://127.0.0.1:8000/blog/2014/03/08/%e5%ae%89%e8%a3%85maven/maven-installations%e9%85%8d%e7%bd%ae-2/</link>
		<pubDate>Fri, 21 Mar 2014 08:44:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-Installations配置.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>635</wp:post_id>
		<wp:post_date><![CDATA[2014-03-21 16:44:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-21 08:44:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven-installations%e9%85%8d%e7%bd%ae-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>621</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/03/Maven-Installations配置.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/Maven-Installations配置.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:660;s:6:"height";i:401;s:4:"file";s:37:"2014/03/Maven-Installations配置.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:37:"Maven-Installations配置-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:37:"Maven-Installations配置-300x182.png";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maven-Installations配置结果</title>
		<link>http://127.0.0.1:8000/blog/2014/03/08/%e5%ae%89%e8%a3%85maven/maven-installations%e9%85%8d%e7%bd%ae%e7%bb%93%e6%9e%9c-2/</link>
		<pubDate>Fri, 21 Mar 2014 08:44:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-Installations配置结果.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>636</wp:post_id>
		<wp:post_date><![CDATA[2014-03-21 16:44:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-21 08:44:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven-installations%e9%85%8d%e7%bd%ae%e7%bb%93%e6%9e%9c-2]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>621</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/03/Maven-Installations配置结果.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/Maven-Installations配置结果.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:659;s:6:"height";i:400;s:4:"file";s:43:"2014/03/Maven-Installations配置结果.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:43:"Maven-Installations配置结果-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:43:"Maven-Installations配置结果-300x182.png";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Maven-Installations配置结果</title>
		<link>http://127.0.0.1:8000/blog/2014/03/08/%e5%ae%89%e8%a3%85maven/maven-installations%e9%85%8d%e7%bd%ae%e7%bb%93%e6%9e%9c-3/</link>
		<pubDate>Fri, 21 Mar 2014 08:45:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-Installations配置结果1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>637</wp:post_id>
		<wp:post_date><![CDATA[2014-03-21 16:45:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-21 08:45:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[maven-installations%e9%85%8d%e7%bd%ae%e7%bb%93%e6%9e%9c-3]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>621</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/03/Maven-Installations配置结果1.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/03/Maven-Installations配置结果1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:659;s:6:"height";i:400;s:4:"file";s:44:"2014/03/Maven-Installations配置结果1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:44:"Maven-Installations配置结果1-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:44:"Maven-Installations配置结果1-300x182.png";s:5:"width";i:300;s:6:"height";i:182;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>金融学结业证书</title>
		<link>http://127.0.0.1:8000/blog/2014/05/25/%e6%94%b6%e5%88%b0%e9%87%91%e8%9e%8d%e5%ad%a6%e7%bb%93%e4%b8%9a%e8%af%81%e4%b9%a6-2/%e9%87%91%e8%9e%8d%e5%ad%a6%e7%bb%93%e4%b8%9a%e8%af%81%e4%b9%a6/</link>
		<pubDate>Sun, 25 May 2014 03:13:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/05/金融学结业证书.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>734</wp:post_id>
		<wp:post_date><![CDATA[2014-05-25 11:13:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-25 03:13:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%87%91%e8%9e%8d%e5%ad%a6%e7%bb%93%e4%b8%9a%e8%af%81%e4%b9%a6]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>733</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/05/金融学结业证书.png]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/05/金融学结业证书.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attachment_metadata]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:816;s:6:"height";i:762;s:4:"file";s:33:"2014/05/金融学结业证书.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:4:{s:4:"file";s:33:"金融学结业证书-150x150.png";s:5:"width";i:150;s:6:"height";i:150;s:9:"mime-type";s:9:"image/png";}s:6:"medium";a:4:{s:4:"file";s:33:"金融学结业证书-300x280.png";s:5:"width";i:300;s:6:"height";i:280;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:10:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dict</title>
		<link>http://127.0.0.1:8000/blog/2014/07/08/mmseg%e5%88%86%e8%af%8d/dict/</link>
		<pubDate>Wed, 09 Jul 2014 04:03:10 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/07/dict.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>792</wp:post_id>
		<wp:post_date><![CDATA[2014-07-09 12:03:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-09 04:03:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dict]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>786</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/07/dict.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/dict.txt]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>chars</title>
		<link>http://127.0.0.1:8000/blog/2014/07/08/mmseg%e5%88%86%e8%af%8d/chars/</link>
		<pubDate>Wed, 09 Jul 2014 04:03:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/wp-content/uploads/2014/07/chars.txt</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>793</wp:post_id>
		<wp:post_date><![CDATA[2014-07-09 12:03:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-09 04:03:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[chars]]></wp:post_name>
		<wp:status><![CDATA[inherit]]></wp:status>
		<wp:post_parent>786</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[attachment]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url><![CDATA[http://127.0.0.1:8000/blog/wp-content/uploads/2014/07/chars.txt]]></wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_attached_file]]></wp:meta_key>
			<wp:meta_value><![CDATA[2014/07/chars.txt]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题7</title>
		<link>http://127.0.0.1:8000/blog/2013/05/05/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%987/</link>
		<pubDate>Sun, 05 May 2013 05:02:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h2>原题链接  <a href="http://projecteuler.net/problem=7">http://projecteuler.net/problem=7</a></h2>
<h2>10001st prime</h2>
</div>
<div>

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?

<strong>第10001个素数</strong>

列出前六个素数：2, 3，5, 7, 11，和13，我们可以知道第6个素数是13.

求第10001个素数。

</div>
解答：
没有想到什么好的方法，就用暴力解决。经过观察，对于大于6的正整数都可以用6n,6n + 1,6n + 2,6n + 3,6n + 4,6n + 5表示，其中只有6n + 1,6n + 5有可能是素数。所以可以用一个step变量来记录下一跳的步数，保证需要判断的数字在6n + 1和6n + 5中变换。要判断一个正整数是否是素数，只需用比它的平方根小的所有素数去除它，如果它可以被其中一个整除，则是素数，否则不是。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2013-05-05 13:02:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-05 05:02:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%987]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791114]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题8</title>
		<link>http://127.0.0.1:8000/blog/2013/05/05/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%988/</link>
		<pubDate>Sun, 05 May 2013 06:25:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=193</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>原题链接 <a href="http://projecteuler.net/problem=8" target="_blank">http://projecteuler.net/problem=8</a></h2>
Largest product in a series
Find the greatest product of five consecutive digits in the 1000-digit number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

连串数字的最大乘积
求这1000个数字中，连续5个数字的乘积的最大值

解答：
这题没什么好说的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date><![CDATA[2013-05-05 14:25:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-05 06:25:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%988]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e8%bf%9e%e7%bb%ad%e4%b9%98%e7%a7%af"><![CDATA[连续乘积]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791115]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题9</title>
		<link>http://127.0.0.1:8000/blog/2013/05/05/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%989/</link>
		<pubDate>Sun, 05 May 2013 07:04:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=203</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h2>原题链接 <a href="http://projecteuler.net/problem=9" target="_blank">http://projecteuler.net/problem=9</a></h2>
<h2>Special Pythagorean triplet</h2>
</div>
<div>

A Pythagorean triplet is a set of three natural numbers, <var>a</var> &lt; <var>b</var> &lt; <var>c</var>, for which,
<div><var>a</var><sup>2</sup> + <var>b</var><sup>2</sup> = <var>c</var><sup>2</sup></div>
For example, 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>.

There exists exactly one Pythagorean triplet for which <var>a</var> + <var>b</var> + <var>c</var> = 1000.
Find the product <var>abc</var>.

特殊的毕达哥拉斯三元组

一个毕达哥拉斯三元组指的是三个自然数， <var>a</var> &lt; <var>b</var> &lt; <var>c</var> ,且

<var>                         a</var><sup>2</sup> + <var>b</var><sup>2</sup> = <var>c</var><sup>2</sup>

<sup>例如，</sup>3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>.

有且只有一组毕达哥拉斯三元组满足 <var>a</var> + <var>b</var> + <var>c</var> = 1000.

求abc的乘积

解答：

将 c =  1000 - a - b代入<var>a</var><sup>2</sup> + <var>b</var><sup>2</sup> = <var>c</var><sup>2</sup>

得到1000 * (a + b) = 500000 + a * b

暴力找到满足这个条件的a和b.

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date><![CDATA[2013-05-05 15:04:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-05 07:04:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%989]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%af%95%e8%be%be%e5%93%a5%e6%8b%89%e6%96%af%e6%95%b0"><![CDATA[毕达哥拉斯数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791116]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题10</title>
		<link>http://127.0.0.1:8000/blog/2013/05/05/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9810/</link>
		<pubDate>Sun, 05 May 2013 07:58:56 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=211</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h2>原题链接 <a href="http://projecteuler.net/problem=10" target="_blank">http://projecteuler.net/problem=10</a></h2>
<h2>Summation of primes</h2>
</div>
<div>

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.

素数的和

10以下的所有素数的和是 2 + 3 + 5 + 7 = 17.

求2000000以下所有素数的和。

解答：
用筛法求得2000000以下的所有素数，之后求和

写成代码如下：
[python]
#!/usr/bin/python
# -*- coding:utf-8 -*-
'''
Created on 2013-5-5

@author: shilong
@email: long470884130@163.com
'''
from math import sqrt
def generate_prime(n):
    '''得到[1,n]以内的素数'''
    primes = [True for i in xrange(n + 1)]
    primes[0] = primes[1] = False
    for i in xrange(2,int(sqrt(n)) + 1):
        if primes[i]:
            s = i ** 2
            while s &lt;= n:
                primes[s] = False
                s += i
    primes = [i for i in xrange(2,n + 1) if primes[i]]
    return primes

if __name__ == &quot;__main__&quot;:
    n = 2000000
    primes = generate_prime(n)
    print sum(primes)
[/python]
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>211</wp:post_id>
		<wp:post_date><![CDATA[2013-05-05 15:58:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-05 07:58:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9810]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%ad%9b%e6%b3%95"><![CDATA[筛法]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791117]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题11</title>
		<link>http://127.0.0.1:8000/blog/2013/05/05/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9811/</link>
		<pubDate>Sun, 05 May 2013 08:28:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=229</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h2>原题链接 <a href="http://projecteuler.net/problem=11" target="_blank">http://projecteuler.net/problem=11</a></h2>
<h2>Largest product in a grid</h2>
</div>
<div>

In the 20 * 20 grid below, four numbers along a diagonal line have been marked in red.

08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 <span style="color:red">26</span> 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 <span style="color:red">63</span> 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 <span style="color:red">78</span> 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 <span style="color:red">14</span> 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

The product of these numbers is 26  * 63  * 78  *  14 = 1788696.

What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20 * 20 grid?

在格子中最大的乘积

在下面的20 * 20的格子中，四个沿着对角线的数用红色标出

它们的乘积是 26 * 63 * 78 * 14 = 1788696.

求在这个20 * 20的格子中，四个相邻数的最大乘积(这四个相邻数必须在同一条直线上，向上，下，左，右，或者对角线)

解答：
这题没什么好说的，遍历。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>229</wp:post_id>
		<wp:post_date><![CDATA[2013-05-05 16:28:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-05 08:28:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9811]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e8%bf%9e%e7%bb%ad%e4%b9%98%e7%a7%af"><![CDATA[连续乘积]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791118]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题12</title>
		<link>http://127.0.0.1:8000/blog/2013/05/24/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9812/</link>
		<pubDate>Fri, 24 May 2013 13:52:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=243</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>原题链接 <a href="http://projecteuler.net/problem=12" target="_blank">http://projecteuler.net/problem=12</a></h2>
<h2>Highly divisible triangular number</h2>
<div>

The sequence of triangle numbers is generated by adding the natural numbers. So the 7<sup>th</sup> triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
<blockquote><b> 1</b>: 1
<b> 3</b>: 1,3
<b> 6</b>: 1,2,3,6
<b>10</b>: 1,2,5,10
<b>15</b>: 1,3,5,15
<b>21</b>: 1,3,7,21
<b>28</b>: 1,2,4,7,14,28</blockquote>
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

三角数序列是由自然数相加形成的。第七个三角数是 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.前十个三角数是：

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

我们列举出前7个三角形数的因子：

1: 1

3: 1,3

6: 1,2,3,6

10: 1,2,5,10

15: 1,3,5,10

21: 1,3,7,21

28: 1,2,4,7,14,28

我们可以看到28是第一个有超过5个因子的三角数

求第一个超过500个因子的三角数

解答：

这题的题意其实就是求素数因子，将三角数表示成素数因子乘积的形式，如 \(28 = 2^2 * 7\),这里素数因子2的次数的取值为0,1,2三种可能，素数因子7的次数的取值为0,1两种可能，所以28的因子有6个。按照这个思路，去做就可以了。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date><![CDATA[2013-05-24 21:52:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-24 13:52:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9812]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%b8%89%e8%a7%92%e6%95%b0"><![CDATA[三角数]]></category>
		<category domain="post_tag" nicename="%e5%9b%a0%e5%ad%90%e4%b8%aa%e6%95%b0"><![CDATA[因子个数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791119]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题13</title>
		<link>http://127.0.0.1:8000/blog/2013/05/24/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9813/</link>
		<pubDate>Fri, 24 May 2013 13:58:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题连接 <a href="http://projecteuler.net/problem=13">http://projecteuler.net/problem=13</a></div>
<div></div>
<div>
<h2>Large sum</h2>
</div>
<div>

Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
<div>37107287533902102798797998220837590246510135740250
46376937677490009712648124896970078050417018260538
74324986199524741059474233309513058123726617309629
91942213363574161572522430563301811072406154908250
23067588207539346171171980310421047513778063246676
89261670696623633820136378418383684178734361726757
28112879812849979408065481931592621691275889832738
44274228917432520321923589422876796487670272189318
47451445736001306439091167216856844588711603153276
70386486105843025439939619828917593665686757934951
62176457141856560629502157223196586755079324193331
64906352462741904929101432445813822663347944758178
92575867718337217661963751590579239728245598838407
58203565325359399008402633568948830189458628227828
80181199384826282014278194139940567587151170094390
35398664372827112653829987240784473053190104293586
86515506006295864861532075273371959191420517255829
71693888707715466499115593487603532921714970056938
54370070576826684624621495650076471787294438377604
53282654108756828443191190634694037855217779295145
36123272525000296071075082563815656710885258350721
45876576172410976447339110607218265236877223636045
17423706905851860660448207621209813287860733969412
81142660418086830619328460811191061556940512689692
51934325451728388641918047049293215058642563049483
62467221648435076201727918039944693004732956340691
15732444386908125794514089057706229429197107928209
55037687525678773091862540744969844508330393682126
18336384825330154686196124348767681297534375946515
80386287592878490201521685554828717201219257766954
78182833757993103614740356856449095527097864797581
16726320100436897842553539920931837441497806860984
48403098129077791799088218795327364475675590848030
87086987551392711854517078544161852424320693150332
59959406895756536782107074926966537676326235447210
69793950679652694742597709739166693763042633987085
41052684708299085211399427365734116182760315001271
65378607361501080857009149939512557028198746004375
35829035317434717326932123578154982629742552737307
94953759765105305946966067683156574377167401875275
88902802571733229619176668713819931811048770190271
25267680276078003013678680992525463401061632866526
36270218540497705585629946580636237993140746255962
24074486908231174977792365466257246923322810917141
91430288197103288597806669760892938638285025333403
34413065578016127815921815005561868836468420090470
23053081172816430487623791969842487255036638784583
11487696932154902810424020138335124462181441773470
63783299490636259666498587618221225225512486764533
67720186971698544312419572409913959008952310058822
95548255300263520781532296796249481641953868218774
76085327132285723110424803456124867697064507995236
37774242535411291684276865538926205024910326572967
23701913275725675285653248258265463092207058596522
29798860272258331913126375147341994889534765745501
18495701454879288984856827726077713721403798879715
38298203783031473527721580348144513491373226651381
34829543829199918180278916522431027392251122869539
40957953066405232632538044100059654939159879593635
29746152185502371307642255121183693803580388584903
41698116222072977186158236678424689157993532961922
62467957194401269043877107275048102390895523597457
23189706772547915061505504953922979530901129967519
86188088225875314529584099251203829009407770775672
11306739708304724483816533873502340845647058077308
82959174767140363198008187129011875491310547126581
97623331044818386269515456334926366572897563400500
42846280183517070527831839425882145521227251250327
55121603546981200581762165212827652751691296897789
32238195734329339946437501907836945765883352399886
75506164965184775180738168837861091527357929701337
62177842752192623401942399639168044983993173312731
32924185707147349566916674687634660915035914677504
99518671430235219628894890102423325116913619626622
73267460800591547471830798392868535206946944540724
76841822524674417161514036427982273348055556214818
97142617910342598647204516893989422179826088076852
87783646182799346313767754307809363333018982642090
10848802521674670883215120185883543223812876952786
71329612474782464538636993009049310363619763878039
62184073572399794223406235393808339651327408011116
66627891981488087797941876876144230030984490851411
60661826293682836764744779239180335110989069790714
85786944089552990653640447425576083659976645795096
66024396409905389607120198219976047599490197230297
64913982680032973156037120041377903785566085089252
16730939319872750275468906903707539413042652315011
94809377245048795150954100921645863754710598436791
78639167021187492431995700641917969777599028300699
15368713711936614952811305876380278410754449733078
40789923115535562561142322423255033685442488917353
44889911501440648020369068063960672322193204149535
41503128880339536053299340368006977710650566631954
81234880673210146739058568557934581403627822703280
82616570773948327592232845941706525094512325230608
22918802058777319719839450180888072429661980811197
77158542502016545090413245809786882778948721859617
72107838435069186155435662884062257473692284509516
20849603980134001723930671666823555245252804609722
53503534226472524250874054075591789781264330331690</div>
<div>
<h2>大整数求和</h2>
求这150个数相加得到的和的前10个数字.

解答：

这题没什么好说的，无非就是大整数求和，然后去前10个数字，如果用C++还有得写，用Python就很随意了。

</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2013-05-24 21:58:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-24 13:58:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9813]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%a4%a7%e6%95%b4%e6%95%b0%e6%b1%82%e5%92%8c"><![CDATA[大整数求和]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791120]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题14</title>
		<link>http://127.0.0.1:8000/blog/2013/05/25/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9814/</link>
		<pubDate>Fri, 24 May 2013 16:01:24 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=250</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=14" target="_blank">http://projecteuler.net/problem=14</a></div>
<div>
<h2>Longest Collatz sequence</h2>
</div>
<div>

The following iterative sequence is defined for the set of positive integers:

<var>n</var> -&gt;<var>n</var>/2 (<var>n</var> is even)
<var>n</var> -&gt;3<var>n</var> + 1 (<var>n</var> is odd)

Using the rule above and starting with 13, we generate the following sequence:
<div>13 -&gt; 40 -&gt;20 -&gt;10 -&gt;5 -&gt;16 -&gt; 8 -&gt; 4 -&gt;2 -&gt;1</div>
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

Which starting number, under one million, produces the longest chain?

<b>NOTE:</b> Once the chain starts the terms are allowed to go above one million.

最长的考拉兹数：

在正整数上定义如下迭代序列：

<span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">     n -&gt; n / 2 (n是偶数)</span>

</div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">     n -&gt; 3n + 1 (n是奇数)</span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">从13开始，使用上面的规则，我们将得到如下序列：</span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">13 -&gt; 40 -&gt; 20 -&gt; 10 -&gt; 5 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1</span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">我们可以看到这个序列(从13开始到1结束)包含10个数。虽然这个还没有被证明(考拉兹问题),但我们可以认为所有的数都将在1结束。</span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">求1 000 000以下的数，从哪一个数开始，产生的序列最长。</span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">注意：一旦这个序列开始后，其中的数允许超过1 000 000。</span></div>
<div></div>
<div>解答：</div>
<div>如果将1到1000000都按照上述过程迭代，速度将会很慢，所以要保存一些计算结果，这样速度就会快很多了。</div>
<div>代码面前，了无秘密。直接上代码：
[python]
#!/usr/bin/python
# -*- coding:utf-8 -*-
'''
Created on 2013-5-24

@author: shilong
@email: long470884130@163.com
'''
col = {}
col[1] = 1
def collatz(n):
    if n in col:
        return col[n]
    else:
        if n % 2 == 0:
            col[n] = collatz(n / 2) + 1
        else:
            col[n] = collatz(3 * n + 1) + 1
        return col[n]
[/python]

</div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date><![CDATA[2013-05-25 00:01:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-24 16:01:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9814]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="collatz"><![CDATA[collatz]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e8%80%83%e6%8b%89%e5%85%b9%e9%97%ae%e9%a2%98"><![CDATA[考拉兹问题]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791121]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题15</title>
		<link>http://127.0.0.1:8000/blog/2013/05/25/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9815/</link>
		<pubDate>Sat, 25 May 2013 08:40:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=259</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=15" target="_blank">http://projecteuler.net/problem=15</a></div>
<div>
<h2>Lattice paths</h2>
</div>
<div>

Starting in the top left corner of a 2 * 2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
<div><img alt="" src="file:///C:/Documents%20and%20Settings/Administrator/Local%20Settings/Application%20Data/youdao/ynote/images/60DD8C58AB7942FE9A06094F27ABE259/p_015.gif" data-media-type="image" data-inited="true" /></div>
How many such routes are there through a 20 * 20 grid?

格子路径

从2 * 2格子的左上角开始，只能右走和向下走，一共有6条路可以到达右下角。

求在20 * 20的格子中，一共有多少条路可以从左上角到右下角。

解答：
这题从数学的观点看是这样的，在2 * 2的格子中，一共要走4步才能从左上角到右下角，其中一定有两步是向下走，所以总共次数为 \(C_4^2 = 6\),对于20 * 20也可以这样计算。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date><![CDATA[2013-05-25 16:40:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-25 08:40:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9815]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%bb%84%e5%90%88"><![CDATA[组合]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791122]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题16</title>
		<link>http://127.0.0.1:8000/blog/2013/05/25/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9816/</link>
		<pubDate>Sat, 25 May 2013 09:04:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=264</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=16" target="_blank">http://projecteuler.net/problem=16</a></div>
<div>
<h2>Power digit sum</h2>
</div>
<div>

2<sup>15</sup> = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

What is the sum of the digits of the number 2<sup>1000</sup>?

幂方的数字和

2<sup>15</sup> = 32768，它的所有数字的和是 3 + 2 + 7 + 6 + 8 = 26.

求数2<sup>1000</sup>所有数字的和

解答：

没想到好的方法，只好暴力了。

&nbsp;

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date><![CDATA[2013-05-25 17:04:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-25 09:04:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9816]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%b9%82"><![CDATA[幂]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791123]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题17</title>
		<link>http://127.0.0.1:8000/blog/2013/05/25/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9817/</link>
		<pubDate>Sat, 25 May 2013 11:58:06 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=17" target="_blank">http://projecteuler.net/problem=17</a></div>
<div>
<h2>Number letter counts</h2>
</div>
<div>

If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
<b>NOTE:</b> Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.

数字字母统计

如果数字1到5写成单词的话是：one,two,three,four,five,那么一共用了3 + 3 + 5 + 4 + 4 = 19个字母

如果将1到1000(one thousand)都写成单词，一共需要用多少个字母

<span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">注意：不需要统计空格和连字符。例如342(three hundred and forty-two)包括23个字母，115(one hundred and fifteen)包括20个字母. 当写数字时使用"and"是遵循英国写法。</span>

解答：

这题没什么好说的，就是数字转化为英文单词。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date><![CDATA[2013-05-25 19:58:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-25 11:58:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9817]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%95%b0%e5%ad%97%e5%86%99%e6%88%90%e5%8d%95%e8%af%8d"><![CDATA[数字写成单词]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791124]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题18</title>
		<link>http://127.0.0.1:8000/blog/2013/05/25/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9818/</link>
		<pubDate>Sat, 25 May 2013 12:54:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[原题链接 http://projecteuler.net/problem=18
Maximum path sum I
By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

<span style="color:red">3</span>
<span style="color:red">7</span> 4
2 <span style="color:red">4</span> 6
8 5 <span style="color:red">9</span> 3

That is, 3 + 7 + 4 + 9 = 23.

Find the maximum total from top to bottom of the triangle below:

75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)

路径的最大和(1)

从下面的三角形顶部开始移动到下面一层相邻的数字，一直到底部，这条路径上的和为23.

也就是，3 + 7 + 4 + 9 = 23. 

在下面的三角形中，找到从顶部到底部的路径的最大值

注意：在这个三角形中一共只有16384条从顶部到底部的路径，所以可以通过尝试每条路径来解决这个问题。但是，在问题67中，也是同样的问题，但是有100层，你不可能使用暴力方法，所以需要更聪明的方法!;0）

解答：
这题可以用动态规划。从下往上更容易一些。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date><![CDATA[2013-05-25 20:54:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-25 12:54:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9818]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92"><![CDATA[动态规划]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791125]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题19</title>
		<link>http://127.0.0.1:8000/blog/2013/05/26/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9819/</link>
		<pubDate>Sun, 26 May 2013 04:17:47 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=277</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=19" target="_blank">http://projecteuler.net/problem=19</a></div>
<div>
<h2>Counting Sundays</h2>
</div>
<div>

You are given the following information, but you may prefer to do some research for yourself.
<ul>
	<li>1 Jan 1900 was a Monday.</li>
	<li>Thirty days has September,
April, June and November.
All the rest have thirty-one,
Saving February alone,
Which has twenty-eight, rain or shine.
And on leap years, twenty-nine.</li>
	<li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>
</ul>
How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?

计算星期天的天数

你将得到如下信息，你也可以自己做些探索。
<ul>
	<li>1900年1月1日是星期一</li>
	<li>一个月有三十天的月份有9月，4月，6月，11月。其它的月份都有31天，除了2月，如果是闰年29天，其它时候28天</li>
</ul>
<ul>
	<li>闰年是正好被4整除的年份，但不是世纪，除非此时它也可以被400整除。</li>
</ul>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">求二十世纪(1901年1月1日到2000年12月21日),一共有多少个星期天是每月的第一天。</span></div>
<div></div>
<div>解答：</div>
<div>这题没什么好说的，就是模拟，另外要知道怎么判断闰年。</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date><![CDATA[2013-05-26 12:17:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-26 04:17:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9819]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%97%a5%e6%9c%9f"><![CDATA[日期]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e9%97%b0%e5%b9%b4"><![CDATA[闰年]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791126]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题20</title>
		<link>http://127.0.0.1:8000/blog/2013/05/26/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9820/</link>
		<pubDate>Sun, 26 May 2013 04:23:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=281</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=20">http://projecteuler.net/problem=20</a></div>
<div>
<h2>Factorial digit sum</h2>
</div>
<div>

<i>n</i>! means <i>n</i> *(<i>n</i> * 1) * ... *3 *2 * 1

For example, 10! = 10 * 9 * ... *3 * 2 * 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

Find the sum of the digits in the number 100!

n!的意思是 n * (n - 1) * ... * 3 * 2 * 1

例如,10! = 10 * 9 * ... * 3 * 2 * 1 = 3628800,

在10！这个数中的数字之和是 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

求100！这个数中的数字之和。

解答：

这题没什么好说的，没找到什么规律。只好算出100！用Python很随意。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date><![CDATA[2013-05-26 12:23:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-26 04:23:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9820]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e9%98%b6%e4%b9%98"><![CDATA[阶乘]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791127]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题21</title>
		<link>http://127.0.0.1:8000/blog/2013/05/26/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9821/</link>
		<pubDate>Sun, 26 May 2013 08:21:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=21" target="_blank">http://projecteuler.net/problem=21</a></div>
<div>
<h2>Amicable numbers</h2>
</div>
<div>

Let d(<i>n</i>) be defined as the sum of proper divisors of <i>n</i> (numbers less than <i>n</i> which divide evenly into <i>n</i>).
If d(<i>a</i>) = <i>b</i> and d(<i>b</i>) = <i>a</i>, where <i>a</i> ！=<i>b</i>, then <i>a</i> and <i>b</i> are an amicable pair and each of <i>a</i> and <i>b</i> are called amicable numbers.

For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

Evaluate the sum of all the amicable numbers under 10000.

亲和数

令d(n)为数n的所有真因子(小于n且可以整除n)的和.如果d(a) = b且d(b) = a,并且a ！= b,那么a和b组成亲和数对，a和b都被称为亲和数。

例如，220的真因子有1,2,4,5,10,11,20,22,44,55和110,则d(220) = 284。284的真因子是1,2,4,71和143，所以d(284) = 220。

找到1000以内所有亲和数的和。

解答：

这题我没想到好的方法，暴力解决，复杂度为 O(n^2),一分钟之内可以得出结果，也就没想再优化了。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date><![CDATA[2013-05-26 16:21:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-26 08:21:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9821]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%ba%b2%e5%92%8c%e6%95%b0"><![CDATA[亲和数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791128]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题22</title>
		<link>http://127.0.0.1:8000/blog/2013/05/26/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9822/</link>
		<pubDate>Sun, 26 May 2013 08:37:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=286</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=22" target="_blank">http://projecteuler.net/problem=22</a></div>
<div>
<h2>Names scores</h2>
</div>
<div>

Using <a href="http://projecteuler.net/project/names.txt">names.txt</a> (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.

For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 * 53 = 49714.

What is the total of all the name scores in the file?

名字得分

使用<a href="http://projecteuler.net/project/names.txt">names.txt</a> (右击然后’链接另存为...‘),一个大小为46K的文本文件，包含有查过5000个姓名，以字典顺序排列。然后计算给每个姓计算字母的值，乘以它在姓名列表的位置,得到一个姓名得分。

例如，当姓名表以字典顺序排列时，COLIN, 字母值为3 + 15 + 12 + 9 + 14 = 53，在姓名表中为第938个，最终，

COLIN的得分为938 * 53 = 49714。

求文件中所有姓名的得分总和。

解答：

这题没什么好说的，将名字排序，默认就是字典序了，然后按照说明算就行了。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date><![CDATA[2013-05-26 16:37:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-05-26 08:37:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9822]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%ad%97%e5%85%b8%e5%ba%8f"><![CDATA[字典序]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791129]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题23</title>
		<link>http://127.0.0.1:8000/blog/2013/06/11/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9823/</link>
		<pubDate>Mon, 10 Jun 2013 16:26:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=302</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=23" target="_blank">http://projecteuler.net/problem=23</a></div>
<div>
<h2>Non-abundant sums</h2>
</div>
<div>

A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

A number <var>n</var> is called deficient if the sum of its proper divisors is less than <var>n</var> and it is called abundant if this sum exceeds <var>n</var>.

As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.

Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.

非盈数之和

如果一个数的所有真因子之和等于数本身，则这个数被称为完美数。例如，28的所有真因子之和为1 + 2 + 4 + 7 + 14 = 28，这也就是说28是一个完美数。

一个数的所有真因子之和如果小于这个数则这个数称为亏数，如果大于这个数，则这个数称为盈数。

12是最小的盈数，因为1 + 2 + 3 + 4 + 6 = 16。能够被写成两个盈数之和的数是24.通过数学分析，可以知道，大于28123的所有整数都可以写成两个盈数之和。然而，通过分析，无法推断出这个上限，即使已经知道不能被表示成两个盈数之和的数中最大的数不会超过这个限制。

求所有不能被表示成两个盈数之和的正整数之和。

这题没什么好说的，直接算就是了。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date><![CDATA[2013-06-11 00:26:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-10 16:26:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9823]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%ba%8f%e6%95%b0"><![CDATA[亏数]]></category>
		<category domain="post_tag" nicename="%e5%ae%8c%e7%be%8e%e6%95%b0"><![CDATA[完美数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%9b%88%e6%95%b0"><![CDATA[盈数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791130]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题24</title>
		<link>http://127.0.0.1:8000/blog/2013/06/15/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9824/</link>
		<pubDate>Sat, 15 Jun 2013 07:05:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=306</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原文链接 <a href="http://projecteuler.net/problem=24" target="_blank">http://projecteuler.net/problem=24</a></div>
<div></div>
<div>
<h2>Lexicographic permutations</h2>
</div>
<div>

A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:

012   021   102   120   201   210

What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?

&nbsp;

字典排列

排列是指将一些东西进行有序排列。例如，3124就是数字1,2,3和4的一种排列。如果将所有排列按照数字序或者字母序列出，我们称之为字典序排列。0,1和2的字典序排列是：

012   021   102   120   201   210

求0,1,2,3,4,5,6,7,8和9的字典序排列中第一百万个排列。

解法：

写一个函数，用非递归方法生成下一个排列，具体方法到算法书找。有了这个函数后，一个循环就可以搞定。

&nbsp;

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date><![CDATA[2013-06-15 15:05:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-15 07:05:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9824]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%85%a8%e6%8e%92%e5%88%97"><![CDATA[全排列]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e9%9d%9e%e9%80%92%e5%bd%92"><![CDATA[非递归]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791131]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题25</title>
		<link>http://127.0.0.1:8000/blog/2013/06/15/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9825/</link>
		<pubDate>Sat, 15 Jun 2013 08:15:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=308</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=25" target="_blank">http://projecteuler.net/problem=25</a></div>
<div>
<h2>1000-digit Fibonacci number</h2>
</div>
<div>

The Fibonacci sequence is defined by the recurrence relation:

F(n) = F(n-1)+ F(n-2), where F<sub>1</sub> = 1 and F<sub>2</sub> = 1.

Hence the first 12 terms will be:

F<sub>1</sub> = 1
F<sub>2</sub> = 1
F<sub>3</sub> = 2
F<sub>4</sub> = 3
F<sub>5</sub> = 5
F<sub>6</sub> = 8
F<sub>7</sub> = 13
F<sub>8</sub> = 21
F<sub>9</sub> = 34
F<sub>10</sub> = 55
F<sub>11</sub> = 89
F<sub>12</sub> = 144

<em id="__mceDel" style="font-size: 13px; line-height: 19px;">The 12th term, F<sub>12</sub>, is the first term to contain three digits.</em>

What is the first term in the Fibonacci sequence to contain 1000 digits?

1000个数字的斐波纳契数

斐波那契数列由如下递归关系定义：

F(n) = F(n-1)+ F(n-2), 且 F<sub>1</sub> = 1 ，F<sub>2</sub> = 1

因此数列的前12项为：

F<sub>1</sub> = 1
F<sub>2</sub> = 1
F<sub>3</sub> = 2
F<sub>4</sub> = 3
F<sub>5</sub> = 5
F<sub>6</sub> = 8
F<sub>7</sub> = 13
F<sub>8</sub> = 21
F<sub>9</sub> = 34
F<sub>10</sub> = 55
F<sub>11</sub> = 89
F<sub>12</sub> = 144

第12项，即是第一个包含三个数字的项

求数列中第一个包含1000个数字的项

解法：

用第二题中的方法，生成斐波那契数列，之后判断。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date><![CDATA[2013-06-15 16:15:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-15 08:15:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9825]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%96%90%e6%b3%a2%e9%82%a3%e5%a5%91%e6%95%b0%e5%88%97"><![CDATA[斐波那契数列]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791132]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题26</title>
		<link>http://127.0.0.1:8000/blog/2013/06/15/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9826/</link>
		<pubDate>Sat, 15 Jun 2013 15:37:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=322</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=26" target="_blank">http://projecteuler.net/problem=26</a></div>
<div>
<h2>Reciprocal cycles</h2>
</div>
<div>

A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:

<sup>1</sup>/<sub>2</sub>= 0.5

<sup>1</sup>/<sub>3</sub>= 0.(3)

<sup>1</sup>/<sub>4</sub>= 0.25

<sup>1</sup>/<sub>5</sub>= 0.2

<sup>1</sup>/<sub>6</sub>= 0.1(6)

<sup>1</sup>/<sub>7</sub>= 0.(142857)

<sup>1</sup>/<sub>8</sub>= 0.125

<sup>1</sup>/<sub>9</sub>= 0.(1)

<sup>1</sup>/<sub>10</sub>= 0.1

Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that <sup>1</sup>/<sub>7</sub> has a 6-digit recurring cycle.

Find the value of <i>d</i> <img alt="&lt;" src="file:///C:/Documents%20and%20Settings/Administrator/Local%20Settings/Application%20Data/youdao/ynote/images/A3CBA8A8420C404E87F8E517902F6949/symbol_lt.gif" width="10" height="10" border="0" data-media-type="image" data-inited="true" /> 1000 for which <sup>1</sup>/<sub><i>d</i></sub> contains the longest recurring cycle in its decimal fraction part.

倒数循环

单分数指的是分子为1的分数。分母为2到10的单分数的小数表示为：

<sup>1</sup>/<sub>2</sub>= 0.5

<sup>1</sup>/<sub>3</sub>= 0.(3)

<sup>1</sup>/<sub>4</sub>= 0.25

<sup>1</sup>/<sub>5</sub>= 0.2

<sup>1</sup>/<sub>6</sub>= 0.1(6)

<sup>1</sup>/<sub>7</sub>= 0.(142857)

<sup>1</sup>/<sub>8</sub>= 0.125

<sup>1</sup>/<sub>9</sub>= 0.(1)

<sup>1</sup>/<sub>10</sub>= 0.1

其中0.1（6）表示0.166666...,也就是有一个循环数字.可以看到1/7有6个循环数字.

求d &lt; 1000中 1/d包含最多循环数字的那个d.

解法：

这题还没想好。

更新于2013年8月15日：问题解决了，现在才知道，如果尝试自己去实现表示无穷小数，就会发现规律。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date><![CDATA[2013-06-15 23:37:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-15 15:37:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9826]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8d%95%e5%88%86%e6%95%b0"><![CDATA[单分数]]></category>
		<category domain="post_tag" nicename="%e5%be%aa%e7%8e%af%e5%b0%8f%e6%95%b0"><![CDATA[循环小数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791133]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题27</title>
		<link>http://127.0.0.1:8000/blog/2013/06/15/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9827/</link>
		<pubDate>Sat, 15 Jun 2013 15:37:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=27" target="_blank">http://projecteuler.net/problem=27</a></div>
<div>
<h2>Quadratic primes</h2>
</div>
<div>

Euler discovered the remarkable quadratic formula:

<i>n</i>² + <i>n</i> + 41

It turns out that the formula will produce 40 primes for the consecutive values <i>n</i> = 0 to 39. However, when <i>n</i> = 40, 40<sup>2</sup> + 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when <i>n</i> = 41, 41² + 41 + 41 is clearly divisible by 41.

The incredible formula  <i>n</i>² -79<i>n</i> + 1601 was discovered, which produces 80 primes for the consecutive values <i>n</i> = 0 to 79. The product of the coefficients, -79 and 1601, is -126479.

Considering quadratics of the form:

<i>n</i>² + <i>an</i> + <i>b</i>, where |<i>a</i>| &lt;1000 and |<i>b</i>| &lt;1000
<div>where |<i>n</i>| is the modulus/absolute value of <i>n</i></div>
<div><em id="__mceDel"> e.g. |11| = 11 and |-4| = 4</em></div>
Find the product of the coefficients, <i>a</i> and <i>b</i>, for the quadratic expression that produces the maximum number of primes for consecutive values of <i>n</i>, starting with <i>n</i> = 0.

二项式素数

欧拉发现著名的二项式公式：

<i>n</i>² + <i>n</i> + 41

当n从0到39时，这个公式可以产生40个连续的素数。然而，当n = 40时, 40<sup>2</sup> + 40 + 41 = 40(40 + 1) + 41可以被41整除,毫无疑问的,当n = 41时，41² + 41 + 41可以被41整除

另一个惊人的公式<i>n</i>² <img alt="−" src="file:///C:/Documents%20and%20Settings/Administrator/Local%20Settings/Application%20Data/youdao/ynote/images/32FB5CDF0BD546C0BE622982593696C7/symbol_minus.gif" width="9" height="3" border="0" data-media-type="image" data-inited="true" /> 79<i>n</i> + 1601 被发现，这个公式当n = 0到79时可以产生80个连续的素数。两个系数-79和1601的乘积为-126479.

考虑如下的二项式形式

<i>n</i>² + <i>an</i> + <i>b</i>, 且|<i>a</i>| &lt;1000 ， |<i>b</i>| &lt;1000

这里 |<i>n</i>| 是 <i>n的绝对值</i>
e.g. |11| = 11 and |-4| = 4

求对于这个二项式表达式，从n = 0开始，连续产生最多素数的系数a和b的乘积。

解法：

这题没什么好说的，先用筛法生成一个素数判断表，之后就是遍历了。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date><![CDATA[2013-06-15 23:37:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-15 15:37:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9827]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%ba%8c%e9%a1%b9%e5%bc%8f%e5%85%ac%e5%bc%8f"><![CDATA[二项式公式]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791134]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题28</title>
		<link>http://127.0.0.1:8000/blog/2013/06/15/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9828/</link>
		<pubDate>Sat, 15 Jun 2013 15:38:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=345</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=28">http://projecteuler.net/problem=28</a></div>
<div>
<h2>Number spiral diagonals</h2>
</div>
<div>

Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:

<b>21</b> 22 23 24 <b>25</b>
20  <b>7</b>  8  <b>9</b> 10
19  6  <b>1</b>  2 11
18  <b>5</b>  4  <b>3</b> 12
<b>17</b> 16 15 14 <b>13</b>

It can be verified that the sum of the numbers on the diagonals is 101.

What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?

数字螺旋的对角线

从1开始向右顺时针方向螺旋得到一个5 * 5的螺旋数如下：

<b>21</b> 22 23 24 <b>25</b>
20  <b>7</b>  8  <b>9</b> 10
19  6  <b>1</b>  2 11
18  <b>5</b>  4  <b>3</b> 12
<b>17</b> 16 15 14 <b>13</b>

可以验证对角线上的数之和为101

求以相同形式构成的1001 * 1001的螺旋数的对角线之和。

解答：

这题没什么好说的，就是找规律。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date><![CDATA[2013-06-15 23:38:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-15 15:38:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9828]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e8%9e%ba%e6%97%8b"><![CDATA[螺旋]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791135]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题29</title>
		<link>http://127.0.0.1:8000/blog/2013/06/15/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9829/</link>
		<pubDate>Sat, 15 Jun 2013 15:38:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=350</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=29" target="_blank">http://projecteuler.net/problem=29</a></div>
<div></div>
<div>
<h2>Distinct powers</h2>
</div>
<div>

Consider all integer combinations of <i>a</i><sup><i>b</i></sup> for 2 &lt;= <i>a</i>  &lt;= 5 and 2 &lt;= <i>b</i>  &lt;= 5:

2<sup>2</sup>=4, 2<sup>3</sup>=8, 2<sup>4</sup>=16, 2<sup>5</sup>=32
3<sup>2</sup>=9, 3<sup>3</sup>=27, 3<sup>4</sup>=81, 3<sup>5</sup>=243
4<sup>2</sup>=16, 4<sup>3</sup>=64, 4<sup>4</sup>=256, 4<sup>5</sup>=1024
5<sup>2</sup>=25, 5<sup>3</sup>=125, 5<sup>4</sup>=625, 5<sup>5</sup>=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by <i>a</i><sup><i>b</i></sup> for 2  &lt;= <i>a</i> &lt;= 100 and 2 &lt;= <i>b</i>  &lt;= 100?

唯一的幂方

考虑<i>a</i><sup><i>b</i></sup>形式的所有整数，其中2 &lt;= a &lt;= 5,2 &lt;= b &lt;= 5:

2<sup>2</sup>=4, 2<sup>3</sup>=8, 2<sup>4</sup>=16, 2<sup>5</sup>=32
3<sup>2</sup>=9, 3<sup>3</sup>=27, 3<sup>4</sup>=81, 3<sup>5</sup>=243
4<sup>2</sup>=16, 4<sup>3</sup>=64, 4<sup>4</sup>=256, 4<sup>5</sup>=1024
5<sup>2</sup>=25, 5<sup>3</sup>=125, 5<sup>4</sup>=625, 5<sup>5</sup>=3125

如果将它们按大小排序，去除重复数字，我们可以得到如下15个唯一的数：

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

求在<i>a</i><sup><i>b</i></sup> 其中 2 &lt;= <i>a</i> &lt;= 100 ，2  &lt;= <i>b</i>  &lt;= 100中，唯一的数有多少个？

解法：

这里用一个set来存。数学方法还没想到。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date><![CDATA[2013-06-15 23:38:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-15 15:38:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9829]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%b9%82%e6%96%b9"><![CDATA[幂方]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791136]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题30</title>
		<link>http://127.0.0.1:8000/blog/2013/06/15/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9830/</link>
		<pubDate>Sat, 15 Jun 2013 15:39:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=358</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=30" target="_blank">http://projecteuler.net/problem=30</a></div>
<div>
<h2>Digit fifth powers</h2>
</div>
<div>

Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:

1634 = 1<sup>4</sup> + 6<sup>4</sup> + 3<sup>4</sup> + 4<sup>4</sup>
8208 = 8<sup>4</sup> + 2<sup>4</sup> + 0<sup>4</sup> + 8<sup>4</sup>
9474 = 9<sup>4</sup> + 4<sup>4</sup> + 7<sup>4</sup> + 4<sup>4</sup>

As 1 = 1<sup>4</sup> is not a sum it is not included.

The sum of these numbers is 1634 + 8208 + 9474 = 19316.

Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.

数字的5次幂

令人惊奇的是只存在3个数可以写成数的每位数字的4次幂的和

1634 = 1<sup>4</sup> + 6<sup>4</sup> + 3<sup>4</sup> + 4<sup>4</sup>
8208 = 8<sup>4</sup> + 2<sup>4</sup> + 0<sup>4</sup> + 8<sup>4</sup>
9474 = 9<sup>4</sup> + 4<sup>4</sup> + 7<sup>4</sup> + 4<sup>4</sup>

这里1 = 1<sup>4</sup> 不是和所以没有包括进来

这些数字的和为1634 + 8208 + 9474 = 19316.

<span style="font-size: medium;">求所有满足数的每位数字的5次幂等于数本身这个条件的数的和</span>

解法：

没什么好说的。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date><![CDATA[2013-06-15 23:39:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-15 15:39:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9830]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%b9%82"><![CDATA[幂]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791137]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题31</title>
		<link>http://127.0.0.1:8000/blog/2013/06/16/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9831/</link>
		<pubDate>Sun, 16 Jun 2013 01:10:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=369</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=31" target="_blank">http://projecteuler.net/problem=31</a></div>
<div>
<h2>Coin sums</h2>
</div>
<div>

In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:

1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).

It is possible to make £2 in the following way:

1*£1 + 1*50p + 2*20p + 1*5p + 1*2p + 3*1p

How many different ways can £2 be made using any number of coins?

硬币的和

在英国，货币单位有磅(£),便士(p),一共有八种硬币发行：

1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).

对于£2可以有以下组成形式：

1*£1 + 1*50p + 2*20p + 1*5p + 1*2p + 3*1p

求£2的组成方式一共有多少种？

解法：

这是一个多重背包问题。两个循环解决问题，注意循环的顺序。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date><![CDATA[2013-06-16 09:10:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-16 01:10:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9831]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92"><![CDATA[动态规划]]></category>
		<category domain="post_tag" nicename="%e5%a4%9a%e9%87%8d%e8%83%8c%e5%8c%85"><![CDATA[多重背包]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791138]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题32</title>
		<link>http://127.0.0.1:8000/blog/2013/06/16/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9832/</link>
		<pubDate>Sun, 16 Jun 2013 01:30:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=375</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=32" target="_blank">http://projecteuler.net/problem=32</a></div>
<div>
<h2>Pandigital products</h2>
</div>
<div>

We shall say that an <var>n</var>-digit number is pandigital if it makes use of all the digits 1 to <var>n</var> exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.

The product 7254 is unusual, as the identity, 39  * 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.

Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.
<div>HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.</div>
</div>
<div></div>
<div>全位数乘积</div>
<span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">如果一个n位数恰好使用1到n各一次，我们称这个数为全位数；例如，5位数，15234，是一个1到5的全位数。</span>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;"> </span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">乘积7254不寻常，对于恒等式 39 * 186 = 7254，包括被乘数，乘数，乘积，正好是一个1到9的全位数</span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;"> </span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">求所有满足被乘数，乘数，乘积这个恒等式是从1到9的全位数这个条件的乘积的和。</span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">提示：有些乘积可以有不只一种形式，要确保只计算一次。</span></div>
<div>解法：</div>
<div>这题没什么好说的。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>375</wp:post_id>
		<wp:post_date><![CDATA[2013-06-16 09:30:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-16 01:30:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9832]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%85%a8%e4%bd%8d%e6%95%b0"><![CDATA[全位数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791139]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题33</title>
		<link>http://127.0.0.1:8000/blog/2013/06/16/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9833/</link>
		<pubDate>Sun, 16 Jun 2013 01:59:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=381</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=33" target="_blank">http://projecteuler.net/problem=33</a></div>
<div>
<h2>Digit canceling fractions</h2>
</div>
<div>

The fraction <sup>49</sup>/<sub>98</sub> is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that<sup>49</sup>/<sub>98</sub> = <sup>4</sup>/<sub>8</sub>, which is correct, is obtained by cancelling the 9s.

We shall consider fractions like, <sup>30</sup>/<sub>50</sub> = <sup>3</sup>/<sub>5</sub>, to be trivial examples.

There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.

If the product of these four fractions is given in its lowest common terms, find the value of the denominator.

数字约分

分数49/98是一个特殊的分数，对于一个不熟练的数学爱好者在尝试化简它时，可能会错误地消去9，认为49/98 = 4 / 8,最终的到的结果是正确的。

对于分数30/50 = 3/5,我们认为这是平凡的例子

正好存在4个这种不平凡的分数，它们的值小于1，分子和分母都是两位数。

如果将这四个分数的乘积化简为最简形式，得到的分母是什么？

解答：

这题没什么好说的。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>381</wp:post_id>
		<wp:post_date><![CDATA[2013-06-16 09:59:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-16 01:59:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9833]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%88%86%e6%95%b0%e5%8c%96%e7%ae%80"><![CDATA[分数化简]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791140]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题34</title>
		<link>http://127.0.0.1:8000/blog/2013/06/16/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9834/</link>
		<pubDate>Sun, 16 Jun 2013 03:15:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=386</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=34" target="_blank">http://projecteuler.net/problem=34</a></div>
<div>
<h2>Digit factorials</h2>
</div>
<div>

145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.

Find the sum of all numbers which are equal to the sum of the factorial of their digits.

Note: as 1! = 1 and 2! = 2 are not sums they are not included.

数字的阶乘

145是一个特殊的数字，因为1! + 4! + 5! = 1 + 24 + 120 = 145.

<span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">求所有满足数的每位数的阶乘之和等于数本身这个条件的数的和</span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">注意：因为1！= 1 和 2！= 2不是和，所以没有被包括进来。</span></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>386</wp:post_id>
		<wp:post_date><![CDATA[2013-06-16 11:15:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-16 03:15:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9834]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e9%98%b6%e4%b9%98"><![CDATA[阶乘]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791141]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题35</title>
		<link>http://127.0.0.1:8000/blog/2013/06/16/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9835/</link>
		<pubDate>Sun, 16 Jun 2013 03:17:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=390</guid>
		<description></description>
		<content:encoded><![CDATA[原题链接 <a href="http://projecteuler.net/problem=35">http://projecteuler.net/problem=35</a>
Circular primes
The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.

There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.

How many circular primes are there below one million?

循环素数

对于数字，197，我们称它为循环素数，这是因为旋转数的数字得到的所有数：197，971和719都是素数

100一下一共有13个这种素数：2,3,5,7,11,13,17,31,37,71,73,79和97.

求1000000一下，一共有多少个循环素数？

解答：
关键还是生成一个素数判断表，用筛法。其它没什么好说的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date><![CDATA[2013-06-16 11:17:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-16 03:17:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9835]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%ad%9b%e6%b3%95"><![CDATA[筛法]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791142]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题36</title>
		<link>http://127.0.0.1:8000/blog/2013/06/16/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9836/</link>
		<pubDate>Sun, 16 Jun 2013 03:37:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=395</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=36" target="_blank">http://projecteuler.net/problem=36</a></div>
<div>
<h2>Double-base palindromes</h2>
</div>
<div>

The decimal number, 585 = 1001001001 (binary), is palindromic in both bases.

Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.

(Please note that the palindromic number, in either base, may not include leading zeros.)

双进制回文数

对于10进制数，585 = 1001001001(二进制),在两种进制下都是回文数。

求小于1 000 000的数，求所有满足10进制和二进制都是回文数的数的和

(注意，对于所有的回文数，在任何进制中，都不包括开头中的0)

解答：

这题没什么好说的，无非就是进制的转换以及判断回文数。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>395</wp:post_id>
		<wp:post_date><![CDATA[2013-06-16 11:37:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-16 03:37:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9836]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%9b%9e%e6%96%87%e6%95%b0"><![CDATA[回文数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e8%bf%9b%e5%88%b6"><![CDATA[进制]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791143]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题37</title>
		<link>http://127.0.0.1:8000/blog/2013/06/16/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9837/</link>
		<pubDate>Sun, 16 Jun 2013 04:40:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=404</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=37">http://projecteuler.net/problem=37</a></div>
<div>
<h2>Truncatable primes</h2>
</div>
<div>

The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.

Find the sum of the only eleven primes that are both truncatable from left to right and right to left.

NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.

可截断的素数

数3797有一个有趣的特性。它本身是素数，而且从左到右删除数字依然是素数：3797,797,97和7.类似的，从右到左也是这样：3797,379,37，和3.

求唯一的11个从左到右，从右到左都可截断的素数的和

注意：2,3,5，和7不认为是可截断的素数

解答：

这题没什么好说的。依然是筛法生成素数表，只是不知道素数到底会大到什么程度，所以写的有些丑陋。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date><![CDATA[2013-06-16 12:40:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-16 04:40:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9837]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%ad%9b%e6%b3%95"><![CDATA[筛法]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791144]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题38</title>
		<link>http://127.0.0.1:8000/blog/2013/06/16/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9838/</link>
		<pubDate>Sun, 16 Jun 2013 04:59:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=409</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=38" target="_blank">http://projecteuler.net/problem=38</a></div>
<div>
<h2>Pandigital multiples</h2>
</div>
<div>

Take the number 192 and multiply it by each of 1, 2, and 3:

192 * 1 = 192

192 * 2 = 384

192 * 3 = 576

By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)

The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1,2,3,4,5).

What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1,2, ... , <var>n</var>) where <var>n</var> &gt;1?

全位数乘数

取数字192，将它乘以分别乘以1,2和3：

192 * 1 = 192

192 * 2 = 384

192 * 3 = 576

将这些乘积连接起来，我们将得到一个从1到9的全位数，192384576.我们称192384576为192和(1,2,3)的乘积连接

类似的，我们可以从9开始，将它乘以1,2,3,4和5，得到一个全位数，918273645，即为9和(1,2,3,4,5)的乘积连接。

求由一个整数和(1,2,...,n, n &gt; 1)的乘积连接中得到的1到9的全位数中，最大的那个。

解法：

这题没什么好说的。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date><![CDATA[2013-06-16 12:59:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-16 04:59:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9838]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%85%a8%e4%bd%8d%e6%95%b0"><![CDATA[全位数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791145]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题39</title>
		<link>http://127.0.0.1:8000/blog/2013/06/16/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9839/</link>
		<pubDate>Sun, 16 Jun 2013 05:20:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=414</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=39" target="_blank">http://projecteuler.net/problem=39</a></div>
<div>
<h2>Integer right triangles</h2>
</div>
<div>

If <i>p</i> is the perimeter of a right angle triangle with integral length sides, {<i>a</i>,<i>b</i>,<i>c</i>}, there are exactly three solutions for <i>p</i> = 120.

{20,48,52}, {24,45,51}, {30,40,50}

For which value of <i>p</i> &lt;= 1000, is the number of solutions maximised?

直角三角形的个数

如果p是直角三角形的周长，它的三个边为{a,b,c},对于p = 120,正好有三个直角三角形

{20,48,52},{24,45,51},{30,40,50}

对于p &lt;= 1000,求存在三角形个数最多的数

解答：

这题没什么好说的。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>414</wp:post_id>
		<wp:post_date><![CDATA[2013-06-16 13:20:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-06-16 05:20:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9839]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%9b%b4%e8%a7%92%e4%b8%89%e8%a7%92%e5%bd%a2"><![CDATA[直角三角形]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791146]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题40</title>
		<link>http://127.0.0.1:8000/blog/2013/07/18/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9840/</link>
		<pubDate>Thu, 18 Jul 2013 13:11:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=421</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=40" data-ke-src="http://projecteuler.net/problem=40">http://projecteuler.net/problem=40</a></div>
<div>

An irrational decimal fraction is created by concatenating the positive integers:

0.123456789101112131415161718192021...

It can be seen that the 12<sup>th</sup> digit of the fractional part is 1.

If d(n)represents the <i>n</i><sup>th</sup> digit of the fractional part, find the value of the following expression.

d(1) * d(10) * d(100) * d(1000) * d(10000) * d(100000) * d(1000000)
<div></div>
<div>
<div>Champernowne数</div>
<div>将正整数连接起来可以得到一个无规则的十进制小数</div>
<div>0.123456789101112131415161718192021...</div>
<div>可以看到小数点后的第12位是1</div>
<div>如果记d(n) 代表小数点后的第 <i>n</i>位，求下面表达式的值</div>
<div>d(1) * d(10) * d(100) * d(1000) * d(10000) * d(100000) * d(1000000)</div>
<div></div>
<div>解答：</div>
<div>不知道数学解法，只好暴力了。</div>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date><![CDATA[2013-07-18 21:11:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-18 13:11:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9840]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="champernowne%e6%95%b0"><![CDATA[Champernowne数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791147]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题41</title>
		<link>http://127.0.0.1:8000/blog/2013/07/21/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9841/</link>
		<pubDate>Sun, 21 Jul 2013 13:05:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=444</guid>
		<description></description>
		<content:encoded><![CDATA[原题链接<a href="http://projecteuler.net/problem=41">http://projecteuler.net/problem=41</a>
Pandigital prime
We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.
What is the largest n-digit pandigital prime that exists?

全位素数
我们称一个数是n位的全位数当这个数包含1到n正好一次，例如2143是一个四位的全位数，同时它也是一个素数。
求最大的n位全位素数

解法：
还是暴力，从最大的9位素数开始往更小的素数找。方法太笨了，所以速度很慢。的确是太慢了，所以一定有更好的解决方法。经过观察，是不存在8位和9位的全位数是素数的情况，至于为什么，自己观察。
​]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date><![CDATA[2013-07-21 21:05:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-21 13:05:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9841]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%85%a8%e4%bd%8d%e6%95%b0"><![CDATA[全位数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791148]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题42</title>
		<link>http://127.0.0.1:8000/blog/2013/07/21/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9842/</link>
		<pubDate>Sun, 21 Jul 2013 13:06:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=448</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=42" data-ke-src="http://projecteuler.net/problem=42">http://projecteuler.net/problem=42</a></div>
<div>
<h2>Coded triangle numbers</h2>
The <i>n</i><sup>th</sup> term of the sequence of triangle numbers is given by, t(n)= ½<i>n</i>(<i>n</i>+1); so the first ten triangle numbers are:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

By converting each letter in a word to a number corresponding to its alphabetical position and adding these values we form a word value. For example, the word value for SKY is 19 + 11 + 25 = 55 = <i>t</i><sub>10</sub>. If the word value is a triangle number then we shall call the word a triangle word.

Using <a href="http://projecteuler.net/project/words.txt" data-ke-src="http://projecteuler.net/project/words.txt">words.txt</a> (right click and 'Save Link/Target As...'), a 16K text file containing nearly two-thousand common English words, how many are triangle words?
<div></div>
<div>三角数编码</div>
<div></div>
<div>第n个三角数可以由t(n) = n * (n + 1) / 2给出，所以前面十个三角数是</div>
<div>1，3，6，10，15，21，28，36，45，55，...</div>
<div>将单词中的每个字母与一个数字相对应，这个数字是字母在字母表中的顺序相对应，将这些数字相加就的到字母的值。例如，单词SKY的值是19 + 11 + 25 <span style="font-family: 'Trebuchet MS', sans-serif;">= 55 = t(10) 如果单词的值是三角数，那么我们就称这个单词为三角单词。</span></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif;">使用<a href="http://projecteuler.net/project/words.txt" data-ke-src="http://projecteuler.net/project/words.txt">words.txt</a> (鼠标右击，然后‘保存链接/目标另存为...')​,在这个16K的文本文件中包含将近2000个常用的英文单词。</span></div>
<div></div>
<div><span style="font-family: 'Trebuchet MS', sans-serif;">求一共有多少个三角单词。</span></div>
<div></div>
<div>解答：</div>
<div>这题没有什么好说的，唯一要注意的一点是要去除单词两边的双引号。</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date><![CDATA[2013-07-21 21:06:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-21 13:06:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9842]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%b8%89%e8%a7%92%e6%95%b0"><![CDATA[三角数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791149]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题43</title>
		<link>http://127.0.0.1:8000/blog/2013/07/25/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9843/</link>
		<pubDate>Thu, 25 Jul 2013 14:56:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=458</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=43" target="_blank" data-ke-src="http://projecteuler.net/problem=43">http://projecteuler.net/problem=43</a></div>
<div>
<h2>Sub-string divisibility</h2>
The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.

Let d(1)be the 1<sup>st</sup> digit, d(2) be the 2<sup>nd</sup> digit, and so on. In this way, we note the following:

d(2)d(3)d(4)=406 is divisible by 2

d(3)d(4)d(5)=063 is divisible by 3

d(4)d(5)d(6)=635  is divisible by 5

d(5)d(6)d(7)=357  is divisible by 7

d(6)d(7)d(8)=572  is divisible by 11

d(7)d(8)d(9)=728 is divisible by 13

d(8)d(9)d(10)=289  is divisible by 17

Find the sum of all 0 to 9 pandigital numbers with this property.
<div>子串可除性</div>
<div>数1406357289是一个0到9的全位数，因为它由0到9组成，每个数字出现一次，它有一个有趣的字串可除性特性</div>
<div>令d(1)为第一个数字，d(2) 为第二个数字，以此类推。这种方式，我们注意如下：</div>
<div>d(2)d(3)d(4)=406可以被2整除</div>
<div>d(3)d(4)d(5)=063可以被3整除</div>
<div>d(4)d(5)d(6)=635可以被5整除</div>
<div>d(5)d(6)d(7)=357可以被7整除</div>
<div>d(6)d(7)d(8)=572可以被11整除</div>
<div>d(7)d(8)d(9)=728可以被13整除</div>
<div>d(8)d(9)d(10)=289可以被17整除</div>
<div>求所有具有这种性质的0到9的全位数的和</div>
<div></div>
<div>解答：</div>
<div>注意观察，观察，再观察，完全可以动手算出这题。而我不会写搜索的，只好写了一个非常丑陋的多重循环。</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>458</wp:post_id>
		<wp:post_date><![CDATA[2013-07-25 22:56:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-25 14:56:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9843]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%8e%a8%e7%90%86"><![CDATA[推理]]></category>
		<category domain="post_tag" nicename="%e6%9e%9a%e4%b8%be"><![CDATA[枚举]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791150]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题44</title>
		<link>http://127.0.0.1:8000/blog/2013/07/26/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9844/</link>
		<pubDate>Thu, 25 Jul 2013 16:12:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=465</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=44" target="_blank" data-ke-src="http://projecteuler.net/problem=44">http://projecteuler.net/problem=44</a></div>
<div>
<h2>Pentagon numbers</h2>
Pentagonal numbers are generated by the formula, P(n)=<var>n</var>(3<var>n</var><img alt="−" src="http://projecteuler.net/images/symbol_minus.gif" width="9" height="3" border="0" data-ke-src="http://projecteuler.net/images/symbol_minus.gif" />1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P(4) + P(7) = 22 + 70 = 92 = P(8). However, their difference, 70 <img alt="−" src="http://projecteuler.net/images/symbol_minus.gif" width="9" height="3" border="0" data-ke-src="http://projecteuler.net/images/symbol_minus.gif" /> 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, P(j)and P(k), for which their sum and difference are pentagonal and D = |P(k) <img alt="−" src="http://projecteuler.net/images/symbol_minus.gif" width="9" height="3" border="0" data-ke-src="http://projecteuler.net/images/symbol_minus.gif" /> P(j)| is minimised; what is the value of D?
<div></div>
<div>五边形数</div>
<div>五边形数可以由公式P(n) = n(3n-1)/2得到。前十个五边形数是</div>
</div>
<div>1，5，12，22，35，51，70，92，117，145，。。。</div>
<div>可以看到P(4) + P(7) = 22 + 70 = 92 = P(8).然而它们之间的差,70 - 22 = 48不是五边形数</div>
<div>找到五边形数对，P(j)和P(k),使得它们的和与差都是五边形数，并且D=|P(k) - P(j)|最小，那么D的值是多少？</div>
<div></div>
<div>解答：</div>
<div>用蛮力解决了，正在思考数学方法。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date><![CDATA[2013-07-26 00:12:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-25 16:12:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9844]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%ba%94%e8%be%b9%e5%bd%a2%e6%95%b0"><![CDATA[五边形数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791151]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题45</title>
		<link>http://127.0.0.1:8000/blog/2013/07/26/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9845/</link>
		<pubDate>Fri, 26 Jul 2013 12:33:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=470</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=45" data-ke-src="http://projecteuler.net/problem=45" target="_blank">http://projecteuler.net/problem=45</a></div>
<div>
<h2>Triangular, pentagonal, and hexagonal</h2>
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
<table>
<tbody>
<tr>
<td>Triangle</td>
<td></td>
<td>T(n)=<i>n</i>(<i>n</i>+1)/2</td>
<td></td>
<td>1, 3, 6, 10, 15, ...</td>
</tr>
<tr>
<td>Pentagonal</td>
<td></td>
<td>P(n)=<i>n</i>(3<i>n-</i>1)/2</td>
<td></td>
<td>1, 5, 12, 22, 35, ...</td>
</tr>
<tr>
<td>Hexagonal</td>
<td></td>
<td>H(n)=<i>n</i>(2<i>n-</i>1)</td>
<td></td>
<td>1, 6, 15, 28, 45, ...</td>
</tr>
</tbody>
</table>
It can be verified that T(285) = P(165) = H(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
<div></div>
</div>
<div>三角形的，五边形的和六边形的</div>
<div>三角形的、五边形的和六边形的数可以由以下公式生成：</div>
<div>三角形的 T(n)=n(n+1)/2 1,3,6,10,15,...</div>
<div>五边形的 P(n)=n(3n-1)/2 1,5,12,22,35,...</div>
<div>六边形的 H(n)=n(2n-1) 1,6,15,28,45,...</div>
<div>可以验证T(285)=P(165)=H(143)=40755.</div>
<div>求下一个既是五边形数，又是六边形数的三角形数。</div>
<div></div>
<div>解法：</div>
<div>没想到什么好的方法，只好暴力了。</div>
<div>​</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>470</wp:post_id>
		<wp:post_date><![CDATA[2013-07-26 20:33:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-26 12:33:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9845]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%b8%89%e8%a7%92%e5%bd%a2%e7%9a%84"><![CDATA[三角形的]]></category>
		<category domain="post_tag" nicename="%e4%ba%94%e8%be%b9%e5%bd%a2%e7%9a%84"><![CDATA[五边形的]]></category>
		<category domain="post_tag" nicename="%e5%85%ad%e8%be%b9%e5%bd%a2%e7%9a%84"><![CDATA[六边形的]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791152]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题46</title>
		<link>http://127.0.0.1:8000/blog/2013/07/26/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9846/</link>
		<pubDate>Fri, 26 Jul 2013 13:28:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=481</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=46" target="_blank" data-ke-src="http://projecteuler.net/problem=46">http://projecteuler.net/problem=46</a></div>
<div>
<h2>Goldbach's other conjecture</h2>
It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.

9 = 7 + 2*1<sup>2</sup>
15 = 7 + 2*2<sup>2</sup>
21 = 3 + 2*3<sup>2</sup>
25 = 7 + 2*3<sup>2</sup>
27 = 19 + 2*2<sup>2</sup>
33 = 31 + 2*1<sup>2</sup>

It turns out that the conjecture was false.

What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?
<div></div>
</div>
<div>哥德巴赫的另一个猜想</div>
<div>这个猜想是克里斯蒂安.哥德巴赫提出的，它是这样的：任意一个合数，如果是奇数的话，则可以写成一个素数与一个平方数的两倍的和</div>
<div>9 = 7 + 2*1<sup>2</sup>
15 = 7 + 2*2<sup>2</sup>
21 = 3 + 2*3<sup>2</sup>
25 = 7 + 2*3<sup>2</sup>
27 = 19 + 2*2<sup>2</sup></div>
<div>33 = 31 + 2*1<sup>2</sup>
<div><span style="font-family: 'Trebuchet MS', sans-serif;">结果这个猜想是错的。</span></div>
<div>求最小的不能写成一个素数与一个平方数的两倍的和的奇合数​</div>
<div></div>
<div>解答：</div>
<div>还是暴力吧。</div>
<div></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>481</wp:post_id>
		<wp:post_date><![CDATA[2013-07-26 21:28:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-26 13:28:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9846]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%93%a5%e5%be%b7%e5%b7%b4%e8%b5%ab%e7%9a%84%e5%8f%a6%e4%b8%80%e4%b8%aa%e7%8c%9c%e6%83%b3"><![CDATA[哥德巴赫的另一个猜想]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791153]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题47</title>
		<link>http://127.0.0.1:8000/blog/2013/07/27/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9847/</link>
		<pubDate>Sat, 27 Jul 2013 02:48:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=491</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=47" data-ke-src="http://projecteuler.net/problem=47" target="_blank">http://projecteuler.net/problem=47</a></div>
<div>
<h2>Distinct primes factors</h2>
The first two consecutive numbers to have two distinct prime factors are:

14 = 2 * 7
15 = 3 * 5

The first three consecutive numbers to have three distinct prime factors are:
644 = 2² * 7 * 23
645 = 3 * 5 * 43
646 = 2 * 17 * 19.
Find the first four consecutive integers to have four distinct prime factors. What is the first of these numbers?
<div></div>
<div>不同的素数因子</div>
<div>第一个连续两个数具有两个不同的素数因子的是：</div>
<div>14 = 2 * 7
15 = 3 * 5</div>
<div></div>
<div>第一个连续三个数具有三个不同的素数因子的是：</div>
<div>644 = 2² * 7 * 23
645 = 3 * 5 * 43
<div>646 = 2 * 17 * 19.</div>
</div>
</div>
<div>请找到第一个连续四个数具有四个不同的素数因子。这些数中的第一个是什么？</div>
<div></div>
<div>解答：</div>
<div>无非就是求素数因子，使用第3题中的方法，得到素数因子，剩下的就是暴力了。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>491</wp:post_id>
		<wp:post_date><![CDATA[2013-07-27 10:48:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-27 02:48:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9847]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0%e5%9b%a0%e5%ad%90"><![CDATA[素数因子]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791154]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[problem-47]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题48</title>
		<link>http://127.0.0.1:8000/blog/2013/07/27/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9848/</link>
		<pubDate>Sat, 27 Jul 2013 03:00:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=501</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=48" data-ke-src="http://projecteuler.net/problem=48" target="_blank">http://projecteuler.net/problem=48</a></div>
<div>
<h2>Self powers</h2>
The series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 10<sup>10</sup> = 10405071317.

Find the last ten digits of the series, 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 1000<sup>1000</sup>.
<div>​自幂</div>
</div>
<div>序列 1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 10<sup>10</sup> = 10405071317</div>
<div>求序列1<sup>1</sup> + 2<sup>2</sup> + 3<sup>3</sup> + ... + 1000<sup>1000</sup>​的最后十个数字​</div>
<div></div>
<div>解答：</div>
<div>无非是大数运算。在Python里很简单。暴力之，只是不知道有什么数学规律没，我想不到。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>501</wp:post_id>
		<wp:post_date><![CDATA[2013-07-27 11:00:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-27 03:00:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9848]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%a4%a7%e6%95%b0%e8%bf%90%e7%ae%97"><![CDATA[大数运算]]></category>
		<category domain="post_tag" nicename="%e5%b9%82%e6%96%b9"><![CDATA[幂方]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791155]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题49</title>
		<link>http://127.0.0.1:8000/blog/2013/07/27/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9849/</link>
		<pubDate>Sat, 27 Jul 2013 07:30:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=505</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=49" data-ke-src="http://projecteuler.net/problem=49" target="_blank">http://projecteuler.net/problem=49</a></div>
<div>
<h2>Prime permutations</h2>
<div></div>
<div>

The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.

There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.

What 12-digit number do you form by concatenating the three terms in this sequence?
<div></div>
</div>
</div>
<div>素数排列</div>
<div>算术序列1487，4817，8147是按照3330递增的，它有两个平常的性质：(1)这三个数都是素数 (2)这三个4位数中的每一个都是另一个的排列</div>
<div></div>
<div>不存在1位，2位，3位具有这种性质的序列，但是还有另一个4位的具有这种性质的递增序列。</div>
<div></div>
<div>求将这个序列中的三个数链接起来得到的12位数</div>
<div></div>
<div>解答：</div>
<div>没什么好说的，先生成一个素数判别表，之后就简单了。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>505</wp:post_id>
		<wp:post_date><![CDATA[2013-07-27 15:30:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-27 07:30:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9849]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791156]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题50</title>
		<link>http://127.0.0.1:8000/blog/2013/07/28/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9850/</link>
		<pubDate>Sun, 28 Jul 2013 04:27:29 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=509</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=50" data-ke-src="http://projecteuler.net/problem=50">http://projecteuler.net/problem=50</a></div>
<div>
<h2>Consecutive prime sum</h2>
The prime 41, can be written as the sum of six consecutive primes:
<div>41 = 2 + 3 + 5 + 7 + 11 + 13</div>
This is the longest sum of consecutive primes that adds to a prime below one-hundred.

The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.

Which prime, below one-million, can be written as the sum of the most consecutive primes?
<div></div>
<div>连续素数的和</div>
<div>素数41，可以写成6个连续素数的和：</div>
<div>41 = 2 + 3 + 5 + 7 + 11 + 13</div>
<div>这是100以下最长的连续素数的和等于一个素数</div>
<div>1000以下最长的连续素数的和，包含21个数，等于953</div>
<div>求1 000 000​以下能写成最长连续素数的和的素数</div>
</div>
<div>​</div>
<div>解法：</div>
<div>不懂得数学方法，只好暴力了，先求出1000 000以下素数，之后双重循环。太暴力了，竟然用了18分钟，看来还是得想办法改进。果然还是有方法的，想办法生成一个三角形，最底层是1000 000以下素数，上一层是连续两个素数之和，再上一层是连续三个素数之和，。。最后一层就是所有素数之和，从上往下找，第一个小于1000000的素数就是答案。实际过程中，可以不用从最顶上开始找，可以从第一个大于1000000那一行开始往下找，然后由这一行的数生成下一行，继续找。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date><![CDATA[2013-07-28 12:27:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-07-28 04:27:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9850]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e8%bf%9e%e7%bb%ad%e7%b4%a0%e6%95%b0%e5%92%8c"><![CDATA[连续素数和]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791157]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题51</title>
		<link>http://127.0.0.1:8000/blog/2013/08/04/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9851/</link>
		<pubDate>Sun, 04 Aug 2013 06:26:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=518</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=51" target="_blank" data-ke-src="http://projecteuler.net/problem=51">http://projecteuler.net/problem=51</a></div>
<div>
<h2>Prime digit replacements</h2>
By replacing the 1<sup>st</sup> digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.

By replacing the 3<sup>rd</sup> and 4<sup>th</sup> digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.

Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.

素数数字替换

通过替换两位数*3的第一位数字，我们得到9个数字中的6个是素数：13，23，43，53，73和83.

通过用同一数字替换数56**3的第3、4位，这个5位数是第一个数，使得替换之后的10个数中，有7个数是素数。这就形成一个家族，它们是：56003，56113，56333，56443，56773和56993。56003则是这个素数族的第一个成员，是具有这种性质的最小素数。

找出最小的素数，通过用相同的数字替换这个素数中的一部分数字（没有必要想邻），可以得到一个素数，这个素数是8素数族的一部分。

解答：

一时还想不出好的办法，先空着。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>518</wp:post_id>
		<wp:post_date><![CDATA[2013-08-04 14:26:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-04 06:26:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9851]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0%e6%97%8f"><![CDATA[素数族]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791158]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题52</title>
		<link>http://127.0.0.1:8000/blog/2013/08/04/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9852/</link>
		<pubDate>Sun, 04 Aug 2013 06:29:27 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=522</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=52" target="_blank" data-ke-src="http://projecteuler.net/problem=52">http://projecteuler.net/problem=52</a></div>
<div>
<h2>Permuted multiples</h2>
It can be seen that the number, 125874, and its double, 251748, contain exactly the same digits, but in a different order.

Find the smallest positive integer, <i>x</i>, such that 2<i>x</i>, 3<i>x</i>, 4<i>x</i>, 5<i>x</i>, and 6<i>x</i>, contain the same digits.
<div>倍数排列</div>
<div>可以看到数125874和它的两倍251748，包含相同的数字，只是顺序不同。</div>
<div>找出最小的正整数x,使得x,2x,3x,4x,5x,和6x包含相同的数字。</div>
<div></div>
<div>解答：</div>
<div>暴力吧，有一点要注意的是，第一个数字一定是1。</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>522</wp:post_id>
		<wp:post_date><![CDATA[2013-08-04 14:29:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-04 06:29:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9852]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%80%8d%e6%95%b0"><![CDATA[倍数]]></category>
		<category domain="post_tag" nicename="%e6%8e%92%e5%88%97"><![CDATA[排列]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791159]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title> 欧拉工程-问题53</title>
		<link>http://127.0.0.1:8000/blog/2013/08/04/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9853/</link>
		<pubDate>Sun, 04 Aug 2013 12:32:42 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=525</guid>
		<description></description>
		<content:encoded><![CDATA[原题链接 <a href="http://projecteuler.net/problem=53" target="_blank" data-ke-src="http://projecteuler.net/problem=53">http://projecteuler.net/problem=53</a>
<h3></h3>
<h2>Combinatoric selections</h2>
There are exactly ten ways of selecting three from five, 12345:

123, 124, 125, 134, 135, 145, 234, 235, 245, and 345

In combinatorics, we use the notation, <span style="font-size: medium;">C(5,3)</span> = 10.

In general,

C(n,r)=n!/(r!(n-r)!), where r &lt;= n, n! = n * (n - 1) * ... * 3 * 2 * 1,and 0! = 1.
<div></div>
It is not until <var>n</var> = 23, that a value exceeds one-million: <span style="font-size: medium;">C(23,10)</span> = 1144066.

How many, not necessarily distinct, values of  <span style="font-family: 'times new roman'; font-size: medium;"><i>C(n,r)</i></span><span style="font-family: 'Trebuchet MS', sans-serif;">, for 1 &lt;= </span><var>n</var><span style="font-family: 'Trebuchet MS', sans-serif;"> &lt;= 100, are greater than one-million？</span>

组合选择

从五个，12345中选出三个一共有10中方法

123, 124, 125, 134, 135, 145, 234, 235, 245, and 345

<span style="font-family: 'Courier New', monospace;">​在组合中我们使用记号</span><span style="font-family: 'Trebuchet MS', sans-serif; font-size: medium;">C(5,3) = 10.</span>

一般来说

C(n,r)=n!/(r!(n-r)!),r &lt;= n, n! = n * (n - 1) * ... * 3 * 2 * 1, 且0! = 1

直到n = 23,才出现值超过1000000: C(23,10) = 1144066.

求一共有多少个值，没有必要是唯一的，使得C(n,r), 1 &lt;=n&lt;= 100,超过1000000？

解答：

遍历吧。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>525</wp:post_id>
		<wp:post_date><![CDATA[2013-08-04 20:32:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-04 12:32:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9853]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e9%98%b6%e4%b9%98"><![CDATA[阶乘]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791160]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题54</title>
		<link>http://127.0.0.1:8000/blog/2013/08/22/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9854/</link>
		<pubDate>Wed, 21 Aug 2013 16:39:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=536</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接 <a href="http://projecteuler.net/problem=54" target="_blank" data-ke-src="http://projecteuler.net/problem=54">http://projecteuler.net/problem=54</a></div>
<div>
<h2>Poker hands</h2>
In the card game poker, a hand consists of five cards and are ranked, from lowest to highest, in the following way:
<ul>
	<li><b>High Card</b>: Highest value card.</li>
	<li><b>One Pair</b>: Two cards of the same value.</li>
	<li><b>Two Pairs</b>: Two different pairs.</li>
	<li><b>Three of a Kind</b>: Three cards of the same value.</li>
	<li><b>Straight</b>: All cards are consecutive values.</li>
	<li><b>Flush</b>: All cards of the same suit.</li>
	<li><b>Full House</b>: Three of a kind and a pair.</li>
	<li><b>Four of a Kind</b>: Four cards of the same value.</li>
	<li><b>Straight Flush</b>: All cards are consecutive values of same suit.</li>
	<li><b>Royal Flush</b>:Ten, Jack, Queen, King, Ace, in same suit.</li>
</ul>
The cards are valued in the order:
2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace.

If two players have the same ranked hands then the rank made up of the highest value wins; for example, a pair of eights beats a pair of fives (see example 1 below). But if two ranks tie, for example, both players have a pair of queens, then highest cards in each hand are compared (see example 4 below); if the highest cards tie then the next highest cards are compared, and so on.

Consider the following five hands dealt to two players:
<div>
<table>
<tbody>
<tr>
<td><b>Hand</b></td>
<td></td>
<td><b>Player 1</b></td>
<td></td>
<td><b>Player 2</b></td>
<td></td>
<td><b>Winner</b></td>
</tr>
<tr>
<td><b>1</b></td>
<td></td>
<td>5H 5C 6S 7S KD
<div>Pair of Fives</div></td>
<td></td>
<td>2C 3S 8S 8D TD
<div>Pair of Eights</div></td>
<td></td>
<td>Player 2</td>
</tr>
<tr>
<td><b>2</b></td>
<td></td>
<td>5D 8C 9S JS AC
<div>Highest card Ace</div></td>
<td></td>
<td>2C 5C 7D 8S QH
<div>Highest card Queen</div></td>
<td></td>
<td>Player 1</td>
</tr>
<tr>
<td><b>3</b></td>
<td></td>
<td>2D 9C AS AH AC
<div>Three Aces</div></td>
<td></td>
<td>3D 6D 7D TD QD
<div>Flush with Diamonds</div></td>
<td></td>
<td>Player 2</td>
</tr>
<tr>
<td><b>4</b></td>
<td></td>
<td>4D 6S 9H QH QC
<div>Pair of Queens
Highest card Nine</div></td>
<td></td>
<td>3D 6D 7H QD QS
<div>Pair of Queens
Highest card Seven</div></td>
<td></td>
<td>Player 1</td>
</tr>
<tr>
<td><b>5</b></td>
<td></td>
<td>2H 2D 4C 4D 4S
<div>Full House
With Three Fours</div></td>
<td></td>
<td>3C 3D 3S 9S 9D
<div>Full House
with Three Threes</div></td>
<td></td>
<td>Player 1</td>
</tr>
</tbody>
</table>
</div>
The file, <a href="http://projecteuler.net/project/poker.txt" data-ke-src="http://projecteuler.net/project/poker.txt">poker.txt</a>, contains one-thousand random hands dealt to two players. Each line of the file contains ten cards (separated by a single space): the first five are Player 1's cards and the last five are Player 2's cards. You can assume that all hands are valid (no invalid characters or repeated cards), each player's hand is in no specific order, and in each hand there is a clear winner.

How many hands does Player 1 win?

扑克手牌

在扑克牌游戏中，一手牌由5张牌构成，有不同的等级，从最小到最大，规则如下：

大牌：牌中最大的

对子：两张相同的牌

两对：有两对对子

三条：三张相同的牌

顺子：所有的牌是连续的

同花：所有的牌是同一花色

葫芦：三条和一对

四条：四张相同的牌

同花顺：所有的牌连续且是同花

同花大顺：AKQJ10组成的同花顺

牌值的顺序如下：

2，3，4，5，6，7，8，9，10，J，Q，K，A

如果两个玩家有相同等级的牌，则值更大的那个赢，例如一对8赢一对5（如下例1），但是如果等级相同，例如两个玩家都有一对Q，那么将比较手牌中的最大值（如下例4），如果最大的依然相同，则比较次大的，重复如上步骤。

考虑如下5种两个玩家的对局情况：
<table>
<tbody>
<tr>
<td><b>局</b></td>
<td></td>
<td><b>玩家1</b></td>
<td></td>
<td><b>玩家2</b></td>
<td></td>
<td><b>赢家</b></td>
</tr>
<tr>
<td><b>1</b></td>
<td></td>
<td>5H 5C 6S 7S KD
一对5</td>
<td></td>
<td>2C 3S 8S 8D TD
<div>一对8</div></td>
<td></td>
<td>玩家2<b></b></td>
</tr>
<tr>
<td><b>2</b></td>
<td></td>
<td>5D 8C 9S JS AC
最大牌A</td>
<td></td>
<td>2C 5C 7D 8S QH
<div>最大牌Q</div></td>
<td></td>
<td>玩家1</td>
</tr>
<tr>
<td><b>3</b></td>
<td></td>
<td>2D 9C AS AH AC
<div>3张A</div></td>
<td></td>
<td>3D 6D 7D TD QD
<div>方块同花</div></td>
<td></td>
<td>玩家2</td>
</tr>
<tr>
<td><b>4</b></td>
<td></td>
<td>4D 6S 9H QH QC
<div>一对Q
最大9</div></td>
<td></td>
<td>3D 6D 7H QD QS
<div>一对Q
最大7</div></td>
<td></td>
<td>玩家1</td>
</tr>
<tr>
<td><b>5</b></td>
<td></td>
<td>2H 2D 4C 4D 4S
<div>葫芦
三个四</div></td>
<td></td>
<td>3C 3D 3S 9S 9D
<div>葫芦
三个三</div></td>
<td></td>
<td>玩家1</td>
</tr>
</tbody>
</table>
​
文件 <a href="http://projecteuler.net/project/poker.txt" data-ke-src="http://projecteuler.net/project/poker.txt">poker.txt</a>中包含一千次两个玩家的对局情况，每一行有10张牌（空格分开），前5张牌是玩家1的牌，后5张牌是玩家2的牌，你可以假设手牌都是有效的（没有无效字符和重复的牌），每个玩家的手牌都没有特殊顺序，并且每一对局一定有一个赢。

求玩家1共赢了多少次。

解答：

这题好麻烦啊，写的代码真是乱。就是按照扑克牌的规则比较大小，真是很麻烦，一度令我有放弃欧拉工程的冲动，还好坚持下来了。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>536</wp:post_id>
		<wp:post_date><![CDATA[2013-08-22 00:39:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-21 16:39:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9854]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%89%91%e5%85%8b%e7%89%8c"><![CDATA[扑克牌]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791161]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题55</title>
		<link>http://127.0.0.1:8000/blog/2013/08/25/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9855/</link>
		<pubDate>Sun, 25 Aug 2013 02:16:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=543</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=55" data-ke-src="http://projecteuler.net/problem=55">http://projecteuler.net/problem=55</a></div>
<div>
<h2>Lychrel numbers</h2>
If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.

Not all numbers produce palindromes so quickly. For example,

349 + 943 = 1292,
1292 + 2921 = 4213
4213 + 3124 = 7337

That is, 349 took three iterations to arrive at a palindrome.

Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).

Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.

How many Lychrel numbers are there below ten-thousand?

NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.
<div>利克瑞尔数</div>
</div>
<div>如果我们取47，将它逆序并求和，47 + 74 = 121，是一个回文数。</div>
<div>并不是所有的数都可以这么快产生回文数。例如</div>
<div>349 + 943 = 1292，</div>
<div>1292 + 2921 = 4213</div>
<div>4213 + 3124 = 7337</div>
<div>也就是说，349用了3此迭代得到一个回文数。</div>
<div>虽然至今没有人证明，但是有猜想认为一些数，如196，永远不产生回文数。一个数通过逆序和迭代如果永远不产生回文数则称为利克瑞尔数。因为这些数的理论本质以及方便这个问题的目的，我们假设一个数是利克瑞尔数，直到证明不是。另外，对于每个小于10000的数，给定两种可能，它或者是(i)在小于50次迭代变成循环数(ii)没有一个人，在有限的计算能力下，能够将它迭代到一个回文数。事实上，10677是第一个超过50次迭代产生回文数：4668731596684224866951378664(53次迭代，28位数)</div>
<div>令人惊奇的是，有一些回文数自身也是利克瑞尔数，第一个例子是4994.</div>
<div>求10000以下一共有多少个利克瑞尔数？</div>
<div>注意：为了强调利克瑞尔数的理论一些性质，一些单词于2007.4.24更改</div>
<div></div>
<div>解答：</div>
<div>没什么，遍历。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date><![CDATA[2013-08-25 10:16:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-25 02:16:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9855]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%88%a9%e5%85%8b%e7%91%9e%e5%b0%94%e6%95%b0"><![CDATA[利克瑞尔数]]></category>
		<category domain="post_tag" nicename="%e5%9b%9e%e6%96%87%e6%95%b0"><![CDATA[回文数]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791162]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题56</title>
		<link>http://127.0.0.1:8000/blog/2013/08/25/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9856/</link>
		<pubDate>Sun, 25 Aug 2013 02:18:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=545</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=56" target="_blank" data-ke-src="http://projecteuler.net/problem=56">http://projecteuler.net/problem=56</a></div>
<div>
<h2>Powerful digit sum</h2>
A googol (10<sup>100</sup>) is a massive number: one followed by one-hundred zeros; 100<sup>100</sup> is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only 1.

Considering natural numbers of the form, <i>a<sup>b</sup></i>, where <i>a, b</i> <img alt="&lt;" src="http://projecteuler.net/images/symbol_lt.gif" width="10" height="10" border="0" data-ke-src="http://projecteuler.net/images/symbol_lt.gif" /> 100, what is the maximum digital sum?

幂方数字和
<div>古戈尔 (10<sup>100</sup>)是一个天文数字：1后面跟着100个零；100<sup>100</sup>更是不可想象的大:1后面跟着200个零。尽管它们非常大，但是它们的数字和为1.</div>
</div>
<div></div>
<div>求幂方<i>a<sup>b</sup></i>中，a,b &lt; 100,最大的数字和</div>
解法：
暴力吧。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>545</wp:post_id>
		<wp:post_date><![CDATA[2013-08-25 10:18:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-25 02:18:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9856]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%b9%82%e6%96%b9"><![CDATA[幂方]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791163]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题57</title>
		<link>http://127.0.0.1:8000/blog/2013/09/02/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9857/</link>
		<pubDate>Mon, 02 Sep 2013 05:04:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=552</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=57" target="_blank">http://projecteuler.net/problem=57</a></div>
<div>
<h2>Square root convergents</h2>
It is possible to show that the square root of two can be expressed as an infinite continued fraction.

sqrt( 2) = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...

By expanding this for the first four iterations, we get:

1 + 1/2 = 3/2 = 1.5
1 + 1/(2 + 1/2) = 7/5 = 1.4
1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...
1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...

The next three expansions are 99/70, 239/169, and 577/408, but the eighth expansion, 1393/985, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.

In the first one-thousand expansions, how many fractions contain a numerator with more digits than denominator?

&nbsp;

平方根收敛

有可能将2的平方根表示成无限分数：

sqrt(2) = 1 + 1/(2 + 1/(2 + 1/(2 + ... ))) = 1.414213...

扩展这个式子的前四项，我们得到

1 + 1/2 = 3/2 = 1.5
1 + 1/(2 + 1/2) = 7/5 = 1.4
1 + 1/(2 + 1/(2 + 1/2)) = 17/12 = 1.41666...
1 + 1/(2 + 1/(2 + 1/(2 + 1/2))) = 41/29 = 1.41379...

之后的三项是99/70，239/169，和577/408，对于第八项，1393/985，是第一个分子中的数字个数超过分母中的数字个数的项

在前1000项中，一共有多少个分数是分子中的数字个数超过分母的？

解答：

就是如何表示分数，之后定义分数的加法，不难。

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>552</wp:post_id>
		<wp:post_date><![CDATA[2013-09-02 13:04:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-02 05:04:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9857]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%88%86%e6%95%b0%e5%8a%a0%e6%b3%95"><![CDATA[分数加法]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791164]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题58</title>
		<link>http://127.0.0.1:8000/blog/2013/09/02/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9858/</link>
		<pubDate>Mon, 02 Sep 2013 05:10:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=556</guid>
		<description></description>
		<content:encoded><![CDATA[<div>原题链接<a href="http://projecteuler.net/problem=58" target="_blank">http://projecteuler.net/problem=58</a></div>
<div>
<h2>Spiral primes</h2>
Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.

<b>37</b> 36 35 34 33 32 <b>31</b>
38 <b>17</b> 16 15 14 <b>13</b> 30
39 18  <b>5</b>  4  <b>3</b> 12 29
40 19  6  1  2 11 28
41 20  <b>7</b>  8  9 10 27
42 21 22 23 24 25 26
<b>43</b> 44 45 46 47 48 49

It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13 ~ 62%.

If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below 10%?
<div></div>
<div>螺旋素数</div>
<div>从1开始以如下方式逆时针螺旋，可以得到一个大小为7的螺旋方块</div>
</div>
<div><b>37</b> 36 35 34 33 32 <b>31</b>
38 <b>17</b> 16 15 14 <b>13</b> 30
39 18  <b>5</b>  4  <b>3</b> 12 29
40 19  6  1  2 11 28
41 20  <b>7</b>  8  9 10 27
42 21 22 23 24 25 26
<b>43</b> 44 45 46 47 48 49
<div></div>
<div>有趣的是奇数的平方都在对角线的右下角，更有趣的是，13个位于对角线的数中，有8个是素数；比率是8/13 约等于 62%。</div>
</div>
<div>如果像上面的螺旋那样再加一层螺旋，将得到一个大小为9的螺旋方块。如果这个步骤一直持续下去，当螺旋方块的大小为多少时，对角线上的素数比率会小于10%？</div>
<div></div>
<div>解答：</div>
<div>表示对角线上的数与第28题相同，最难的部分是判定一个数是否是素数，用动态生成素数表的方法不行，太大了。最后找到了米勒-拉宾素数测试法，很快。等以后有空时专门写一篇关于素数判定方法。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>556</wp:post_id>
		<wp:post_date><![CDATA[2013-09-02 13:10:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-02 05:10:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9858]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%b1%b3%e5%8b%92-%e6%8b%89%e5%ae%be"><![CDATA[米勒-拉宾]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791165]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>用epoll提供telnet服务的代码</title>
		<link>http://127.0.0.1:8000/blog/2013/12/25/%e7%94%a8epoll%e6%8f%90%e4%be%9btelnet%e6%9c%8d%e5%8a%a1%e7%9a%84%e4%bb%a3%e7%a0%81/</link>
		<pubDate>Wed, 25 Dec 2013 14:03:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=572</guid>
		<description></description>
		<content:encoded><![CDATA[这是之前写的用epoll提供telnet服务的代码。

[code lang="c"]
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;sys/epoll.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;netinet/tcp.h&gt; 
#include &lt;ctype.h&gt;
#include &lt;assert.h&gt;
#define MAX_EVENTS 10
#define PORT 9999
//从buf中得到命令
void _get_command(char *buf, char *cmd) {
	int i = 0;
	int j = 0;
	while (!isalpha(buf[i]))
		i++;
	while (buf[i] != '&#92;&#48;' &amp;&amp; buf[i] != ' ' &amp;&amp; buf[i] != '\r' &amp;&amp; buf[i] != '\n') {
		cmd[j++] = buf[i];
		i++;
	}
	cmd[j] = '&#92;&#48;';
}
// 返回成功发送的字节数
int Send(int sock, void *buffer, int size)
{
	int nsend = 0, total = 0;
	int err;
	if(NULL == buffer || 0 == size) {
		return 0;
	}
	while(size &gt; 0) {
		nsend = write(sock, (char*)buffer + total, size);
		if(nsend == -1) {
			err = errno;
			if(EINTR == err) {
				printf(&quot;send data to socket[%d], error is %s[%d]\n&quot;, 
							sock, strerror(err), err);
			} else {
				printf(&quot;Fail to send data to socket[%d], error is %s[%d]&quot;, 
							sock, strerror(err), err);
				return -1;	
			}
		} else {
			total += nsend;
			size -= nsend;
		}
	}
	return total;
}
//处理重置命令
void process_reset(int sock){
	char mess[] = &quot;reset successful\r\n&quot;;
	Send(sock, mess, strlen(mess));
	return;
}
//处理错误命令
void process_error(int sock) {
	char error[] = &quot;ERROR\r\n&quot;;
	Send(sock, error, strlen(error));
	return;
}
void process_stats(int sock){
	char mess[] = &quot;stats successful\r\n&quot;;
	Send(sock, mess, strlen(mess));
	return;
}

//处理退出命令
void process_quit(int sock) {
	close(sock);
}

int process_command(int sock, char *buf) {
	assert(buf != NULL);
	
	/*char cmd[BUFSIZ];
	_get_command(buf, cmd);	
	printf(&quot;command: %s\n&quot;, cmd);
	
	if (strcmp(&quot;stats&quot;,cmd) == 0) {
		process_stats(sock);
	} else if (strcmp(&quot;reset&quot;, cmd) == 0) {
		process_reset(sock);
	} else if (strcmp(&quot;quit&quot;, cmd) == 0){
		process_quit(sock);
	} else {
		process_error(sock);
	}*/
	Send(sock, buf, strlen(buf));

	return 0;
}

//设置socket为非阻塞
void setnonblocking(int sockfd) {
	int opts;
	opts = fcntl(sockfd, F_GETFL);
	if (opts &lt; 0) {
		perror(&quot;fcntl(F_GETFL)\n&quot;);
		exit(1);
	}
	opts = (opts | O_NONBLOCK);
	if (fcntl(sockfd, F_SETFL, opts) &lt; 0) {
		perror(&quot;fcntl(F_SETFL)\n&quot;);
		exit(1);
	}
}
int main() {
	int listenfd, conn_sock, epfd;
	char buf[BUFSIZ];
	socklen_t clilen;
	struct sockaddr_in cliaddr, servaddr;
	struct epoll_event ev, events[MAX_EVENTS];
	listenfd = socket(AF_INET, SOCK_STREAM, 0);
	if (listenfd &lt; 0) {
		printf(&quot;create socket error\n&quot;);
		return -1;
	}
	int on = 1;
	setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on));
	setnonblocking(listenfd);
    struct linger {
        int l_onoff; /* 0 = off, nozero = on */
        int l_linger; /* linger time */
    }lin;
    lin.l_onoff = 1;
    lin.l_linger = 0;
    setsockopt(listenfd, SOL_SOCKET, SO_LINGER, (char*)&amp;lin, sizeof(lin));
	bzero(&amp;servaddr, sizeof(servaddr));
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port = htons(PORT);

	if(bind(listenfd,(struct sockaddr*)&amp;servaddr,sizeof(struct sockaddr))&lt;0){
		printf(&quot;bind error\n&quot;);
		close(listenfd);
		return -1;
	}

	if(listen(listenfd, 5) &lt; 0) {
		printf(&quot;listen error\n&quot;);
		close(listenfd);
		return -1; 
	}
	epfd = epoll_create(MAX_EVENTS); //生成epoll专用的文件描述符
	if (epfd == -1) {
		printf(&quot;epoll_create\n&quot;);
		return -1;
	}
	ev.events = EPOLLIN | EPOLLET; //设置处理的事件类型,设置为边沿触发
	ev.data.fd = listenfd;
	if (epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &amp;ev) == -1) {
		printf(&quot;epoll_ctl add listen_sock fail\n&quot;);
		close(listenfd);
		return -1;
	}
	while (1) {
		int timeout = 1000; 
		int nfds = epoll_wait(epfd, events, MAX_EVENTS, timeout);
		if (nfds == -1) {
			printf(&quot;epoll_wait\n&quot;);
			return -1;
		}
		for (int i = 0;i &lt; nfds; ++i) {
			int fd = events[i].data.fd;
			if (fd == listenfd) { //监听事件
				while ((conn_sock = accept(listenfd, NULL, NULL)) &gt; 0) {//循环处理accept,这样可以处理多个连接在就绪队列中的情况
					printf(&quot;accept %d\n&quot;, conn_sock);
					setnonblocking(conn_sock);
					ev.events = EPOLLIN | EPOLLET; //设置为边沿触发
					ev.data.fd = conn_sock;
					if (epoll_ctl(epfd, EPOLL_CTL_ADD, conn_sock, &amp;ev) == -1) {
						printf(&quot;epoll_ctl: add fail\n&quot;);
						close(conn_sock);
						return -1;
					}
				}
			} else if (events[i].events &amp; EPOLLIN) {//读事件，说明有数据从客户端发来
				int n = 0;
				int nread = 0;
				while ((nread = read(fd, buf + n, BUFSIZ - n)) &gt; 0) {
					n += nread;
				}
				if (nread == -1 &amp;&amp; errno != EAGAIN) {//读数据错误,关闭描述符
					printf(&quot;read error\n&quot;);
					close(fd); //关闭一个描述符，它会从epoll描述符集合中自动删除
					continue;
				}
				if(nread == 0) { //客户端关闭连接，关闭相应的描述符
					close(fd);
					continue;
				}
				if( n &gt; 0) {
					process_command(fd, buf);
					memset(buf, 0, sizeof(buf));
				}
			}
		}
	}
}

[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>572</wp:post_id>
		<wp:post_date><![CDATA[2013-12-25 22:03:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-12-25 14:03:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8epoll%e6%8f%90%e4%be%9btelnet%e6%9c%8d%e5%8a%a1%e7%9a%84%e4%bb%a3%e7%a0%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="epoll"><![CDATA[epoll]]></category>
		<category domain="post_tag" nicename="telnet"><![CDATA[telnet]]></category>
		<category domain="category" nicename="programming"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791167]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>用epoll提供telnet服务的代码(续)</title>
		<link>http://127.0.0.1:8000/blog/2013/12/26/%e7%94%a8epoll%e6%8f%90%e4%be%9btelnet%e6%9c%8d%e5%8a%a1%e7%9a%84%e4%bb%a3%e7%a0%81%e7%bb%ad/</link>
		<pubDate>Thu, 26 Dec 2013 11:39:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=578</guid>
		<description></description>
		<content:encoded><![CDATA[最终的代码如下，这里修正了对nc命令无法处理的问题

[c]
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;errno.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;sys/epoll.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;netinet/tcp.h&gt; 
#include &lt;ctype.h&gt;
#include &lt;assert.h&gt;
#define MAX_EVENTS 10
#define PORT 9999
//从buf中得到命令
void _get_command(char *buf, char *cmd) {
	int i = 0;
	int j = 0;
	while (!isalpha(buf[i]))
		i++;
	while (buf[i] != '&#92;&#48;' &amp;&amp; buf[i] != ' ' &amp;&amp; buf[i] != '\r' &amp;&amp; buf[i] != '\n') {
		cmd[j++] = buf[i];
		i++;
	}
	cmd[j] = '&#92;&#48;';
}
// 返回成功发送的字节数
int Send(int sock, void *buffer, int size)
{
	int nsend = 0, total = 0;
	int err;
	if(NULL == buffer || 0 == size) {
		return 0;
	}
	while(size &gt; 0) {
		nsend = write(sock, (char*)buffer + total, size);
		if(nsend == -1) {
			err = errno;
			if(EINTR == err) {
				printf(&quot;send data to socket[%d], error is %s[%d]\n&quot;, 
							sock, strerror(err), err);
			} else {
				printf(&quot;Fail to send data to socket[%d], error is %s[%d]&quot;, 
							sock, strerror(err), err);
				return -1;	
			}
		} else {
			total += nsend;
			size -= nsend;
		}
	}
	return total;
}
//处理重置命令
void process_reset(int sock){
	char mess[] = &quot;reset successful\r\n&quot;;
	Send(sock, mess, strlen(mess));
	return;
}
//处理错误命令
void process_error(int sock) {
	char error[] = &quot;ERROR\r\n&quot;;
	Send(sock, error, strlen(error));
	return;
}
void process_stats(int sock){
	char mess[] = &quot;stats successful\r\n&quot;;
	Send(sock, mess, strlen(mess));
	return;
}

//处理退出命令
void process_quit(int sock) {
	close(sock);
}

int process_command(int sock, char *buf) {
	assert(buf != NULL);
	
	/*char cmd[BUFSIZ];
	_get_command(buf, cmd);	
	printf(&quot;command: %s\n&quot;, cmd);
	
	if (strcmp(&quot;stats&quot;,cmd) == 0) {
		process_stats(sock);
	} else if (strcmp(&quot;reset&quot;, cmd) == 0) {
		process_reset(sock);
	} else if (strcmp(&quot;quit&quot;, cmd) == 0){
		process_quit(sock);
	} else {
		process_error(sock);
	}*/
	Send(sock, buf, strlen(buf));

	return 0;
}

//设置socket为非阻塞
void setnonblocking(int sockfd) {
	int opts;
	opts = fcntl(sockfd, F_GETFL);
	if (opts &lt; 0) {
		perror(&quot;fcntl(F_GETFL)\n&quot;);
		exit(1);
	}
	opts = (opts | O_NONBLOCK);
	if (fcntl(sockfd, F_SETFL, opts) &lt; 0) {
		perror(&quot;fcntl(F_SETFL)\n&quot;);
		exit(1);
	}
}
int main() {
	int listenfd, conn_sock, epfd;
	char buf[BUFSIZ];
	socklen_t clilen;
	struct sockaddr_in cliaddr, servaddr;
	struct epoll_event ev, events[MAX_EVENTS];
	listenfd = socket(AF_INET, SOCK_STREAM, 0);
	if (listenfd &lt; 0) {
		printf(&quot;create socket error\n&quot;);
		return -1;
	}
	int on = 1;
	setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on));
	setnonblocking(listenfd);
	bzero(&amp;servaddr, sizeof(servaddr));
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port = htons(PORT);

	if(bind(listenfd,(struct sockaddr*)&amp;servaddr,sizeof(struct sockaddr))&lt;0){
		printf(&quot;bind error\n&quot;);
		close(listenfd);
		return -1;
	}

	if(listen(listenfd, 5) &lt; 0) {
		printf(&quot;listen error\n&quot;);
		close(listenfd);
		return -1; 
	}
	epfd = epoll_create(MAX_EVENTS); //生成epoll专用的文件描述符
	if (epfd == -1) {
		printf(&quot;epoll_create\n&quot;);
		return -1;
	}
	ev.events = EPOLLIN | EPOLLET; //设置处理的事件类型,设置为边沿触发
	ev.data.fd = listenfd;
	if (epoll_ctl(epfd, EPOLL_CTL_ADD, listenfd, &amp;ev) == -1) {
		printf(&quot;epoll_ctl add listen_sock fail\n&quot;);
		close(listenfd);
		return -1;
	}
	while (1) {
		int timeout = 1000; 
		int nfds = epoll_wait(epfd, events, MAX_EVENTS, timeout);
		if (nfds == -1) {
			printf(&quot;epoll_wait\n&quot;);
			return -1;
		}
		for (int i = 0;i &lt; nfds; ++i) {
			int fd = events[i].data.fd;
			if (fd == listenfd) { //监听事件
				while ((conn_sock = accept(listenfd, NULL, NULL)) &gt; 0) {//循环处理accept,这样可以处理多个连接在就绪队列中的情况
					printf(&quot;accept %d\n&quot;, conn_sock);
					setnonblocking(conn_sock);
					ev.events = EPOLLIN | EPOLLET; //设置为边沿触发
					ev.data.fd = conn_sock;
					if (epoll_ctl(epfd, EPOLL_CTL_ADD, conn_sock, &amp;ev) == -1) {
						printf(&quot;epoll_ctl: add fail\n&quot;);
						close(conn_sock);
						return -1;
					}
				}
			} else if (events[i].events &amp; EPOLLIN) {//读事件，说明有数据从客户端发来
				int n = 0;
				int nread = 0;
				while ((nread = read(fd, buf + n, BUFSIZ - n)) &gt; 0) {
					n += nread;
				}
				//printf(&quot;n %d nread %d\n&quot;, n, nread);
				if (nread == -1 &amp;&amp; errno != EAGAIN) {//读数据错误,关闭描述符
					printf(&quot;read error\n&quot;);
					close(fd); //关闭一个描述符，它会从epoll描述符集合中自动删除
					continue;
				}
				if( n &gt; 0) {
					process_command(fd, buf);
					memset(buf, 0, sizeof(buf));
				}
				if(nread == 0) { //客户端关闭连接，关闭相应的描述符
					close(fd);
					continue;
				}
			}
		}
	}
}
[/c]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>578</wp:post_id>
		<wp:post_date><![CDATA[2013-12-26 19:39:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-12-26 11:39:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8epoll%e6%8f%90%e4%be%9btelnet%e6%9c%8d%e5%8a%a1%e7%9a%84%e4%bb%a3%e7%a0%81%e7%bb%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="epoll"><![CDATA[epoll]]></category>
		<category domain="post_tag" nicename="telnet"><![CDATA[telnet]]></category>
		<category domain="category" nicename="programming"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791168]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>用select实现精确定时器</title>
		<link>http://127.0.0.1:8000/blog/2013/12/26/%e7%94%a8select%e5%ae%9e%e7%8e%b0%e7%b2%be%e7%a1%ae%e5%ae%9a%e6%97%b6%e5%99%a8/</link>
		<pubDate>Thu, 26 Dec 2013 13:37:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=587</guid>
		<description></description>
		<content:encoded><![CDATA[之前为了找出Sphinx中index 'test1': search error: query too complex, not enough stack (thread_stack=1217498K or higher required)这个bug,大致看了一下Sphinx的源码，发现问题的原因是在计算线程使用的空间时出错，具体原因依然没有找到，还在努力当中。在这个过程中，看到以下这段程序
[c]void sphSleepMsec ( int iMsec )
{
    if ( iMsec&lt;0 )
        return;

#if USE_WINDOWS
    Sleep ( iMsec );

#else
    struct timeval tvTimeout;
    tvTimeout.tv_sec = iMsec / 1000; // full seconds
    tvTimeout.tv_usec = ( iMsec % 1000 ) * 1000; // remainder is msec, so *1000 for usec

    select ( 0, NULL, NULL, NULL, &amp;tvTimeout ); // FIXME? could handle EINTR
#endif
}[/c]
其实就是一个毫秒定时器，《UNIX环境编程》第14章的习题就要求实现一个这样的函数。看这段程序，又是令人恶心的匈牙利命名，把它改为正常点的比较好。程序中的注释"//FIXME?could handle EINR"说的是select会被SIGINT信号中断，那么这个定时器也会因为这个原因而被中断信号中断，看看能否提供不被中断的方法。立刻就想到了忽略中断信号，试了一下，其实还是挺容易的。难道这种直接忽略中断信号还是存在问题？
[c]#include &lt;sys/select.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;signal.h&gt;
void sleep_ms(int msec) {//睡眠msec毫秒
    if (msec &lt; 0)
        return;
    signal(SIGINT, SIG_IGN);
    struct timeval tv; 
    tv.tv_sec = msec / 1000;//除以1000，得到秒数
    tv.tv_usec = (msec % 1000) * 1000;//得到剩余的毫秒数，之后乘以1000得到微秒数
    select(0, NULL, NULL, NULL, &amp;tv);
}
int main() {
    printf(&quot;start sleeping\n&quot;);
    sleep_ms(4000);
    printf(&quot;finish sleeping\n&quot;);
    return 0;
}[/c]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>587</wp:post_id>
		<wp:post_date><![CDATA[2013-12-26 21:37:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-12-26 13:37:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8select%e5%ae%9e%e7%8e%b0%e7%b2%be%e7%a1%ae%e5%ae%9a%e6%97%b6%e5%99%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="select"><![CDATA[select]]></category>
		<category domain="post_tag" nicename="sigint"><![CDATA[SIGINT]]></category>
		<category domain="post_tag" nicename="sleep"><![CDATA[sleep]]></category>
		<category domain="post_tag" nicename="%e4%b8%ad%e6%96%ad"><![CDATA[中断]]></category>
		<category domain="post_tag" nicename="%e5%ae%9a%e6%97%b6%e5%99%a8"><![CDATA[定时器]]></category>
		<category domain="post_tag" nicename="%e5%bf%bd%e7%95%a5"><![CDATA[忽略]]></category>
		<category domain="category" nicename="programming"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791169]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>安装Maven</title>
		<link>http://127.0.0.1:8000/blog/2014/03/08/%e5%ae%89%e8%a3%85maven/</link>
		<pubDate>Sat, 08 Mar 2014 04:10:01 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=621</guid>
		<description></description>
		<content:encoded><![CDATA[很早之前，在写第一个Servlet时，一直配置不成功，写一个Hello World!都成问题，于是转而奔向PHP，最近由于工作需要，要重新拾起Java那套东西。因为是用Maven做的管理，于是要安装Maven，到网上找参考资料，竟没安装好，于是到官网找解答，最终找到。

安装Maven之前，已经假设你安装好JDK.有一点需要注意的是,Maven3.2要求JDK1.6及以上,Maven3.0/3.1则要求JDK1.5及以上，否则会出现版本错误

1.下载Maven

到官网http://maven.apache.org/下载Maven,当前最新稳定版本为3.2.1

对于Windows系统，下载Maven 3.2.1 (Binary zip)

2.解压Maven,配置环境变量

将Maven解压，这里假设放在d:\apache-maven-3.2.1

之后进行环境变量配置，

在系统变量中增加M2_HOME,值为d:\apache-maven-3.2.1

在系统变量中增加M2,值为%M2_HOME%\bin

如果已经存在用户变量Path，则在值的前面增加%M2%； 注意一定要加上这个分号

如果不存在用户变量Path,则新建它，并赋值为%M2%

3.测试Maven

在命令行中执行mvn --version，在我的电脑上显示如下,

Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-15T01:37:5

2+08:00)

Maven home: d:\apache-maven-3.2.1

Java version: 1.6.0_15, vendor: Sun Microsystems Inc.

Java home: D:\Java\jdk1.6.0\jre

Default locale: zh_CN, platform encoding: GBK

OS name: "windows 7", version: "6.1", arch: "x86", family: "windows"

如果不是这样，看看环境变量是否配置正确，以及JDK版本是否匹配

4.Eclipse的Maven插件安装

在插件安装上，网上的资料很多已经过时了，因为都是很早之前的链接。顺着官网找到了eclipse的Maven插件安装链接http://download.eclipse.org/technology/m2e/releases/

我用的是Eclipse Kepler.在Help-&gt;Install new software中，将以上安装链接加入，名字为Maven，之后即可下载插件

<a href="http://program.dengshilong.org/wp-content/uploads/2014/03/Maven插件安装.png"><img class="alignnone size-full wp-image-633" alt="Maven插件安装" src="http://program.dengshilong.org/wp-content/uploads/2014/03/Maven插件安装.png" width="877" height="435" /></a>

5.配置Maven插件

在Window-&gt;Preferences中,选择Maven

<a href="http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-Installations配置.png"><img class="alignnone size-full wp-image-635" alt="Maven-Installations配置" src="http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-Installations配置.png" width="660" height="401" /></a>

点击Installations,此时还是用插件自带的Maven版本3.0.4,而且Global settings是空的我们需要添加自己安装的版本，点击Add,打开D:\apache-maven-3.2.1即可，最终结果如下：

<a href="http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-Installations配置结果.png"><img class="alignnone size-full wp-image-636" alt="Maven-Installations配置结果" src="http://program.dengshilong.org/wp-content/uploads/2014/03/Maven-Installations配置结果.png" width="659" height="400" /></a>

此时Maven插件将会使用安装的Maven3.2.1版本

之后点击User Settings,可以看到如下结果

这里也许最让你迷惑的是这三个概念，Global Settings, User Settings,以及Local Repository。因为我也未深入理解，所以也只能在这里说说我的理解。简单来说，

Global Settings就是一些全局设置，设置了中央jar仓库的位置等等.

User Settings设置了用户私有jar仓库的位置等等.

Local Repository是本地jar仓库的位置.

假设你现在在开发一个应用，它需要使用一个jar,则Maven会先到Local Repository中寻找，如果没找到这个jar,则它会到User Settings中设置的用户私有jar仓库中查找，如果还是没找到，则到Global Settings设置的中央jar仓库中查找，如果还是没找到，Maven将报错，指示jar未找到。

网上还有介绍另外一种方法，也就是先去下载Eclipse的Maven插件，之后再将插件导入到Eclipse, 只是因为直接用URL的方法已经解决了安装问题，所以没有尝试。

6.Hello World例子

之后用《Maven by Example》中的一个例子来介绍安装介绍。命令行进入Eclipse工作目录，我这里是d:\workspace,执行以下命令

mvn archetype:generate -DgroupId=org.sonatype.mavenbook -DartifactId=simple -Dpackage=org.sonatype.mavenbook -Dversion=1.0-SNAPSHOT

之后敲几次回车，一个最简单的HelloWorld项目就建立好了。

之后cd simple进入simple目录，如果你有兴趣，可以看看Maven生成的内容，

其目录结构如下

simple/

simple/pom.xml

simple/src/main

simple/src/main/java

simple/src/test

simple/src/test/java

其中src/main存放源文件,src/test存放测试文件,pom.xml为Maven提供编译信息，

执行mvn install，编译,测试，打包项目

执行java -cp target/simple-1.0-SNAPSHOT.jar org.sonatype.mavenbook.App

看到输出的 Hello World！

事实上，在命令行中，一个困惑是如何选择新建项目的类型，命令行里一共列出了九百多种，而很难知道哪个编号对应的是哪一种项目类型。

关于Maven的更多内容可以去sonatype官网下载《Maven by Example》,绝对值得一看。

参考文章：

http://www.blogjava.net/fancydeepin/archive/2012/07/13/eclipse_maven3_plugin.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>621</wp:post_id>
		<wp:post_date><![CDATA[2014-03-08 12:10:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-08 04:10:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%ae%89%e8%a3%85maven]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="maven"><![CDATA[Maven]]></category>
		<category domain="category" nicename="software"><![CDATA[软件安装]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_33b6ee2937c48c8c8137ce5a72b1d86c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_30a5c851de4a189f578ceb812398bffa]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791170]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>在C++的sort排序中永远让比较函数对相等的值返回false</title>
		<link>http://127.0.0.1:8000/blog/2014/03/24/%e5%9c%a8c%e7%9a%84sort%e6%8e%92%e5%ba%8f%e4%b8%ad%e6%b0%b8%e8%bf%9c%e8%ae%a9%e6%af%94%e8%be%83%e5%87%bd%e6%95%b0%e5%af%b9%e7%9b%b8%e7%ad%89%e7%9a%84%e5%80%bc%e8%bf%94%e5%9b%9efalse/</link>
		<pubDate>Mon, 24 Mar 2014 13:16:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=640</guid>
		<description></description>
		<content:encoded><![CDATA[很久之前，线上的程序跑着跑着，莫名其妙的就coredump了，找了很久都不知道原因。因为coredump的次数不是很多，有时好几天了也才dump了一次，所以也很难确定是在哪个地方出错了。通过版本回溯，慢慢缩小了出错的范围，可是我还是不知道在哪里出错了，直到今天晚上组长和我说了可能出错的地方，才知道原来有这么一个坑存在。
<div></div>
<div>他说使用sort排序时，比较函数编写时，如果两个值相等返回true可能会存在问题，于是我看了自己写的，两个值相等时，正是返回true.</div>
<div>int cmp(const int &amp;a, const int &amp;b) {</div>
<div>    return a &gt;= b;</div>
<div>}</div>
<div>可是我还是看不出这里有什么错误，google之后找到了解答,在一篇文章里说到，当排序的个数超过16个时，且这些书数全部相等时，如果比较函数在两个值相等返回true时就会出错。这是因为sort行数的实现中，当超过16个数时，使用快速排序，而且假定一定存在两个数不相等。具体可参看<a href="http://blog.sina.com.cn/s/blog_79d599dc01012m7l.html">http://blog.sina.com.cn/s/blog_79d599dc01012m7l.html</a></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>640</wp:post_id>
		<wp:post_date><![CDATA[2014-03-24 21:16:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-24 13:16:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%9c%a8c%e7%9a%84sort%e6%8e%92%e5%ba%8f%e4%b8%ad%e6%b0%b8%e8%bf%9c%e8%ae%a9%e6%af%94%e8%be%83%e5%87%bd%e6%95%b0%e5%af%b9%e7%9b%b8%e7%ad%89%e7%9a%84%e5%80%bc%e8%bf%94%e5%9b%9efalse]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="coredump"><![CDATA[coredump]]></category>
		<category domain="post_tag" nicename="sort"><![CDATA[sort]]></category>
		<category domain="post_tag" nicename="%e6%af%94%e8%be%83%e5%87%bd%e6%95%b0"><![CDATA[比较函数]]></category>
		<category domain="category" nicename="programming"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791171]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>crontab定时运行脚本</title>
		<link>http://127.0.0.1:8000/blog/2014/03/25/crontab%e5%ae%9a%e6%97%b6%e8%bf%90%e8%a1%8c%e8%84%9a%e6%9c%ac/</link>
		<pubDate>Tue, 25 Mar 2014 05:14:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=642</guid>
		<description></description>
		<content:encoded><![CDATA[<div>在Linux上经常需要定时运行某个脚本，这是crontab就派上用场了。对于如何使用crontab,一般google。事实上，我一直很好奇的是，网上那些人关于crontab的知识到底从哪里得来的，知道man crontab后我才知道，原来他们也是看的手册。</div>
man crontab后，没有关于如何编写crontab任务的说明，看到see also crontab(5)后,执行man 5 crontab,发现这里有说明如何编写crontab任务。这样以后就不需要遇到一个问题，就上网找，直接看手册就好了。

一般说来，都是仿照晚上的例子写，如这里<a href="http://www.blogjava.net/xiaomage234/archive/2007/12/26/170490.html">http://www.blogjava.net/xiaomage234/archive/2007/12/26/170490.html</a>后来才发现，给出的例子中有一个坑。
<div>* */1 * * * /usr/local/apache/bin/apachectl restart</div>
<div>每小时重启apache</div>
这个例子中说每小时重启apache，试着写了之后，才发现每一分钟都会重启。仔细分析后才发现原因,因为第一列是分钟的位置,而使用*号，则代表0-59分钟，于是在一个小时里，0-59分钟都会重启apache,等到59分钟重启apache后，已经过了一小时，于是又回到0分钟，于是apache又重启了。

所以以后遇到位置的命令时，不要立马上网找，可以先看看手册的说明。或者找一个靠谱的网页看，后来才发现<a href="http://www.centos.bz/2011/03/auto-run-task-crontab/">http://www.centos.bz/2011/03/auto-run-task-crontab/</a>这里写的比较靠谱。在找这些命令使用过程中发现，网上这般人经常抄来抄去的，浪费别人的时间，太无聊了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>642</wp:post_id>
		<wp:post_date><![CDATA[2014-03-25 13:14:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-25 05:14:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[crontab%e5%ae%9a%e6%97%b6%e8%bf%90%e8%a1%8c%e8%84%9a%e6%9c%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="crontab"><![CDATA[crontab]]></category>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="shell"><![CDATA[shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791172]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题59</title>
		<link>http://127.0.0.1:8000/blog/2014/03/29/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9859/</link>
		<pubDate>Sat, 29 Mar 2014 12:56:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=650</guid>
		<description></description>
		<content:encoded><![CDATA[原题链接http://projecteuler.net/problem=59
<h2>XOR decryption</h2>
Each character on a computer is assigned a unique code and the preferred standard is ASCII (American Standard Code for Information Interchange). For example, uppercase A = 65, asterisk (*) = 42, and lowercase k = 107.

A modern encryption method is to take a text file, convert the bytes to ASCII, then XOR each byte with a given value, taken from a secret key. The advantage with the XOR function is that using the same encryption key on the cipher text, restores the plain text; for example, 65 XOR 42 = 107, then 107 XOR 42 = 65.

For unbreakable encryption, the key is the same length as the plain text message, and the key is made up of random bytes. The user would keep the encrypted message and the encryption key in different locations, and without both "halves", it is impossible to decrypt the message.

Unfortunately, this method is impractical for most users, so the modified method is to use a password as a key. If the password is shorter than the message, which is likely, the key is repeated cyclically throughout the message. The balance for this method is using a sufficiently long password key for security, but short enough to be memorable.

Your task has been made easy, as the encryption key consists of three lower case characters. Using <a id="" href="http://projecteuler.net/project/cipher1.txt" target="_blank" shape="rect">cipher1.txt</a> (right click and 'Save Link/Target As...'), a file containing the encrypted ASCII codes, and the knowledge that the plain text must contain common English words, decrypt the message and find the sum of the ASCII values in the original text.

异或加密<br clear="none" />在计算机中的每个字符都被分配一个唯一的码值，最常用的标准是ASCII（美国标准信息交换码).例如，大写的A = 65，星号(*) = 42,小写的k = 107.<br clear="none" /><br clear="none" />有一种现代的加密方法是将文本文件转化成对应的ASCII,然后将每一个字节与密码中的一个值异或。使用异或方法加密的一个优点是，在密文中使用同样的密钥可以得到明文。例如, 65 XOR 42 = 107 , 之后 107 XOR 42 = 65.<br clear="none" /><br clear="none" />对于不可破解的加密，密钥的长度与明文一样长，并且密钥由随机的字节组成。一个用户将密文和密钥保存在不同的地方，如果没有同时拿到密文和密钥，将不可能破解信息。<br clear="none" /><br clear="none" />不幸的是，这种方法对于许多用户都不实际，因此一个改良的方法是使用密码作为密钥。如果密码的长度小于信息，这也是最常见的情况，那么密钥就要循环贯穿信息。综合考虑，这种方法为了保证安全，选择一个足够长的密钥，为了便于记忆，也必须足够短。<br clear="none" /><br clear="none" />你的任务已经简化了，因为密钥是由三个小写字母构成。使用<a id="" href="http://projecteuler.net/project/cipher1.txt" target="_blank" shape="rect">cipher1.txt</a>（右击，链接另存为），这是一个经过加密的ASCLL码，已经知道的是明文是由英文单词构成，请解密信息，并求原始信息中ASCLL码的总和.

解答：
暴力破解，用常见的英文单词the来判断。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>650</wp:post_id>
		<wp:post_date><![CDATA[2014-03-29 20:56:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-29 12:56:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9859]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%bc%82%e6%88%96"><![CDATA[异或]]></category>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791173]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>欧拉工程-问题60</title>
		<link>http://127.0.0.1:8000/blog/2014/03/30/%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9860/</link>
		<pubDate>Sun, 30 Mar 2014 04:06:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=659</guid>
		<description></description>
		<content:encoded><![CDATA[原题链接http://projecteuler.net/problem=60
<h2>Prime pair sets</h2>
The primes 3, 7, 109, and 673, are quite remarkable. By taking any two primes and concatenating them in any order the result will always be prime. For example, taking 7 and 109, both 7109 and 1097 are prime. The sum of these four primes, 792, represents the lowest sum for a set of four primes with this property.

Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.

素数对集合

素数3，7，109和673非常有特色。取其中任意两个素数，以任意顺序链接起来都是素数。例如，取7和109，7109和1097都是素数。这四个素数的和792，代表着具有这种特征的四素数集中的最小和。

求具有取其中任意两个素数，连接起来都是素数的五素数集的最小和。

解答：

依然是暴力解决。唯一需要注意的是，判断素数的方法必须使用米勒-拉宾素性测试方法，否则速度无法接受。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>659</wp:post_id>
		<wp:post_date><![CDATA[2014-03-30 12:06:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-30 04:06:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%ac%a7%e6%8b%89%e5%b7%a5%e7%a8%8b-%e9%97%ae%e9%a2%9860]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="projecteuler"><![CDATA[欧拉工程]]></category>
		<category domain="post_tag" nicename="%e7%b1%b3%e5%8b%92-%e6%8b%89%e5%ae%be"><![CDATA[米勒-拉宾]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0%e5%88%a4%e5%ae%9a"><![CDATA[素数判定]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791174]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何判断一个数是否是素数</title>
		<link>http://127.0.0.1:8000/blog/2014/03/31/%e5%a6%82%e4%bd%95%e5%88%a4%e6%96%ad%e4%b8%80%e4%b8%aa%e6%95%b0%e6%98%af%e5%90%a6%e6%98%af%e7%b4%a0%e6%95%b0/</link>
		<pubDate>Mon, 31 Mar 2014 12:16:40 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=566</guid>
		<description></description>
		<content:encoded><![CDATA[<p>这个问题对于学习编程的人来说不陌生，但并没有想象中那么简单，这里面还是很深的。一般来说是用比这个数小的素数去除，如果都不能整除，则是素数。可是这种方法必须要求你知道比这个数小的所有素数，所以我觉得不是很实用。</p><p>去年找实习时，微软的面试官也问了我这题。刚开始只想到最基础的方法，假设需要判断的是n, 如果n是2则是素数，如果n是1或者是大于2的偶数，则是素数，如果n是大于2的奇数，则从2开始到 n的平方根，如果n可以被其中任何一个整除则这个数不是素数，否则是素数。</p><p>之后面试官问还有没有更好的方法，考虑之后，想到《C语言名题百则精选中曾提到过一种方法，对于大于等于6的数，都可以表示成6n,6n + 1,6n + 2, 6n + 3, 6n + 4, 6n + 5,其中只有6n + 1和6n + 5是素数，所以对于大于6的数，如果不能被2 ， 3 ， 5整除，则只需用6n + 1和6n + 5这些数去除。</p><p>最近在做欧拉工程第58题，我先生成一个很大的素数表，然后来判断是否是素数，可是这个题目中用到的素数实在是太大了，这种方法不实际。之后用了前面两种方法，也是不行，速度太慢了。最后上网找方法，找到了米勒-拉宾素性测试法，终于把问题解决了。难道说，当时的面试官是想问这种方法？<br />以下内容来自http://en.wikipedia.org/wiki/Miller-Rabin_primality_test。这个方法需要用到费马小定理，x^2 = 1 (mod p)，费马这厮真是有趣，搞出几个定理都不给出证明，这个小定理还好，最要命的是那个大定理，耗费了几百年才被人给出证明。这里空白太少，写不下证明，只好直接拿来用了。</p><p>先给一个引理，当p是素数,若x^2 = 1 (mod p),则x = 1(mod p)或者 x = -1(mod p),这个引理的证明很简单，由x ^ 2 = 1 (mod p)得(x + 1)(x – 1) = 0 （mod p)，而由于p是素数，所以x + 1 = 0 (mod p)或者x – 1 = 0 (mod p).</p><p>现在设n是一个素数且n &gt; 2,则 n – 1一定是偶数，并且可以表示成2 ^s * d的形式，其中s和d都为正整数，且d是奇数。那么对于任意2 &lt;= a &lt; n,<br /> a^d = 1 (mod n)或者a^(2^r * d) = - 1(mod n),其中0 &lt;= r &lt;= s – 1。</p><p>证明如下：<br /> 由费马小定理可知，当n是素数时<br /> a^(n – 1) = 1 (mod n), 我们将n – 1表示成2^s * d,再由上面的引理得，如果我们对n – 1进行开方，则可以得到a^(2^(s – 1) *d)=1 (mod n)或者a^(2^(s-1) *d) = -1 (mod n),如果是后者，则已经满足了，如果是前者，则继续这个开方过程，如果我们一直都是得到1，最终就是<br /> a^d = 1(mod n).</p><p>而米勒-拉宾测试法就是用了这个定理的逆否命题。也就是，如果 a^d != 1 (mod n)且a^(2^r *d) != -1 (mod n)对于所有的0&lt;=r&lt;=s-1,则n不是素数。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>566</wp:post_id>
		<wp:post_date><![CDATA[2014-03-31 20:16:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-31 12:16:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e5%88%a4%e6%96%ad%e4%b8%80%e4%b8%aa%e6%95%b0%e6%98%af%e5%90%a6%e6%98%af%e7%b4%a0%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="math"><![CDATA[数学]]></category>
		<category domain="post_tag" nicename="%e7%b1%b3%e5%8b%92-%e6%8b%89%e5%ae%be"><![CDATA[米勒-拉宾]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791166]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于Sphinx引擎的一些想法</title>
		<link>http://127.0.0.1:8000/blog/2014/04/11/%e5%85%b3%e4%ba%8esphinx%e5%bc%95%e6%93%8e%e7%9a%84%e4%b8%80%e4%ba%9b%e6%83%b3%e6%b3%95/</link>
		<pubDate>Fri, 11 Apr 2014 00:58:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=666</guid>
		<description></description>
		<content:encoded><![CDATA[因为自留地越来越像我的心情博客了，于是决定将学习笔记都记录在这个博客上，于是将之前关于Sphinx的一些文章全部转移到这里。

最近一个星期都在看Sphinx搜索引擎的文档,并和组里的一个同事合作为公司的企业空间搜索建立索引，提供搜索服务，所以对于Sphinx有了一些了解，顺便几下来，以后用到了可以再看看。

先八卦一下，Sphinx首先是俄罗斯人Andrew Aksyonoff开发的全文搜索引擎，开源之后有其他人参与进来，功能更加强大了。俄罗斯人还是真是厉害，之前是Nginx,现在是Sphinx。可是Sphinx不支持中文，所以要下载Sphinxforchinese才可以用。

Sphinx的数据源主要来自数据库，如Mysql,这也是最常见的方式。以下主要写给公司配置引擎时的一些体会。

1.一般使用都是一个主索引和增量索引，主索引建立后一直不变，变化的是增量索引，搜索的结果为合并主索引和增量索引的搜索结果。每隔一段时间就到数据源中抓取数据，保存在一个tmp索引中，然后这个tmp索引和增量索引合并，当然也可以隔一段时间就将增量索引和主索引合并，但这个时间间隔最好长一些。

2.建索引需要的数据分布在许多个表上，所以要先写爬虫将这些表的数据从数据库中抓取出来，存到另一个表中。之后在Sphin的配置文件中，数据就可以来自这个新建的表。这个新建的表最好有一个自动变化的时间字段，也就是每次在这个表中插入数据或更新数据，这个时间自动都会变化，这个字段将用于增量索引。另外还需要建一个表来保存上一次抓取的时间，从这个时间往后，抓取新的数据。

3.默认情况下，从数据源中选出的数据都是建索引的。而默认情况下，对于建索引的数据,Sphinx将不会保存原始数据，如果需要Sphinx既建索引，又要保存数据，在配置文件中，将这个字段写为sql_field_string。对于时间类型，在sql_query中select数据时，就要用函数unix_timestamp将它转为整形的时间戳，在配置文件中，要将这个字段写为sql_attr_timestamp，这样在客户端中调用api转化时间时才会准确。

4.sql_query_post和sql_query_post_index是有区别的。前者是当Sphinx从数据库中得到数据后，立刻就会运行，而后者只有当索引真正成功建立后才会运行，这个区别还是很重要的。对于真正严格的程序，不应该在sql_query_pre和sql_query_post中更新增量时间，而应该在sql_query_post_index中更新增量时间。还有一个区别是sql_query_post和sql_query_post_index是存在与两个不同的tcp连接中，因为Sphinx从数据库中得到数据后去建索引，将会花费很长时间，所以它会将数据库连接关闭，等到索引建好之后，再去连接数据库，所以sql_query_post_index会在另一个连接中

5.对于可以使用id来做增量索引的数据，需要将这次增量的最大id保存到数据库中。一个很诱人的做法是，将这次增量的最大id保存在一个值中，然后在sql_query_post_index中将这个值保存到数据库中，这其实是不对的。因为上一条中说过，sql_query_post_index会在另一个连接中，所以之前连接中的值在这个连接中失效了。一个做法是将增量的最大id保存到数据库中一个tmp字段中，等到索引建成功后，在sql_query_post_index中，将这个最大id从数据库中读出，写到用于做增量索引的字段中。

6.事实上，比较难的一点是在于数据有更新的情况下，如何处理。当数据有更新时，在主索引中原来的数据将会失效，但是搜索时还是会搜到它。一个解决的办法是将原来的数据标示为删除，这就需要一个标示字段了。这个办法是我组长想出来的，在sql_query中就给它添加一个字段，标示未删除的。每次增量索引结束后，就通过每条记录的id(在Sphinx中，会给每条记录一个id)，将主索引中相应的记录标示为删除。在搜索时，只需要搜索出标示为未删除的就可以了。对于官方文档中，我还没有看到如何解决这个问题的介绍。

7.如果能写一个程序来自动生成配置文件，那就再好不过了。上次我是手动输的，既容易出错，有耗眼力和精力。

整个过程最重要的还是将分布在多个表中的数据合并为一个表以及处理更新这两步上，如果能解决这两个问题，一个可用的全文搜索就完成了。暂时先写到这里，等以后有了新的体会再补充。

看来是我错了，文档中有说到数据更新这个问题，是用Klist,具体可以看文档。看Sphinx的源码很不舒服，因为可恶的匈牙利命名。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>666</wp:post_id>
		<wp:post_date><![CDATA[2014-04-11 08:58:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-11 00:58:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8esphinx%e5%bc%95%e6%93%8e%e7%9a%84%e4%b8%80%e4%ba%9b%e6%83%b3%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="post_tag" nicename="%e5%a2%9e%e9%87%8f%e7%b4%a2%e5%bc%95"><![CDATA[增量索引]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e6%9b%b4%e6%96%b0"><![CDATA[更新]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791175]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>238</wp:comment_id>
			<wp:comment_author><![CDATA[石楠]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shinan@xizhi-inc.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[218.28.185.19]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-21 10:34:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-21 02:34:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好，关于你说的第6条，更新情况是怎样的？如果重新./indexer --all
的话，不就应该不存在这种情况了么？
还有就是，嘿嘿，第三条不大理解，刚接触sphinx，像sql_field_string这个属性的设置是不是特别重要，会达到什么效果？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>240</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[long470884130@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.33.201.170]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-22 20:09:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-22 12:09:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不错，重新./indexer --all是不存在了，可是你总不能每次都去重建吧，数据量大的情况下，那样太耗时间的。当你使用main+delta策略时，你就不会经常的./index --all的。sql_field_string是针对字符类型来的，如果你想对一个字符类型既索引又保存它的内容，就需要配置成sql_field_string，这样做有一个好处就是搜索时可以返回这个字段的内容，但缺点是索引的体积会变大；如果只需要索引，不写就行了，因为默认情况下对于字符类型只建索引。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>238</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>242</wp:comment_id>
			<wp:comment_author><![CDATA[石楠]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shinan@xizhi-inc.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.192.121.217]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-23 11:16:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-23 03:16:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[非常感谢你的答疑~~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>搭建Sphinx-for-chinese引擎时遇到的问题</title>
		<link>http://127.0.0.1:8000/blog/2014/04/11/%e6%90%ad%e5%bb%basphinx-for-chinese%e5%bc%95%e6%93%8e%e6%97%b6%e9%81%87%e5%88%b0%e7%9a%84%e9%97%ae%e9%a2%98/</link>
		<pubDate>Fri, 11 Apr 2014 01:00:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=668</guid>
		<description></description>
		<content:encoded><![CDATA[在<a href="http://program.dengshilong.org/2014/04/11/关于sphinx引擎的一些想法/" target="_blank">关于sphinx引擎的一些想法</a>说过用Sphinx给同事搭引擎，可是那是建立在之前的配置文件之上，我只要依葫芦画瓢，改一改路径以及查询语句就搞定了，实质上没学到什么东西。在我看来，要想真正了解它，还是得重新造轮子，从头到尾自己搭一遍，在这个过程中出现了许多奇怪的错误，在这里记录一下。

1.checking for clock_gettime in -lrt...
这是我遇到的第一个问题，事实证明，这根本不是问题。到Sphinx-for-chinese下载了编译包，开始编译，之后就卡在了这里。刚开始以为是缺少librt，然而我在lib中找到了这个链接库。将编译包放在其它机器上编译，又是可以通过的，百思不得其解。只好到Sphinx-fro-chinese的QQ群里发问，黑猫给出解答是要将librt所在路径加入到etc/ld.so.conf，并运行ldconfig命令。按照他的办法，结果运行ldconfig命令时卡住了，于是可以断定是机器的问题。

2.ERROR: cannot find MySQL include files.
这个问题比较好解决，就是缺少MySQL的库文件。因为虚拟机装的是Ubuntu，只要运行以下命令就好了。
sudo apt-get install libmysql++-dev libmysqlclient15-dev checkinstall
如果是其它系统，相信也是类似的方法。如果已经有库文件了，则只需要将路径加入到/etc/ld.so.conf中，并执行ldconfig命令

3.index 'test1': search error: query too complex, not enough stack (thread_stack=1217498K or higher required).
这也是一个很奇怪的错误。我是按照文档中给出的例子建好索引，之后用命令行工具，也就是search要搜索的，结果就出现了这个错误。在网上搜索这个错误，没找到有用的信息，于是又求助于Sphinx-for-chinese群，群里的人说是因为命令行存在问题，用客户端搜就没问题。于是用客户端搜果然没问题，可是我还是无法释怀，因为之前公司的引擎中，用命令行是没有问题的。于是对照着公司用的引擎中的配置文件，发现配置文件中没有这一行，在自己的配置文件中注释掉这行后，果然没问题了。
所以对于这个错误的解决办法就是，将sql_query_info = SELECT * FROM documents WHERE id=$id这行注释掉.
这个确实太坑人了，连官方的配置文件都会出错，得浪费多少人的时间。


4.ERROR: index 'main': No fields in schema - will not index.
光运行例子是不行的，还是得自己写一些东西，于是将自己的博客文章来搜索。用了Wordpress中wp_posts表中的数据，我只用的四个字段ID,post_title,post_content,post_modified,将post_title,post_content定义成sql_attr_string,sql_attr_timestamp,结果就出现了这个错误。在网上找了，发现在官方bug报告中有提到这个问题
<a href="http://sphinxsearch.com/bugs/view.php?id=1632" target="_blank">http://sphinxsearch.com/bugs/view.php?id=1632</a>
管理员说，引擎中需要一个全文索引字段，否则就没有东西需要索引了，这样它就不会建索引。管理员建议定义为sql_field_string,这样就会对这个字段既索引又保存内容。对于我的配置，我并不想保存post_content这个字段，所以不想将它定义为sql_field_string,那怎样才能让它只被所以呢？看过文档之后，才知道默认情况下，是会被索引。这也是为什么，在上面的帖子中，将sql_attr_string = text注释掉就可以建索引了。所以我只能说管理员也没有真正理解这个错误的原因，看来不能迷信权威啊。

5.FATAL: there must be 2 indexes to merge specified
这个是在测试Klist的时，出现的。文档中说，当合并两个索引时，使用--merge-klists就可以将两个索引的klist合并，于是我在合并时加上了这个参数。具体如下：
./indexer -c $conf ?--rotate --merge --merge-klists delta deltaTemp
运行时就出现这个错误，我纳闷了，明明官方文档中说加入这个参数是没问题的。到网上找资料，有人是用--merge-killlists这个参数，试过之后，同样报这个错误。无奈之际，将--merge-klist参数放到--rotate前面，
./indexer -c $conf --merge-klists --rotate --merge delta deltaTemp
奇迹出现了，这次没有报错。我只能说，这真是个坑。

<em>《I</em><em>ntroduction to Search with Sphinx》</em>写的还是非常不错的，毕竟是Sphinx的作者，表达能力和写作能力自然非同凡响，关于Sphinx的知识，许多都来自本书。等有时间了，可以将引擎的搭建过程写一写，应该可以帮助一些人。这次搭建过程，我学到了许多，虽然用的是开源的引擎，但真要从头到尾搭建一个引擎，并提供可靠的服务，并不是那么容易的，还是得多实践才行。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>668</wp:post_id>
		<wp:post_date><![CDATA[2014-04-11 09:00:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-11 01:00:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%90%ad%e5%bb%basphinx-for-chinese%e5%bc%95%e6%93%8e%e6%97%b6%e9%81%87%e5%88%b0%e7%9a%84%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="klist"><![CDATA[Klist]]></category>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791176]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>241</wp:comment_id>
			<wp:comment_author><![CDATA[石楠]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shinan@xizhi-inc.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.192.121.217]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-23 10:20:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-23 02:20:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[你好~
我同学在安装sphinx2.2.2 beta的时候bin下没有search文件，其他一切功能正常，indexer,searched都有，并且能启动以及创建索引，请问，是不是beta版本不提供search?比较纳闷]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>243</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[long470884130@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.33.201.170]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-23 18:49:25]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-23 10:49:25]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[确实没有search,因为没看到search.cpp文件，具体原因我也不清楚，你可以用老版本的search试试。不应该用beta版本的，因为不稳定。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>241</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>244</wp:comment_id>
			<wp:comment_author><![CDATA[石楠]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[shinan@xizhi-inc.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[1.192.121.217]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-24 11:32:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-24 03:32:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[非常感谢解答~~~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>245</wp:comment_id>
			<wp:comment_author><![CDATA[admin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[long470884130@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[121.33.201.170]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-04-24 11:55:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-04-24 03:55:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[不客气，有人也曾这样帮助过我。]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>244</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>用Sphinx建立只有主索引的引擎</title>
		<link>http://127.0.0.1:8000/blog/2014/04/14/%e7%94%a8sphinx%e5%bb%ba%e7%ab%8b%e5%8f%aa%e6%9c%89%e4%b8%bb%e7%b4%a2%e5%bc%95%e7%9a%84%e5%bc%95%e6%93%8e/</link>
		<pubDate>Mon, 14 Apr 2014 05:12:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=670</guid>
		<description></description>
		<content:encoded><![CDATA[因为一直都对Wordpress自带的搜索功能略有微词，可是又不想去改它，想想自己的博客一天都没有一个人会访问，更不用说这个搜索功能了。因为现在学习使用Sphinx-for-chinese，拿博客的数据来练练手。

先从最简单的情况开始，以后再一步一步的完善功能，这样才符合学习的线路，从易到难，而不是一开始就给你一个很完善的模型，然后改改路径就好了。最简单的情况就是只有一个主索引，然后隔一段时间重建索引。得益于Sphinx的高效，建索引的速度非常快，在文档中说达到了10M/s, 按照一篇文章为4KB计算，一秒钟可以给250篇文章建索引了，对于博客来说，已经足够了。对于其它的应用，当数据不多时，只有一个主索引也是可以的。

这里只使用了wp_posts表中的数据，只是用了ID, post_title, post_content, post_modified四个字段，所以非常的简单，直接上配置文件
<div>source base{</div>
<div>        type = mysql</div>
<div>        sql_host = localhost</div>
<div>        sql_user = root</div>
<div>        sql_pass = 123456</div>
<div>        sql_db = blog</div>
<div>        sql_port = 3306</div>
<div>}</div>
<div>source srcmain : base{</div>
<div>        sql_query_pre = SET NAMES utf8</div>
<div>        sql_query_pre = SET SESSION query_cache_type=OFF</div>
<div>        sql_query = \</div>
<div>                SELECT ID, post_title, post_content, UNIX_TIMESTAMP(post_modified) AS post_modified FROM wp_posts WHERE \</div>
<div>                        post_status='publish' AND post_modified &lt; NOW();</div>
<div>        sql_attr_timestamp = post_modified</div>
<div>        sql_field_string = post_title</div>
<div></div>
<div>}</div>
<div>index main {</div>
<div>        source = srcmain</div>
<div>        path = /home/long/sphinxforchinese/blog_search/var/data/main</div>
<div>        docinfo = extern</div>
<div>        charset_type = utf-8</div>
<div>        chinese_dictionary = /home/long/sphinxforchinese/blog_search/etc/xdict</div>
<div>}</div>
<div>indexer {</div>
<div>        mem_limit = 32M</div>
<div>}</div>
<div></div>
<div>searchd {</div>
<div>        listen = 9300</div>
<div>        log = /home/long/sphinxforchinese/blog_search/var/log/searchd.log</div>
<div>        query_log = /home/long/sphinxforchinese/var/log/query.log</div>
<div>        read_timeout = 5</div>
<div>        max_children = 30</div>
<div>        pid_file = /home/long/sphinxforchinese/var/log/searchd.pid</div>
<div>        max_matches = 1000</div>
<div>        seamless_rotate = 1</div>
<div>        preopen_indexes = 1</div>
<div>        unlink_old = 1</div>
<div>        workers = threads</div>
<div>        binlog_path = /home/long/sphinxforchinese/var/data</div>
<div>}</div>
<pre></pre>
相关配置选项的意义可以查看示例，写的非常的详细。这里没有对post_content进行定义，因为只想对这个字段建索引，并不想保存它的原始内容，所以这里使用了默认行为，也就是只建索引。
建好索引，搜索跑步的相关文章，得到如下结果
1. document=41, weight=2661, post_title=跑步一周年, post_modified=Sun Apr 7 10:11:56 2013
2. document=286, weight=2660, post_title=跑步两周年, post_modified=Fri Jan 4 12:49:47 2013
3. document=537, weight=1642, post_title=写在广州马拉松之前, post_modified=Sat Nov 9 00:00:45 2013
4. document=39, weight=1632, post_title=看棒球英豪漫画, post_modified=Sun Apr 7 09:57:34 2013
5. document=2, weight=1626, post_title=关于我, post_modified=Fri Jun 14 19:49:08 2013
6. document=565, weight=1626, post_title=2013广州马拉松纪实, post_modified=Sun Nov 24 22:10:57 2013
7. document=43, weight=1617, post_title=三个月来的小结, post_modified=Sun Apr 7 10:10:22 2013
8. document=56, weight=1617, post_title=价值博客们, post_modified=Sun Apr 7 09:52:51 2013
9. document=205, weight=1617, post_title=2012扬州马拉松纪实, post_modified=Tue Apr 2 11:29:04 2013
10. document=5, weight=1602, post_title=2011年的阅读, post_modified=Tue May 29 11:19:49 2012
11. document=305, weight=1602, post_title=羽毛球心结, post_modified=Mon Apr 8 08:33:37 2013
12. document=40, weight=1574, post_title=通关manufactoria, post_modified=Sun Apr 7 10:01:06 2013
13. document=233, weight=1574, post_title=当了一回胃扩张, post_modified=Fri Jul 20 15:46:35 2012
搜索结果还行吧。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>670</wp:post_id>
		<wp:post_date><![CDATA[2014-04-14 13:12:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-14 05:12:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8sphinx%e5%bb%ba%e7%ab%8b%e5%8f%aa%e6%9c%89%e4%b8%bb%e7%b4%a2%e5%bc%95%e7%9a%84%e5%bc%95%e6%93%8e]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="post_tag" nicename="%e4%b8%bb%e7%b4%a2%e5%bc%95"><![CDATA[主索引]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e9%80%9f%e5%ba%a6"><![CDATA[速度]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791177]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MySQL的timestamp类型 </title>
		<link>http://127.0.0.1:8000/blog/2014/04/12/mysql%e7%9a%84timestamp%e7%b1%bb%e5%9e%8b/</link>
		<pubDate>Sat, 12 Apr 2014 07:03:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=677</guid>
		<description></description>
		<content:encoded><![CDATA[在数据库应用中，时间字段是极为常用的，而timestamp因为有一个很好的特性，所以经常用到。例如将timestamp设置为NOT NULL DEFAULT CURRENT_TIMESTAMP时，在数据第一次插入时，时间会自动设置为当前时间。

而如果再加上ON UPDATE CURRENT_TIMESTAMP，也就是将timestamp类型设置为 NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP，这样在更新数据时，就会自动更新为当前时间。如此，就没有必要在更新数据时，使用now函数。

最近在做一个项目，令我意外的是，一个同事竟然不知道有这个类型，所以在更新数据时，他要使用now函数。他说在数据结构设计时，不会关心具体数据库提供的特性。即便如此，我还是认为，数据结构设计还是要接地气的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>677</wp:post_id>
		<wp:post_date><![CDATA[2014-04-12 15:03:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-12 07:03:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e7%9a%84timestamp%e7%b1%bb%e5%9e%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mysql"><![CDATA[MySQL]]></category>
		<category domain="post_tag" nicename="timestamp"><![CDATA[timestamp]]></category>
		<category domain="category" nicename="sql"><![CDATA[数据库]]></category>
		<category domain="post_tag" nicename="%e8%87%aa%e5%8a%a8%e6%9b%b4%e6%96%b0"><![CDATA[自动更新]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791178]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysqli_fetch_all函数</title>
		<link>http://127.0.0.1:8000/blog/2014/04/13/mysqli_fetch_all%e5%87%bd%e6%95%b0/</link>
		<pubDate>Sun, 13 Apr 2014 13:15:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=681</guid>
		<description></description>
		<content:encoded><![CDATA[许多情况下，都需要将mysql的查询结果转成一个数组，这个就可以遍历数组来显示，查询结果。在我的开发环境里，我使用mysqli_fetch_all函数,使用方法如下

[php]
$result = mysqli_query($con, $sql);
$posts =  mysqli_fetch_all($result, MYSQLI_ASSOC);
[/php]

加上MYSQLI_ASSOC是为了使返回的是关联数组,之后就可以遍历$posts数组。当将这段代码放到线上环境时，发现没有结果，最后才知道原来是mysqli_fetch_all函数无法使用。 google之后才知道,mysqli_fetch_all这个函数只存在于mysqlnd中，也就是PHP的原生MySQL驱动中。原来链接MySQL存在两套驱动,一套是libmysql,一套是mysqlnd。本来mysqlnd是不存在的,后来因为mysql到了Oracle手上之后,驱动的认证就有些问题了,于是PHP开发组自己开发了一套mysql驱动。

可是在linux下，安装mysqli时还是默认使用libmysql，所以要么就得重新安装mysqli模块,使用mysqlnd驱动安装，或者自己来实现mysqli_fetch_all的功能。暂时先自己实现类似的功能。
[php]
$result = mysqli_query($con, $sql);
$posts = array();
while($row = mysqli_fetch_array($result)) {
    $posts[] = $row;
}
[/php]
<h3 class="r"><a href="https://dev.mysql.com/downloads/connector/php-mysqlnd/" target="_blank"><em> </em></a></h3>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>681</wp:post_id>
		<wp:post_date><![CDATA[2014-04-13 21:15:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-13 13:15:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysqli_fetch_all%e5%87%bd%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mysqli"><![CDATA[mysqli]]></category>
		<category domain="post_tag" nicename="mysqli_fetch_all"><![CDATA[mysqli_fetch_all]]></category>
		<category domain="post_tag" nicename="mysqlnd"><![CDATA[mysqlnd]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791179]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>用Sphinx建立main+delta索引(上篇)</title>
		<link>http://127.0.0.1:8000/blog/2014/04/14/%e7%94%a8sphinx%e5%bb%ba%e7%ab%8bmaindelta%e7%b4%a2%e5%bc%95%e4%b8%8a%e7%af%87/</link>
		<pubDate>Mon, 14 Apr 2014 05:14:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=686</guid>
		<description></description>
		<content:encoded><![CDATA[虽然只建立主索引就可以满足许多应用，但当数据非常多时，每次都重建索引是一件非常耗时的事情，而且每次重建都会浪费CPU，这也是极为不好的。考虑这样一种情况，在数据库中一共有1千万个文档，而每天只新增一万个文档，如果每次都要重建索引，则第一次重建时，是1001万个文档，第二次时是1002万个文档，这都非常耗时的。如果建好主索引后，只对这些新增的一万个数据建一个增量索引，之后把它合并到主索引中，所需的时间将缩短。所以建立main+delta索引是一个不错的选择。
<div></div>
<div>这里依然以之前的博客搜索为例。为了便于做增量，我们需要记录每次抓取的时间，而为了持久保存这个时间，我们需要在数据中建立一个辅助表，建表语句如下</div>
<div>
<div>create table sphinx_helper(</div>
<div>        appid varchar(300) not null primary key,</div>
<div>        main_maxts datetime,</div>
<div>        main_tmp_maxts datetime,</div>
<div>        delta_maxts datetime,</div>
<div>        delta_tmp_maxts datetime</div>
<div>);</div>
<div>insert into sphinx_helper (appid) values ('blog_search');</div>
<div>在wp_posts表中, post_modified这个时间字段是随着每次文章的更新而自动变化的，所以可以使用它来做增量。主要思路就是用一个值来保存上次增量索引的时间，当需要再做增量索引时，则只需索引从这个保存的时间到现在这段时间里的数据。在sphinx_helper中，这个值用main_maxts来标示。对于主索引，写成配置文件如下，</div>
<div>
<div>source base{</div>
<div>        type = mysql</div>
<div>        sql_host = localhost</div>
<div>        sql_user = root</div>
<div>        sql_pass = 123456</div>
<div>        sql_db = blog</div>
<div>        sql_port = 3306</div>
<div>}</div>
<div>source srcmain : base{</div>
<div>        sql_query_pre = SET NAMES utf8</div>
<div>        sql_query_pre = SET SESSION query_cache_type=OFF</div>
<div>        sql_query_pre = UPDATE sphinx_helper SET main_tmp_maxts=NOW() WHERE appid='blog_search';</div>
<div>        sql_query = \</div>
<div>                SELECT ID, post_title, post_content, UNIX_TIMESTAMP(post_modified) AS post_modified FROM wp_posts WHERE \</div>
<div>                        post_status='publish' AND post_modified &lt; (SELECT main_tmp_maxts FROM sphinx_helper WHERE appid='blog_search');</div>
<div>        sql_query_post_index = UPDATE sphinx_helper SET main_maxts=main_tmp_maxts WHERE appid='blog_search';</div>
<div>        sql_attr_timestamp = post_modified</div>
<div>        sql_field_string = post_title</div>
<div></div>
<div>}</div>
<div></div>
<div>以上就是主索引的配置，之所以需要将NOW()得到的时间保存到数据库中，之后在sql_query_post_index中取出来用，是因为sql_query_post_index和sql_query不是用一个数据连接。而之所以在sql_query_post_index里才更新main_maxts，是为了保证只有在索引成功建立后才更新这个值。而对于增量索引的配置，则如下：</div>
<div></div>
<div>source srcdelta : srcmain {</div>
<div>        sql_query_pre = SET NAMES utf8</div>
<div>        sql_query_pre = SET SESSION query_cache_type=OFF</div>
<div>        sql_query_pre = SET @maxtsdelta:=NOW();</div>
<div>        sql_query_pre = UPDATE sphinx_helper SET delta_tmp_maxts=@maxtsdelta WHERE appid='blog_search';</div>
<div>        sql_query = SELECT ID, post_title, post_content, UNIX_TIMESTAMP(post_modified) AS post_modified FROM wp_posts WHERE \</div>
<div>                post_status='publish' AND post_modified &gt;= (SELECT main_maxts FROM sphinx_helper WHERE appid='blog_search')\</div>
<div>                AND post_modified &lt; @maxtsdelta;</div>
<div>        sql_query_post_index = UPDATE sphinx_helper SET delta_maxts=delta_tmp_maxts WHERE appid='blog_search';</div>
<div>}</div>
<div>在sql_query中可以看到，每次增量索引的数据都是在[max_maxts, NOW()]之间，而只在sql_query_post_index中更新delta_maxts也是基于上述理由。剩下的配置如下：</div>
<div>index main {</div>
<div>        source = srcmain</div>
<div>        path = /home/long/sphinxforchinese/blog_search/var/data/main</div>
<div>        docinfo = extern</div>
<div>        charset_type = utf-8</div>
<div>        chinese_dictionary = /home/long/sphinxforchinese/blog_search/etc/xdict</div>
<div>}</div>
<div>index delta : main {</div>
<div>        source = srcdelta</div>
<div>        path = /home/long/sphinxforchinese/blog_search/var/data/delta</div>
<div>}</div>
<div>
<div>index dist_blog_search {</div>
<div>        type = distributed</div>
<div>        local = main</div>
<div>        local = delta</div>
<div>        agent_connect_timeout = 1000</div>
<div>        agent_query_timeout = 3000</div>
<div>}</div>
</div>
<div>这里我们多了一个dist_blog_search，它是结合main和delta的搜索结果，在客户端中搜索时，我们使用dist_blog_search这个索引的结果。剩下的配置与只有主索引时相同，这里就不累述了。</div>
</div>
<div>
<div></div>
<div>写好配置文件后，还需要有一个步骤。因为我们的策略是每隔一段时间将增量索引与主索引合并，当合并之后，我们需要更新main_maxts这个值。如果我们是每个60秒做一次增量索引，这需要写一个shell脚本，脚本如下：</div>
</div>
<div>
<div>#!/bin/bash</div>
<div>baseDir=/home/long/sphinxforchinese/blog_search</div>
<div>conf=$baseDir/etc/main_delta.conf</div>
<div>binDir=$baseDir/bin</div>
<div>cd $binDir</div>
<div>while [ true ]</div>
<div>do</div>
<div>        ./indexer -c $conf --rotate --merge main delta</div>
<div>        if [ "$?" -eq "0" ]; then</div>
<div>                cat $baseDir/script/post_merge.sql | mysql -u root --password=123456 blog</div>
<div>                ./indexer -c $conf --rotate delta</div>
<div>        fi</div>
<div>        sleep 60</div>
<div>done</div>
</div>
<div>先执行</div>
<div> ./indexer -c $conf --rotate --merge main delta</div>
<div>这句是将主索引和增量索引合并，当合并成功时，则需要到数据库中修改main_maxts这个值，这个句子在post_merge.sql中，post_merge.sql的内容如下：</div>
<div>
<div>UPDATE sphinx_helper SET main_maxts=delta_maxts\</div>
<div>        WHERE appid='blog_search';</div>
</div>
<div>之后进行增量抓取</div>
<div>./indexer -c $conf --rotate delta</div>
<div>这里说说--rotate这个选项，这个选项非常有用。在主索引和增量索引合并时，indexer程序会将这两个索引合并成一个索引，当合并成功后，程序会发送一个SIGHUP信号给searchd，之后searchd就好去加载这个新的索引。</div>
<div></div>
<div>到这里，一个main+delta的索引就完成了。</div>
<div></div>
<div></div>
<div></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>686</wp:post_id>
		<wp:post_date><![CDATA[2014-04-14 13:14:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-14 05:14:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8sphinx%e5%bb%ba%e7%ab%8bmaindelta%e7%b4%a2%e5%bc%95%e4%b8%8a%e7%af%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="delta"><![CDATA[delta]]></category>
		<category domain="post_tag" nicename="main"><![CDATA[main]]></category>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="post_tag" nicename="%e5%a2%9e%e9%87%8f%e7%b4%a2%e5%bc%95"><![CDATA[增量索引]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791180]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>用Sphinx建立main+delta索引(下篇)</title>
		<link>http://127.0.0.1:8000/blog/2014/04/14/%e7%94%a8sphinx%e5%bb%ba%e7%ab%8bmaindelta%e7%b4%a2%e5%bc%95%e4%b8%8b%e7%af%87/</link>
		<pubDate>Mon, 14 Apr 2014 05:16:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=688</guid>
		<description></description>
		<content:encoded><![CDATA[<div>在<a href="http://program.dengshilong.org/2014/04/14/用sphinx建立maindelta索引上篇/" target="_blank">上篇</a>中，我们介绍了一种建立主索引和增量索引的方法，这种方法有一种不足之处就是会改变主索引，因为每次增量索引都会与主索引合并成新的主索引。为此，我们可以想出另一种解决的办法，每次只改变增量索引，这就需要另外再建立一个临时索引。</div>
<div></div>
<div>
<div>这里只需要改变少量地方，一个是增量索引，另外还需新增一个临时索引，具体配置如下：</div>
<div>
<div>source srcdelta : srcmain{</div>
<div>        sql_query_pre = SET NAMES utf8</div>
<div>        sql_query_pre = SET SESSION query_cache_type=OFF</div>
<div>        sql_query = SELECT ID, post_title, post_content, UNIX_TIMESTAMP(post_modified) AS post_modified FROM wp_posts WHERE \</div>
<div>                post_status='publish' limit 0;</div>
<div>        sql_query_post_index =</div>
<div>}</div>
<div>source srcdelta_temp : srcmain {</div>
<div>        sql_query_pre = SET NAMES utf8</div>
<div>        sql_query_pre = SET SESSION query_cache_type=OFF</div>
<div>        sql_query_pre = SET @maxtsdelta:=NOW();</div>
<div>        sql_query_pre = UPDATE sphinx_helper SET delta_tmp_maxts=@maxtsdelta WHERE appid='blog_search';</div>
<div>        sql_query = SELECT ID, post_title, post_content, UNIX_TIMESTAMP(post_modified) AS post_modified FROM wp_posts WHERE \</div>
<div>                post_status='publish' AND post_modified &gt;= (SELECT main_maxts FROM sphinx_helper WHERE appid='blog_search')\</div>
<div>                AND post_modified &lt; @maxtsdelta;</div>
<div>        sql_query_post_index = UPDATE sphinx_helper SET delta_maxts=delta_tmp_maxts WHERE appid='blog_search';</div>
<div>}</div>
<div>index delta_temp : main{</div>
<div>        source = srcdelta_temp</div>
<div>        path = /home/long/sphinxforchinese/blog_search/var/data/delta_temp</div>
<div>}</div>
</div>
<div>实际上，我们是先建立一个空的增量索引，之后临时索引中的数据慢慢合并到增量索引中。在这里，增量索引很像上篇中的主索引，而临时索引则像上篇中的增量索引。</div>
<div>此时我们需要修改dist_blog_search,即增加临时索引</div>
<div>
<div>
<div>index dist_blog_search {</div>
<div>    type = distributed</div>
<div>    local = main</div>
<div>    local = delta</div>
<div>    local = delta_temp</div>
<div>    agent_connect_timeout = 1000</div>
<div>    agent_query_timeout = 3000</div>
</div>
<div>}</div>
</div>
<div>此后还需改变Shell脚本的内容</div>
<div>
<div>#!/bin/bash</div>
<div>baseDir=/home/long/sphinxforchinese/blog_search</div>
<div>conf=$baseDir/etc/main_delta_temp.conf</div>
<div>binDir=$baseDir/bin</div>
<div>cd $binDir</div>
<div>while [ true ]</div>
<div>do</div>
<div>        ./indexer -c $conf  --rotate --merge delta delta_temp</div>
<div>        if [ "$?" -eq "0" ]; then</div>
<div>                cat $baseDir/script/post_merge.sql | mysql -u root --password=123456 blog</div>
<div>                ./indexer -c $conf --rotate delta_temp</div>
<div>        fi</div>
<div>        sleep 60</div>
<div>done</div>
</div>
<div>事实上，改变的内容还是很少的。经过这样的改变，我们就无需再改变主索引了。第一次建立主索引后，就一直保持不变，变化的是增量索引。</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>688</wp:post_id>
		<wp:post_date><![CDATA[2014-04-14 13:16:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-14 05:16:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8sphinx%e5%bb%ba%e7%ab%8bmaindelta%e7%b4%a2%e5%bc%95%e4%b8%8b%e7%af%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="post_tag" nicename="%e4%b8%b4%e6%97%b6%e7%b4%a2%e5%bc%95"><![CDATA[临时索引]]></category>
		<category domain="post_tag" nicename="%e5%a2%9e%e9%87%8f%e7%b4%a2%e5%bc%95"><![CDATA[增量索引]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791181]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>用Sphinx提供的klist处理文章更新和删除</title>
		<link>http://127.0.0.1:8000/blog/2014/04/14/%e7%94%a8sphinx%e6%8f%90%e4%be%9b%e7%9a%84klist%e5%a4%84%e7%90%86%e6%96%87%e7%ab%a0%e6%9b%b4%e6%96%b0%e5%92%8c%e5%88%a0%e9%99%a4/</link>
		<pubDate>Mon, 14 Apr 2014 05:18:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=691</guid>
		<description></description>
		<content:encoded><![CDATA[在前面的介绍中，都没有处理更新和删除问题，这里有必要说说。在<a href="http://program.dengshilong.org/2014/04/11/关于sphinx引擎的一些想法/" target="_blank">关于sphinx引擎的一些想法</a>中说过公司所用的引擎中，处理更新和删除的办法是在索引中增加一个属性来标志这条记录是否失效，每次做增量时，就要去主索引和增量索引中更改相应id的属性值，这确实可以解决问题。不过并不是一个很好的解决办法，Sphinx的作者也说过这种方法既麻烦又容易出错。既然有更新和删除这个需求，必然会提供解决的办法，这个办法就是kilst。所谓的klist，就是kill list,按照字面理解，就是删除列表。我们只需要在增量索引中保存一个id列表，搜索时，如果在主索引中搜到相关文档，而文档的id存在于增量索引的id列表中，则这个文档将被丢弃。

这里有一个需要注意的是，当文章被删除时，仅仅通过增量抓取，在增量索引中并不能知道主索引中哪一个文档被删除了，所以这就必须在表中文档被删除时，能够记录下被删除的id，这就需要用到触发器，也需要建立一个辅助表来保存这些id。辅助表的建立如下：
<div>create table sphinxklist(</div>
<div>        id integer not null,</div>
<div>        ts timestamp not null</div>
<div>);</div>
触发器的建立如下：
<div>DELIMITER //</div>
<div>CREATE TRIGGER sphinx_kill</div>
<div>AFTER DELETE ON wp_posts</div>
<div>FOR EACH ROW</div>
<div>BEGIN</div>
<div>        INSERT INTO sphinxklist VALUES (OLD.ID, NOW());</div>
<div>END</div>
<div>//</div>
有了这些准备工作后，我们就可以使用klist了，事实上在之前的配置文件的基础上，只需要修改一点点内容就好了。首先修改主索引
<div>source srcmain : base{</div>
<div>        sql_query_pre = SET NAMES utf8</div>
<div>        sql_query_pre = SET SESSION query_cache_type=OFF</div>
<div>        sql_query_pre = UPDATE sphinx_helper SET main_tmp_maxts=NOW() WHERE appid='blog_search';</div>
<div>        sql_query = \</div>
<div>                SELECT ID, post_title, post_content, UNIX_TIMESTAMP(post_modified) AS post_modified FROM wp_posts WHERE \</div>
<div>                        post_status='publish' AND post_modified &lt; (SELECT main_tmp_maxts FROM sphinx_helper WHERE appid='blog_search');</div>
<div>        sql_query_post_index = UPDATE sphinx_helper SET main_maxts=main_tmp_maxts WHERE appid='blog_search';</div>
<div>        sql_query_post_index = DELETE FROM sphinxklist WHERE ts &lt; (SELECT main_maxts FROM sphinx_helper WHERE appid='blog_search');</div>
<div>        sql_attr_timestamp = post_modified</div>
<div>        sql_field_string = post_title</div>
<div>}</div>
可以看到，相对于之前的配置，这里只添加了一行
sql_query_post_index = DELETE FROM sphinxklist WHERE ts &lt; (SELECT main_maxts FROM sphinx_helper WHERE appid='blog_search');
添加这行是为了防止之前运行引擎时留下的id再次被使用。
之后修改临时索引：
<div>source srcdelta_temp : srcmain {</div>
<div>        sql_query_pre = SET NAMES utf8</div>
<div>        sql_query_pre = SET SESSION query_cache_type=OFF</div>
<div>        sql_query_pre = SET @maxtsdelta:=NOW();</div>
<div>        sql_query_pre = UPDATE sphinx_helper SET delta_tmp_maxts=@maxtsdelta WHERE appid='blog_search';</div>
<div>        sql_query = SELECT ID, post_title, post_content, UNIX_TIMESTAMP(post_modified) AS post_modified FROM wp_posts WHERE \</div>
<div>                post_status='publish' AND post_modified &gt;= (SELECT main_maxts FROM sphinx_helper WHERE appid='blog_search')\</div>
<div>                AND post_modified &lt; @maxtsdelta;</div>
<div>        sql_query_killlist = SELECT ID FROM wp_posts WHERE post_modified &gt;= (SELECT main_maxts FROM sphinx_helper WHERE \</div>
<div>                appid='blog_search') AND post_modified &lt; @maxtsdelta UNION SELECT id FROM sphinxklist;</div>
<div>        sql_query_post_index = UPDATE sphinx_helper SET delta_maxts=delta_tmp_maxts WHERE appid='blog_search';</div>
<div>}</div>
也只是添加了一行，也就是将这次抓取的id与sphinxlist中的id合并。
之后还需要修改Shell脚本
<div>#!/bin/bash</div>
<div>baseDir=/home/long/sphinxforchinese/blog_search</div>
<div>conf=$baseDir/etc/blog_search.conf</div>
<div>binDir=$baseDir/bin</div>
<div>cd $binDir</div>
<div>while [ true ]</div>
<div>do</div>
<div>        #./indexer -c $conf --merge-klists --rotate --merge delta deltaTemp</div>
<div>        ./indexer -c $conf  --merge-klists --rotate --merge delta delta_temp</div>
<div>        if [ "$?" -eq "0" ]; then</div>
<div>                cat $baseDir/script/post_merge.sql | mysql -u root --password=123456 blog</div>
<div>                ./indexer -c $conf --rotate delta_temp</div>
<div>        fi</div>
<div>        sleep 60</div>
<div>done</div>
这个脚本相对于原来的只增加了--merge-klists这个参数，这个参数的意义是，将delta_temp合并到delta时，并不会删除delta的klist,而是将delta_temp的klist和delta的klist合并，这正是我们想要的。经过这样的变化，一个可以处理更新和删除的main+delta索引就建好了。

感谢Sphinx团队，感谢Sphinx-for-chinese团队，给我们提供了一个这么好用的开源引擎。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>691</wp:post_id>
		<wp:post_date><![CDATA[2014-04-14 13:18:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-14 05:18:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%94%a8sphinx%e6%8f%90%e4%be%9b%e7%9a%84klist%e5%a4%84%e7%90%86%e6%96%87%e7%ab%a0%e6%9b%b4%e6%96%b0%e5%92%8c%e5%88%a0%e9%99%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="klist"><![CDATA[Klist]]></category>
		<category domain="post_tag" nicename="klists"><![CDATA[Klists]]></category>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="post_tag" nicename="%e5%88%a0%e9%99%a4"><![CDATA[删除]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e6%9b%b4%e6%96%b0"><![CDATA[更新]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791182]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sphinx使用一元分词</title>
		<link>http://127.0.0.1:8000/blog/2014/04/14/sphinx%e4%bd%bf%e7%94%a8%e4%b8%80%e5%85%83%e5%88%86%e8%af%8d/</link>
		<pubDate>Mon, 14 Apr 2014 05:19:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=694</guid>
		<description></description>
		<content:encoded><![CDATA[之前说过用Sphinx给同事搭建搜索服务，可是他提了一个要求，也就是文本中有牛皮癣这个词，搜牛皮时也要能搜到牛皮癣，这个要求在经过分词后是不可以完成的。于是只好去寻求一元分词和二元分词的办法。
<div>在http://lutaf.com/157.htm这里看到，“ sphinx只要把min_word_len设置为1,并配置charset_table,默认就是单字切分 ”于是试着配置，结果不行。于是只好看文档，在文档中找到，默认情况下，Sphinx已经支持一元分词。</div>
<div>只需设置</div>
<div>charset_type = utf-8 ，</div>
<div> ngram_len = 1，</div>
<div>ngram_chars = U+3000..U+2FA1F</div>
<div>这样，再次搜牛皮时，就可以搜到牛皮癣了。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>694</wp:post_id>
		<wp:post_date><![CDATA[2014-04-14 13:19:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-14 05:19:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sphinx%e4%bd%bf%e7%94%a8%e4%b8%80%e5%85%83%e5%88%86%e8%af%8d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="post_tag" nicename="%e4%b8%80%e5%85%83%e5%88%86%e8%af%8d"><![CDATA[一元分词]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791183]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>追踪query too complex not enough stack错误</title>
		<link>http://127.0.0.1:8000/blog/2014/04/24/%e8%bf%bd%e8%b8%aaquery-too-complex-not-enough-stack%e9%94%99%e8%af%af/</link>
		<pubDate>Thu, 24 Apr 2014 13:37:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=702</guid>
		<description></description>
		<content:encoded><![CDATA[很早之前，在使用Sphinx搭建搜索服务时，遇到这个问题，到Sphinx for Chinese的群里请教，没有得到满意的答案，于是将sql_query_info 这个选项注释掉，就没有报错了。今天正好有时间，于是着手找到这个问题的症结，也算是为Sphinx做点贡献。

打开源代码，才发现用的是匈牙利命名法，看得不爽。也许因为没有Lucene那么出名，只有两个人在维护这个项目，代码里到处充斥这Fix Me,还好结构还算精良，要不然真不知道从和看起。本来想用GDB调试的，还不太熟练，于是就只好用最原始的printf输出。经过缩小范围，找到了一些蛛丝马迹，
在search.cpp中  的第331附近，主要的查询工作就在这里完成的，跳转过去之后
 if ( !pIndex->MultiQuery ( &tQuery, pResult, 1, &pTop, NULL ) )
锁定了到下面这个函数
在sphinx.cpp中 17301 if ( !sphCheckQueryHeight ( tParsed.m_pRoot, pResult->m_sError ) )
继续跳转，到了下面这行
在sphinx.cpp中 16404 int64_t iQueryStack = sphGetStackUsed() + iHeight*SPH_EXTNODE_STACK_SIZE;
输出之后，发现问题出在sphGetStackUsed这个函数里
在sphinxstd.cpp 中  1218行 int64_t sphGetStackUsed()
继续跳转，
sphinxstd.cpp 中  1221行
BYTE cStack;
 BYTE * pStackTop = (BYTE*)sphMyStack();
线程栈的使用大小就是上面两个值的差，继续查找
在sphinxstd.cpp return sphThreadGet ( g_tMyThreadStack );

这里用到了线程私有数据，看到私有数据的设置还是很正常，所以依然不知道哪里出了问题。于是索性将
int64_t iQueryStack = sphGetStackUsed() + iHeight*SPH_EXTNODE_STACK_SIZE;
这行改成
int64_t iQueryStack =  iHeight*SPH_EXTNODE_STACK_SIZE;
这样sql_query_info就可以使用了，也不会再报query too complex not enough stack错误。
可是这个自己查询得到的中文显示出来都是乱码，我认为是没有设置SET NAMES utf8的原因，但又无法在sql_query_info这里添加这句。虽然在sql_query_pre = SET NAMES utf8已经设置了，但是因为不是同一个查询连接，所以无效。

所以最终我得到解决这个错误的结论，那就是注释掉sql_query_info这个选项。最坑人的是，官方的示例中是开启这个选项的。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>702</wp:post_id>
		<wp:post_date><![CDATA[2014-04-24 21:37:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-24 13:37:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bf%bd%e8%b8%aaquery-too-complex-not-enough-stack%e9%94%99%e8%af%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="post_tag" nicename="sql_query_info"><![CDATA[sql_query_info]]></category>
		<category domain="post_tag" nicename="%e5%8c%88%e7%89%99%e5%88%a9"><![CDATA[匈牙利]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791184]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>shell的一些特殊变量</title>
		<link>http://127.0.0.1:8000/blog/2014/04/27/shell%e7%9a%84%e4%b8%80%e4%ba%9b%e7%89%b9%e6%ae%8a%e5%8f%98%e9%87%8f/</link>
		<pubDate>Sun, 27 Apr 2014 14:44:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=707</guid>
		<description></description>
		<content:encoded><![CDATA[有些时候，想让脚步运行在后台中，而且只存在一个这样的脚步，这时一种可行的方法是将脚步的运行的进程ID写在一个文件中，当再次运行这个脚步时，去读取这个文件，读出ID，如果这个ID有进程在运行，就退出。这时需要知道进程ID，而在shell中，它是一个特殊变量，也就是$$.当运行shell脚步时，$$就是输出进程ID。

而有些时候，在shell中会编写一些函数，并返回结果，这是需要一个变量保存函数运行结果。这个变量就是$?.

而又有些时候，在shell中想知道运行脚步的名字，这个变量就是$0.

还有许多很有用的特殊变量，只是我不知道还有哪些。google之后可以知道，只是很好奇的是，这些人是怎么知道这些变量的呢？]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>707</wp:post_id>
		<wp:post_date><![CDATA[2014-04-27 22:44:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-27 14:44:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shell%e7%9a%84%e4%b8%80%e4%ba%9b%e7%89%b9%e6%ae%8a%e5%8f%98%e9%87%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="112"><![CDATA[$?]]></category>
		<category domain="post_tag" nicename="111"><![CDATA[$$]]></category>
		<category domain="post_tag" nicename="0"><![CDATA[$0]]></category>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="%e7%89%b9%e6%ae%8a%e5%8f%98%e9%87%8f"><![CDATA[特殊变量]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791185]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TCP建立连接时的三次握手</title>
		<link>http://127.0.0.1:8000/blog/2014/04/28/tcp%e5%bb%ba%e7%ab%8b%e8%bf%9e%e6%8e%a5%e6%97%b6%e7%9a%84%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b/</link>
		<pubDate>Sun, 27 Apr 2014 23:57:35 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=710</guid>
		<description></description>
		<content:encoded><![CDATA[TCP建立连接时一般要发送三次包，也就是俗称的三次握手。首先客户端向服务器端发送一个建立连接请求，告诉服务器自己的序列号；服务器收到这个请求包后，进行确认，同时告诉客户端自己的序列号；之后客户端对这个包进行确认。如果一切正常，三次握手就已经完成。

在网络状况不好的时候，如果在发送的过程中任意一个包丢失会怎样呢？

首先来看看第一个包。这种情况显而易见，如果客户端建立连接的请求包丢失，那么服务器端根本不知道有这么一个请求，客户端只有重新发送这个包。

再来看看第二个包。这种情况也是显而易见，如果服务器的确认包丢失，那么客户端无法知道服务器是否收到这个请求，此时服务器端必须再次发送这个确认包。

最后来看看第三个包。这种情况就不是那么显而易见了。如果客户端的确认包丢失，一个明显的解决办法是客户端再次发送这个确认包，然而这是不可行的，因为即使再次发送，客户端依然不知道服务器端是否收到这个确认包。解决的办法是服务器端再次发送三次握手的第二个包。这样就可以说明服务器端没有收到客户端的确认包，所以它需要再次发送第二个包，当客户端再次收到这个包时，也就知道自己此前发送的确认包丢失了，于是再次发送确认包。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>710</wp:post_id>
		<wp:post_date><![CDATA[2014-04-28 07:57:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-04-27 23:57:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[tcp%e5%bb%ba%e7%ab%8b%e8%bf%9e%e6%8e%a5%e6%97%b6%e7%9a%84%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="tcp"><![CDATA[TCP]]></category>
		<category domain="post_tag" nicename="%e4%b8%89%e6%ac%a1%e6%8f%a1%e6%89%8b"><![CDATA[三次握手]]></category>
		<category domain="category" nicename="network"><![CDATA[网络编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791186]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>解决Error: searchd error: offset out of bounds问题</title>
		<link>http://127.0.0.1:8000/blog/2014/05/06/%e8%a7%a3%e5%86%b3error-searchd-error-offset-out-of-bounds%e9%97%ae%e9%a2%98/</link>
		<pubDate>Tue, 06 May 2014 11:42:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=716</guid>
		<description></description>
		<content:encoded><![CDATA[因为项目需要用到分页功能，所以需要用到SetLimits函数，结果就出现了Error: searchd error: offset out of bounds (offset=9500, max_matches=1000)

于是找原因，发现配置文件中有max_matches这个选项，于是将它改为10000,可是依然出现Error: searchd error: offset out of bounds (offset=9500, max_matches=1000)错误，真是莫名其妙的错误，仔细看了SetLimits的函数说明以及SphinxClient.java,才知道使用SetLimits这个函数时，如果没有提供max_matches这个参数的值，则max_matches默认为1000,而9500超过了1000,所以溢出了。

现在终于明白原因，也就是说使用Sphinx一共可以在两个地方设置max_matches,一个是在searchd,也就是引擎端，提供给searchd的配置文件中进行设置；而在SphinxClient中,也就是客户端，如果在SetLimits函数中没有设置max_matches,则默认使用1000.这里有一点需要注意的是，客户端的max_matches一定要小于服务器端，否则会报错。而offset也一定要小于客户端的max_matches,这样offset才不会溢出。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>716</wp:post_id>
		<wp:post_date><![CDATA[2014-05-06 19:42:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-06 11:42:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a7%a3%e5%86%b3error-searchd-error-offset-out-of-bounds%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="max_matches"><![CDATA[max_matches]]></category>
		<category domain="post_tag" nicename="setlimits"><![CDATA[SetLimits]]></category>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791187]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>金融学公开课结业</title>
		<link>http://127.0.0.1:8000/blog/2014/05/11/%e9%87%91%e8%9e%8d%e5%ad%a6%e5%85%ac%e5%bc%80%e8%af%be%e7%bb%93%e4%b8%9a/</link>
		<pubDate>Sun, 11 May 2014 10:12:34 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=719</guid>
		<description></description>
		<content:encoded><![CDATA[经过三个月的时间，金融学公开课终于告一个段落了。两年之前就选修过这门课，可是当时由于时间问题，还是未能完成，一直心有不甘。现在工作之后，腾出周末的时间选修了这门课，所以想好好学完这门课。

这门课整体来说难度不大，只有到了统计部分才发现有点难度，这时也才知道以前学的数理统计还是有用的，可是我已经忘的差不多了。幸亏Gautam Kaul教导有方，对这部分总算有个了解。

我的感悟是，学习的过程最重要还是要做笔记和练习，否则太容易忘记了，即便是当时已经弄懂了，过了很久之后，还是会忘记当初的想法，就像现在，即使已经学完了，很多内容又忘的差不多了，真是可恶。可是有一点还是不能忘记的，那就是价值的创造是来自于伟大的想法，而金融运作并不创造价值。

下面是自己用Python写的一些函数，还是很实用的。

[python]
def pv(rate,nper,pmt,fv=0):
     v = pmt * (( 1 + rate) ** nper - 1) / rate / ( (1 + rate) ** nper)
     v += fv / ((1 + rate) ** nper)
     return v
def pmt(rate,nper,pv,fv=0):
     p = pv * ((1 + rate) ** nper ) * rate / ((1 + rate) ** nper - 1)
     p += fv * rate / ((1 + rate) ** nper - 1)
     return p
def fv(rate,nper,pmt,pv=0):
    v = pmt * ((1 + rate) ** nper - 1) / rate
    v += pv / ((1 + rate) ** nper)
    return v
def paf(r,n,g):
    return 1.0 / (r - g) * (1 - (1 + g) ** n / (1 + r) **n)
[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>719</wp:post_id>
		<wp:post_date><![CDATA[2014-05-11 18:12:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-11 10:12:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%87%91%e8%9e%8d%e5%ad%a6%e5%85%ac%e5%bc%80%e8%af%be%e7%bb%93%e4%b8%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%85%ac%e5%bc%80%e8%af%be"><![CDATA[公开课]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<category domain="post_tag" nicename="%e9%87%91%e8%9e%8d%e5%ad%a6"><![CDATA[金融学]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791188]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>smarty使用的注意点</title>
		<link>http://127.0.0.1:8000/blog/2014/05/15/smarty%e4%bd%bf%e7%94%a8%e7%9a%84%e6%b3%a8%e6%84%8f%e7%82%b9/</link>
		<pubDate>Thu, 15 May 2014 14:09:11 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=727</guid>
		<description></description>
		<content:encoded><![CDATA[因为不会写MVC，所以只好使用模版，而在PHP中，一般使用Smarty.以下是自己在使用过程中，遇到的一些问题，以及需要注意的地方。

1.一般评论都是通过一个textarea输入，在显示的时候需要将换行幅\n替换成标签,当尝试使用replace : '\n' : '&lt;br/&gt;''时，一直不可行，后来才知道，原来有nl2br这个函数。

2.对于使用addslashes过滤的内容，则需要使用stripslashes将添加的\去掉。

3.对于left_delimiter和right_delimiter的选择，我的经验是{{和}}比较好，对于&lt;{和}&gt;最好不用，否则会遇到很多问题。

4. 使用判断语句如{{if}} {{elseif}} {{else}} {{/if}}时，千万不能在{{和关键字中留出空格，否则会出错。如写成{{ /if }} {{ else }}这些都会出错.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>727</wp:post_id>
		<wp:post_date><![CDATA[2014-05-15 22:09:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-15 14:09:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[smarty%e4%bd%bf%e7%94%a8%e7%9a%84%e6%b3%a8%e6%84%8f%e7%82%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="smarty"><![CDATA[smarty]]></category>
		<category domain="post_tag" nicename="%e6%8d%a2%e8%a1%8c"><![CDATA[换行]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791189]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>收到金融学结业证书</title>
		<link>http://127.0.0.1:8000/blog/2014/05/25/%e6%94%b6%e5%88%b0%e9%87%91%e8%9e%8d%e5%ad%a6%e7%bb%93%e4%b8%9a%e8%af%81%e4%b9%a6-2/</link>
		<pubDate>Sun, 25 May 2014 03:14:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=733</guid>
		<description></description>
		<content:encoded><![CDATA[今天收到了金融学的结业证书，心中的一个结也解开了。两年前就选修这门课，可是由于时间因素，没有学完，心中一直耿耿于怀。今年抽空把这么课学完，并拿到了结业证书。

事实上，学完之后，很多知识又忘记了。可是上完这么课后，我知道了，股票是一个好东西。

<a href="http://program.dengshilong.org/wp-content/uploads/2014/05/金融学结业证书.png"><img class="alignnone size-full wp-image-734" src="http://program.dengshilong.org/wp-content/uploads/2014/05/金融学结业证书.png" alt="金融学结业证书" width="816" height="762" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>733</wp:post_id>
		<wp:post_date><![CDATA[2014-05-25 11:14:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-25 03:14:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%94%b6%e5%88%b0%e9%87%91%e8%9e%8d%e5%ad%a6%e7%bb%93%e4%b8%9a%e8%af%81%e4%b9%a6-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<category domain="post_tag" nicename="%e8%82%a1%e7%a5%a8"><![CDATA[股票]]></category>
		<category domain="post_tag" nicename="%e9%87%91%e8%9e%8d%e5%ad%a6"><![CDATA[金融学]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791190]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>登陆框获取焦点</title>
		<link>http://127.0.0.1:8000/blog/2014/05/26/%e7%99%bb%e9%99%86%e6%a1%86%e8%8e%b7%e5%8f%96%e7%84%a6%e7%82%b9/</link>
		<pubDate>Sun, 25 May 2014 16:46:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=738</guid>
		<description></description>
		<content:encoded><![CDATA[在登陆后台的时候，要输入用户名和密码，此时希望打开页面，焦点就直接停留在用户名输入框，这样就可以省去移动鼠标的麻烦。

如以下一个登陆表单。

[html]
&lt;form action=&quot;login.php&quot; method=&quot;post&quot; name=&quot;login&quot;&gt;
    用户名：&lt;input name=&quot;username&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;
    密码：&lt;input name=&quot;password&quot; type=&quot;password&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;登陆&quot; /&gt;
&lt;/form&gt;
[/html]

此时可以编写如下javascript:

[javascript]
window.onload = function() {
    if (document.forms.login.username.value == &quot;&quot;) {
        document.forms.login.username.focus();
    } else {
        document.forms.login.password.focus();
    }
}
[/javascript]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>738</wp:post_id>
		<wp:post_date><![CDATA[2014-05-26 00:46:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-25 16:46:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%99%bb%e9%99%86%e6%a1%86%e8%8e%b7%e5%8f%96%e7%84%a6%e7%82%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="html"><![CDATA[html]]></category>
		<category domain="category" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="javascript-2"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="%e7%84%a6%e7%82%b9"><![CDATA[焦点]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791191]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>find查找目录下的所有shell脚本</title>
		<link>http://127.0.0.1:8000/blog/2014/05/27/find%e6%9f%a5%e6%89%be%e7%9b%ae%e5%bd%95%e4%b8%8b%e7%9a%84%e6%89%80%e6%9c%89shell%e8%84%9a%e6%9c%ac/</link>
		<pubDate>Tue, 27 May 2014 05:47:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=750</guid>
		<description></description>
		<content:encoded><![CDATA[使用命令find . -name *.sh查找当前目录下的所有shell脚本，提示find: 路径必须在表达式之前

之后改成find . -name "*.sh",可行。find结合sed就可以将需要的文件进行替换。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>750</wp:post_id>
		<wp:post_date><![CDATA[2014-05-27 13:47:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-27 05:47:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[find%e6%9f%a5%e6%89%be%e7%9b%ae%e5%bd%95%e4%b8%8b%e7%9a%84%e6%89%80%e6%9c%89shell%e8%84%9a%e6%9c%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="find"><![CDATA[find]]></category>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="shell"><![CDATA[shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791192]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sed替换文件内容</title>
		<link>http://127.0.0.1:8000/blog/2014/05/27/sed%e6%9b%bf%e6%8d%a2%e6%96%87%e4%bb%b6%e5%86%85%e5%ae%b9/</link>
		<pubDate>Tue, 27 May 2014 05:55:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=752</guid>
		<description></description>
		<content:encoded><![CDATA[使用sed -i 's/text/test/' *.sh将当前目录下(不包括子目录)，所有shell脚本的text替换为test, 其中-i参数是指示需要进行文件内替换，也就是改变文件的内容。

如果需要将子目录的也替换，则可以与find命令结合使用,使用sed -i 's/text/test/' `find . -name "*.sh"` 将当前目录下(包括子目录)，所有shell脚本的text替换为test,]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>752</wp:post_id>
		<wp:post_date><![CDATA[2014-05-27 13:55:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-27 05:55:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sed%e6%9b%bf%e6%8d%a2%e6%96%87%e4%bb%b6%e5%86%85%e5%ae%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="find"><![CDATA[find]]></category>
		<category domain="post_tag" nicename="sed"><![CDATA[sed]]></category>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="%e5%ad%90%e7%9b%ae%e5%bd%95"><![CDATA[子目录]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791193]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>无解的难题</title>
		<link>http://127.0.0.1:8000/blog/2014/06/21/%e6%97%a0%e8%a7%a3%e7%9a%84%e9%9a%be%e9%a2%98/</link>
		<pubDate>Sat, 21 Jun 2014 14:19:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=757</guid>
		<description></description>
		<content:encoded><![CDATA[知道这个题目，是在任晓祎的博客里，据悉是加德纳改编的。题目如下：

某天, 老师召集了他最聪明的两个学生P和S, 递给每人一张纸条, 然后说, 有两个不小于2的整数x和y,满足x != y, 且x+y &lt; 100. 给P的纸条上写有两个数的乘积p = x * y, 给S的纸条上写有两个数的和s = x+y, 请他们确定这两个数具体的值是多少. 于是P和S进行对话:
<ol>
	<li>P: 我无法确定这两个数是多少.</li>
	<li>S: 我知道你无法确定这两个数是多少.</li>
	<li>P: 既然这样, 那我知道这两个数是多少了.</li>
	<li>S: 既然这样, 那我也知道这两个数是多少了.</li>
</ol>
请读者根据以上信息确定这两个数是多少.

当时看到这个题目后，和绍祝师兄一起做这道题，同时告诉海龙同学。和师兄讨论后，知道了题意，于是着手写代码，师兄用C++，我用C，结果两人都没写出来。很快海龙同学就得到了一个答案，是用手算得到的。我和师兄两人都汗颜了，有趣的是，这个答案就是唯一解。

回顾这道题，理清题意,大致如下：

1.P:我无法确定这两个数是多少。从这里可以得到，乘积p的分解不只一种，如12，可以分解成2 * 6， 3 * 4。

2.S:我知道你无法确定这两个数是多少。从这里可以得到，和s的分解中，x和y得到的乘积的分解不只一种，所有分解都满足条件1.如s为11时,可以分成2 + 9, 3 + 8, 4 + 7, 5 + 6,其中2和9的乘积为18，可以分解成2 * 9, 3 * 6; 对于3和8，4和7，5和6也是类似。

3.P: 既然这样, 那我知道这两个数是多少了。从这里可以得到乘积p的所有分解中，只有一个分解满足条件2。如18，18可以分解成2 * 9, 3 * 6,只有2和9的和11满足条件2，3和6的乘积不满足条件2.类似的还有24，28.

4.S: 既然这样, 那我也知道这两个数是多少了. 从这里可以得到s的所有分解中只有一组满足条件3.所以11不满足这个条件,因为11的分解中2 + 9, 3 + 8, 4 + 7，分别得到的18，24，28都满足条件3.

对于这种题目，还是用Python写比较方便。写成代码如下：

[python]
#coding:utf-8
from math import sqrt

def pone(p, u):
    c = 0
    for x in xrange(2, int(sqrt(p)) + 1):
        if p % x == 0 and x + p / x &lt; u:
            c += 1
    return c &gt;= 2

def sone(s, u):
    for x in xrange(2, s / 2):
        y = s - x
        if not pone(x * y, u):
            return False
    return True

def ptwo(p, u):
    c = 0
    for x in xrange(2, int(sqrt(p)) + 1):
        if p % x == 0 and x + p / x &lt; u:
            y = p / x
            if sone(x + y, u):
                c += 1
    return c == 1
def stwo(s, u):
    c = 0
    for x in xrange(2, s / 2):
        y = s - x
        if ptwo(x * y, u):
            c += 1
    return c == 1

if __name__ == &quot;__main__&quot;:
    u = 100
    for x in xrange(2, u / 2):
        for y in xrange(x + 1, u - x):
            p = x * y
            s = x + y
            if pone(p, u) and sone(s, u) and ptwo(p, u) and stwo(s, u):
                print &quot;x:%d, y:%d, p:%d, s:%d &quot; % (x, y, p, s)
[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>757</wp:post_id>
		<wp:post_date><![CDATA[2014-06-21 22:19:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-21 14:19:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%97%a0%e8%a7%a3%e7%9a%84%e9%9a%be%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8a%a0%e5%be%b7%e7%ba%b3"><![CDATA[加德纳]]></category>
		<category domain="category" nicename="math"><![CDATA[数学]]></category>
		<category domain="post_tag" nicename="%e6%97%a0%e8%a7%a3%e7%9a%84%e9%9a%be%e9%a2%98"><![CDATA[无解的难题]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791194]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django生产环境静态资源配置</title>
		<link>http://127.0.0.1:8000/blog/2014/06/22/django%e7%94%9f%e4%ba%a7%e7%8e%af%e5%a2%83%e9%9d%99%e6%80%81%e8%b5%84%e6%ba%90%e9%85%8d%e7%bd%ae/</link>
		<pubDate>Sat, 21 Jun 2014 16:17:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=760</guid>
		<description></description>
		<content:encoded><![CDATA[在开发环境中，使用Django自带的server,css这些静态资源都能够找到，可是用了gunicorn后,就找不到css等静态资源了，不知道如何是好，只记得之前看到在什么地方提到开发环境和生产环境是存在一些差异的。问过志容，志容说是要配置Nginx，可是我用gunicorn,根本都没有通过nginx。

今天正好看文档，正好看到，于是记下来。在https://docs.djangoproject.com/en/dev/howto/static-files/这个页面里有说到如何设置。
<ul>
	<li>
<p class="first">Set the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-STATIC_ROOT"><tt class="xref std std-setting docutils literal"><span class="pre">STATIC_ROOT</span></tt></a> setting to the directory from which you’d like to serve these files, for example:</p>

<div class="highlight-python">
<div class="highlight">
<pre><span class="n">STATIC_ROOT</span> <span class="o">=</span> <span class="s">"/var/www/example.com/static/"</span>
</pre>
</div>
</div></li>
	<li>
<p class="first">Run the <a class="reference internal" href="https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#django-admin-collectstatic"><tt class="xref std std-djadmin docutils literal"><span class="pre">collectstatic</span></tt></a> management command:</p>

<div class="highlight-python">
<pre>$ python manage.py collectstatic</pre>
</div></li>
</ul>
为了避免硬编码，将STATIC_ROOT设置为os.path.join(BASE_DIR, 'static')后，

运行python manage.py collectstatic即可]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>760</wp:post_id>
		<wp:post_date><![CDATA[2014-06-22 00:17:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-21 16:17:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[django%e7%94%9f%e4%ba%a7%e7%8e%af%e5%a2%83%e9%9d%99%e6%80%81%e8%b5%84%e6%ba%90%e9%85%8d%e7%bd%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="%e9%9d%99%e6%80%81%e8%b5%84%e6%ba%90"><![CDATA[静态资源]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791195]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django后台添加markdown编辑器</title>
		<link>http://127.0.0.1:8000/blog/2014/06/22/django%e5%90%8e%e5%8f%b0%e6%b7%bb%e5%8a%a0markdown%e7%bc%96%e8%be%91%e5%99%a8/</link>
		<pubDate>Sun, 22 Jun 2014 08:42:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=765</guid>
		<description></description>
		<content:encoded><![CDATA[在论坛和网上找了一下，发现django-pagedown可以满足需求，搜索之后，按照https://pypi.python.org/pypi/django-pagedown/0.1.0进行添加。

首先是安装
1. Get the code: `pip install django-pagedown`
2. Add `pagedown` to your `INSTALLED_APPS`
3. Make sure to collect the static files: `python manage.py collectstatic --noinput`

1.首先pip install django-pagedown下载

2.之后添加pagedown到项目的'INSTALLED_APPS‘中，

3.执行命令python manage.py collectstatic --noinput，收集js,css等django-pagedown用到的静态文件。

之后开始添加，我的博客是在blog目录下,在目录里创建forms.py,添加如下内容

[python]
from pagedown.widgets import AdminPagedownWidget
from django import forms
from blog.models import Post

class PostForm(forms.ModelForm):
        content = forms.CharField(widget=AdminPagedownWidget())

        class Meta:
            model = Post
[/python]

这里是将content字段设置为markdown编辑，之后在admin.py中添加如下内容：
[python]
from django.contrib import admin
from blog.models import Post
from blog.forms import PostForm
class PostAdmin(admin.ModelAdmin):
    form = PostForm
admin.site.register(Post, PostAdmin)
[/python]
搞定。这样之后，在编辑content时，在它的下方就会有一个markdown的解析成HTML的结果。这里，我在数据库中只保存了markdown的原始内容，显示时还需要将它解析成HTML，这个另外再说。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>765</wp:post_id>
		<wp:post_date><![CDATA[2014-06-22 16:42:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-22 08:42:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[django%e5%90%8e%e5%8f%b0%e6%b7%bb%e5%8a%a0markdown%e7%bc%96%e8%be%91%e5%99%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="markdown"><![CDATA[markdown]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791196]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sphinx-for-Chinese的分词细粒度问题</title>
		<link>http://127.0.0.1:8000/blog/2014/06/28/sphinx-for-chinese%e7%9a%84%e5%88%86%e8%af%8d%e7%bb%86%e7%b2%92%e5%ba%a6%e9%97%ae%e9%a2%98/</link>
		<pubDate>Sat, 28 Jun 2014 14:31:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=769</guid>
		<description></description>
		<content:encoded><![CDATA[假如使用Sphinx来做搜索引擎，就一定会遇到分词问题。对于中文，有两个选择，选择1是使用Sphinx自带的一元分词，选择2是使用CoreSeek或者Sphinx-for-Chinese，这两个都使用了mmseg来进行分词。据我了解,CoreSeek在支持细粒度的分词，而Sphinx-for-Chinese不支持。而公司使用的是Sphinx-for-Chinese,所以就遇到了分词的粒度问题。

根据产品人员的反馈，有许多这样的例子。例如搜索西海或者海岸时，搜不到大华西海岸酒店，搜索兵马俑时，搜不到秦始皇兵马俑博物馆,搜索肯尼亚时搜不到肯尼亚山。这都是因为Sphinx-for-Chinese使用mmseg得到最优结果后，就不在进行细分的结果。拿大华西海岸酒店这个例子来说，词典里有大华，西海岸，酒店，华西，西海，海岸这些词，根据mmseg得到的最优分词结果，分成大华+西海岸+酒店，这个分词的结果也是正确的，可是搜索西海，海岸就搜不到它的。问过Sphinx-for-Chinese的开发人员后，要想支持更细粒度的分词，只有修改源码。

在组长划出一条线，需要在哪一部分代码后，一个最简单的想法是，对于mmseg中每一步得到的最优结果，都进行更细粒度的划分。例如上面的例子，对于西海岸进行更细粒度划分后，就可以得到西海和海岸，这样搜索西海和海岸时，就可以搜索到。于是立马动手写，折腾一个上午后，果然可以搜到了，这样就达到了同城旅游中酒店搜索的效果了。可是搜索华西还是搜不到，而携程则可以搜到，在携程里，搜索西也可以搜到它。仔细考虑后，在原来的代码里只需要很少的修改就可以做到搜索华西是也可以搜到它，搜索效果已经超过了同程旅游。在增加单字索引后，搜索效果和携程相当接近。

相信许多使用Sphinx-for-Chinese都会遇到类似的问题，也都将用各自的办法解决这个问题。这里将这一部分代码开源，也算是对开源事业的一点点贡献。事实上，需要修改的地方并不是很多。这里我使用的是sphinx-for-chinese-2.2.1-dev-r4311版本,相信其它版本也可以进行类似的修改。需要修改的文件只有一个，那就是sphinx.cpp。

在2244行附近，class CSphTokenizer_UTF8Chinese : public CSphTokenizer_UTF8_Base这个类中,增加以下数据成员
[c]
int m_totalParsedWordsNum; //总共得到的分词结果
int m_processedParsedWordsNum; //已经处理的分词个数
int m_isIndexer; //标示是否是indexer程序
bool m_needMoreParser; //标示是否需要更细粒度分词
const char * m_pTempCur; //标示在m_BestWord中的位置
char m_BestWord[3 * SPH_MAX_WORD_LEN + 3]; //记录使用mmseg得到的最优分词结果
int m_iBestWordLength; //最优分词结果的长度
[/c]

在6404行附近CSphTokenizer_UTF8Chinese&lt;IS_QUERY&gt;::CSphTokenizer_UTF8Chinese ()这个构造函数中，增加以下语句进行初始化。
[c]
 char *penv = getenv(&quot;IS_INDEXER&quot;);
        if (penv != NULL) {
                m_isIndexer = 1;
        } else {
                m_isIndexer = 0;
        }
        m_needMoreParser = false;
[/c]
在6706行附近BYTE * CSphTokenizer_UTF8Chinese&lt;IS_QUERY&gt;::GetToken ()函数中int iNum;语句后面增加如下语句
[c]
       if(m_isIndexer &amp;&amp; m_needMoreParser) { //对最优结果进行进一步细分
                while (m_pTempCur &lt; m_BestWord + m_iBestWordLength) {
                        if(m_processedParsedWordsNum == m_totalParsedWordsNum) {
                                size_t minWordLength = m_pResultPair[0].length;
                                for(int i = 1; i &lt; m_totalParsedWordsNum; i++) {
                                        if(m_pResultPair[i].length &lt; minWordLength) {
                                                minWordLength = m_pResultPair[i].length;
                                        }
                                }
                                m_pTempCur += minWordLength;
                                m_pText=(Darts::DoubleArray::key_type *)(m_pCur + (m_pTempCur - m_BestWord));
                                iNum = m_tDa.commonPrefixSearch(m_pText, m_pResultPair, 256, m_pBufferMax-(m_pCur+(m_pTempCur-m_Best
Word)));
                                m_totalParsedWordsNum = iNum;
                                m_processedParsedWordsNum = 0;
                        } else {
                                iWordLength = m_pResultPair[m_processedParsedWordsNum].length;
                                m_processedParsedWordsNum++;
                                if (m_pTempCur == m_BestWord &amp;&amp; iWordLength == m_iBestWordLength) { //是最优分词结果,跳过
                                        continue;
                                }
                                memcpy(m_sAccum, m_pText, iWordLength);
                                m_sAccum[iWordLength]='&#92;&#48;';

                                m_pTokenStart = m_pCur + (m_pTempCur - m_BestWord);
                                m_pTokenEnd = m_pCur + (m_pTempCur - m_BestWord) + iWordLength;
                                return m_sAccum;
                        }
                }
                m_pCur += m_iBestWordLength;
                m_needMoreParser = false;
                iWordLength = 0;
        }
[/c]
在 iNum = m_tDa.commonPrefixSearch(m_pText, m_pResultPair, 256, m_pBufferMax-m_pCur);语句后面，增加如下语句 
[c]
            if(m_isIndexer &amp;&amp; iNum &gt; 1) {
                        m_iBestWordLength=getBestWordLength(m_pText, m_pBufferMax-m_pCur); //使用mmseg得到最优分词结果
                        memcpy(m_sAccum, m_pText, m_iBestWordLength);
                        m_sAccum[m_iBestWordLength]='&#92;&#48;';
                        m_pTokenStart = m_pCur;
                        m_pTokenEnd = m_pCur + m_iBestWordLength;

                        m_totalParsedWordsNum = iNum;
                        m_needMoreParser = true;
                        m_processedParsedWordsNum = 0;
                        memcpy(m_BestWord, m_pText, m_iBestWordLength);
                        m_BestWord[m_iBestWordLength]='&#92;&#48;';
                        m_pTempCur = m_BestWord;
                        return m_sAccum;
                }
[/c]
需要修改的地方就这么多。重新编译，生成后indexer后,设置环境变量,export IS_INDEXER=1，重建索引即可。这里需要注意的一点是，必须使用修改代码之前的searchd，这样才会符合我们的需求，如果使用修改代码之后的searchd,搜索西海时，会分成西海，西，海，然后去搜索，这就不是我们想要的。

对于代码，有几个关键的地方需要分明的。
1.GetToken函数
这个行数每次返回一个词，也就是分词的结果，返回前，需要设置m_pTokenStart和m_pTokenEnd,标示这个词在内容中的开始位置和结束位置。当返回值为NULL时，标示分词结束

2.m_pCur
这个用来标示当前的指针在内容的偏移位置，前面说到的设置m_pTokenStart和m_pTokenEnd就需要用到这个值

3.commonPrefixSearch函数
调用这个函数会返回所有共同前缀的词，结果保存在m_pResultPair中。例如m_pText当前位置是西，则会返回西，西海，西海岸这三个有共同前缀的词。

4.getBestWordLength函数
这个函数使用mmseg算法，得到下次分词最优结果的长度。例如m_pText当前位置是西，最优分词结果是西海岸，而在utf-8中，一个字为三个字节，所以函数返回8。

因为代码简单，所以就不细说了。这个修改，唯一不足的是，无法做到精确匹配。也是说，假设两个地点，一个是北京，一个是北京大学，搜索北京时，无法保证北京是排在第一个，即使它和搜索词精确匹配。这是因为在对北京进行更细粒度分词时，将北京分成北京,北,京这个三个词，这样破坏了Sphinx用来判断精确匹配的一些设置。为了纠正这个错误，组长和我又写了一些代码，这部分新增的代码就没有上面那部分好理解了，同时写的也有一些别扭。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>769</wp:post_id>
		<wp:post_date><![CDATA[2014-06-28 22:31:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-28 14:31:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sphinx-for-chinese%e7%9a%84%e5%88%86%e8%af%8d%e7%bb%86%e7%b2%92%e5%ba%a6%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mmseg"><![CDATA[mmseg]]></category>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e8%af%8d"><![CDATA[分词]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e7%b2%92%e5%ba%a6"><![CDATA[粒度]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791197]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>常用正则备忘</title>
		<link>http://127.0.0.1:8000/blog/2014/07/13/%e5%b8%b8%e7%94%a8%e6%ad%a3%e5%88%99%e5%a4%87%e5%bf%98/</link>
		<pubDate>Sun, 13 Jul 2014 03:19:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=776</guid>
		<description></description>
		<content:encoded><![CDATA[判断一个字符串是否是IP地址
^([1-9]?[0-9]{1}|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.([1-9]?[0-9]{1}|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>776</wp:post_id>
		<wp:post_date><![CDATA[2014-07-13 11:19:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-13 03:19:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%b8%b8%e7%94%a8%e6%ad%a3%e5%88%99%e5%a4%87%e5%bf%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%ad%a3%e5%88%99"><![CDATA[正则]]></category>
		<category domain="category" nicename="programming"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791198]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sphinx-for-Chinese的分词细粒度问题(续)</title>
		<link>http://127.0.0.1:8000/blog/2014/07/08/sphinx-for-chinese%e7%9a%84%e5%88%86%e8%af%8d%e7%bb%86%e7%b2%92%e5%ba%a6%e9%97%ae%e9%a2%98%e7%bb%ad/</link>
		<pubDate>Tue, 08 Jul 2014 13:11:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=781</guid>
		<description></description>
		<content:encoded><![CDATA[在<a href="http://program.dengshilong.org/2014/06/28/sphinx-for-chinese的分词细粒度问题/" target="_blank">Sphinx-for-Chinese的分词细粒度问题</a>中说过，为了解决分词的粒度问题，我们对Sphinx-for-Chinese的代码进行了一些修改，而针对精确匹配我们也写了一些额外的代码，虽然这一部分的代码并不是很好看，但毕竟解决了问题，所以也想对这一部分进行说明，因为相信其他人也会遇到类似的问题，这里可以提供一个参考的解决方案。

所谓精确匹配，也就是搜索的词语搜索的字段完全相同。例如假设有三个标题,中大，中大酒店，中大假日酒店，则搜索中大时，与中大完全匹配。一般情况下，我们都希望精确匹配的内容排在前面，此时还需要设置排序方法为SPH_RANK_SPH04。

依然以sphinx-for-chinese-2.2.1-dev-r4311为例，在sphinxsearch.cpp中6282行附近，找到RankerState_ProximityBM25Exact_fn，这里就是sph04的实现。看到数据成员m_uExactHit，知道这个与精确匹配有关，在这段代码里看到HITMAN::IsEnd，于是猜测在某个地方有SetEnd,在sphinx.cpp中27144行附近找到CSphSource_Document::BuildRegularHits方法，在这里找到了，
CSphWordHit * pHit = const_cast &lt; CSphWordHit * &gt; ( m_tHits.Last() );
HITMAN::SetEndMarker ( &amp;pHit-&gt;m_iWordPos );
于是我们想，在进行细粒度分词时，中大将被分成，中大、中、大三个词。只要有某种办法，将中大这个词也使用SetEndMarker就可以达到所要的目的，于是增加了一些代码。

这之后，搜索中大时，中大这个标题确实排在了前面，可是问题又出现了，在搜索中大酒店时，中大酒店这个标题并没有排在前面，中大酒店与中大假日酒店的权重是相同的。分析了原因，搜索中大酒店时，将被分成中大+酒店，而中大假日酒店中，正好也包含中大和酒店，并且酒店也是排在末尾，于是这两个的权重是一样的。于是我们只好再看看m_uExactHit的计算，发现IsEnd并不是唯一的条件，于是相信为细分以前，索引中大酒店时，分词的词是中大、酒店，而细分后变成了中大、中、大、大酒店、酒店、酒、店，于是我们猜测，如果将分词按照原先的方法分一次，之后再一起返回细粒度的分词，可能可以达到目的。这样的结果就是分词返回的是中大、酒店、中、大、大酒店、酒、店。于是按照这个想法，又增加了一些代码。果然这次搜索中大酒店时，中大酒店排在了前面，并且权重比中大假日酒店高。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>781</wp:post_id>
		<wp:post_date><![CDATA[2014-07-08 21:11:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-08 13:11:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sphinx-for-chinese%e7%9a%84%e5%88%86%e8%af%8d%e7%bb%86%e7%b2%92%e5%ba%a6%e9%97%ae%e9%a2%98%e7%bb%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="sph_rank_sph04"><![CDATA[SPH_RANK_SPH04]]></category>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e8%af%8d%e7%b2%92%e5%ba%a6"><![CDATA[分词粒度]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e7%b2%be%e7%a1%ae%e5%8c%b9%e9%85%8d"><![CDATA[精确匹配]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791199]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MMSEG分词</title>
		<link>http://127.0.0.1:8000/blog/2014/07/08/mmseg%e5%88%86%e8%af%8d/</link>
		<pubDate>Tue, 08 Jul 2014 15:44:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=786</guid>
		<description></description>
		<content:encoded><![CDATA[很早之前就知道MMSEG分词算法，网上也有各种语言的实现。最近了解Sphinx-for-Chinese的分词后，才知道它也是使用的MMSEG，并且CoreSeek也是使用的MMSEG。也许MMSEG是互联网上使用知名度最高的分词算法了吧，因为它简单并且高效。

更进一步了解后，知道MMSEG是台湾人蔡志浩提出来的。蔡志浩是一位心理学教师，在美国伊利诺伊读博士期间，选修了语言学，在这个过程中，随手写了MMSEG。看蔡志浩网站，总是很舒心，因为蔡老师的文笔很好，总会用通俗的语言把问题讲清楚，而且蔡老师的博客涉及范围极广，设计，心理，写作，社会观察，旅游等等。也正是因为他的博客，我才用实名建立自己的博客。以下回归正题。

MMSEG总的说来就是四个规则。
1.最长匹配原则
2.最大平均长度
3.最小长度方差
4.最大单字单词的语素自由度

算法步骤：
1.选定一个分词个数，得到可行的分词情形
2.利用4条原则得到最优分词可能
3.得到最优分词的第一个词，回到步骤1继续分词

举个例子最好理解。下面是要对“研究生命起源的原因主要是因为它的重要性”进行分词。
1.首先选定分词个数为3，则可以得到可行的分词情形如下：
研 究 生
研 究 生命
研究 生命 起
研究 生命 起源
研究生 命 起
研究生 命 起源
2.利用4条原则得到最优分词可能
运用第1条原则后，可以得到最优分词可能为一下两条
研究 生命 起源
研究生 命 起源
运用第2条原则，这两个结果相同
运用第3条原则，可以得到最优的结果为
研究 生命 起源
3.从最优结果中得到第一个词，也就是“研究”，之后对“生命起源的原因主要是因为它的重要性”运用相同的步骤进行分词

有必要对原则4进行解释，这条原则说的是单字的成为语素的自由度。当分到”主要是因为“就会用到。对于”主要是因为“
第1步骤中得到：
主 要 是
主 要是 因为
主要 是 因
主要 是 因为
第2步骤中，由前三条原则，只剩下一下两个
主要 是 因为
主 要是 因为
之后再运用第4条原则，这里单字”是“为独立语素的可能比”主“要大，所以最优结果为
主要 是 因为

见过的MMSEG算法实现中，素心如何天上月的<a href="http://yongsun.me/2013/06/simple-implementation-of-mmseg-with-python/">http://yongsun.me/2013/06/simple-implementation-of-mmseg-with-python/</a>无疑是最简明清晰的。Python确实不错，短短100行就把算法的精髓展示出来，并且几乎可以不用写注释了。模仿他的实现，写了一遍。

[python]
#coding:utf-8
from collections import defaultdict
import codecs
from math import log

class Trie(object):
    class TrieNode():
        def __init__(self):
            self.value = 0
            self.trans = {}
    def __init__(self):
        self.root = self.TrieNode()
    def add(self, word, value=1):
        cur = self.root
        for ch in word:
            try:
                cur = cur.trans[ch]
            except:
                cur.trans[ch] = self.TrieNode()
                cur = cur.trans[ch]
        cur.value = value
    def _walk(self, node, ch):
        if ch in node.trans:
            node = node.trans[ch]
            return node, node.value
        else:
            return None, 0
    def match_all(self, s):
        ret = []
        cur = self.root
        for ch in s:
            cur, value = self._walk(cur, ch)
            if not cur:
                break
            if value:
                ret.append(value)
        return ret

class Dict(Trie):
    def __init__(self, filename):
        super(Dict, self).__init__()
        self.load(filename)

    def load(self, filename):
        with codecs.open(filename, &quot;r&quot;, &quot;utf-8&quot;) as f:
            for line in f:
                word = line.strip()
                self.add(word, word)
class CharFreq(defaultdict):
    def __init__(self, filename):
        super(CharFreq, self).__init__(lambda: 1)
        self.load(filename)
    def load(self, filename):
        with codecs.open(filename, &quot;r&quot;, &quot;utf-8&quot;) as f:
            for line in f:
                line = line.strip()
                word, freq = line.split(' ')
                self[word] = freq
class MMSEG():
    class Chunk():
        def __init__(self, words, chars):
            self.words = words
            self.lens = map(lambda x: len(x), words)
            self.length = sum(self.lens)
            self.average = self.length * 1.0 / len(words)
            self.variance = sum(map(lambda x: (x - self.average) ** 2, self.lens)) / len(words)
            self.free = sum(log(float(chars[w])) for w in self.words if len(w) == 1)
        def __lt__(self, other):
            return (self.length, self.average, -self.variance, self.free) &lt; (other.length, other.average, -other.variance, other.free)
    def __init__(self, dic, chars):
        self.dic = dic
        self.chars = chars
    def __get_chunks(self, s, depth=3):
        ret = []
        def __get_chunk(self, s, num, seg):
            if not num or not s:
                if seg:
                    ret.append(self.Chunk(seg, self.chars))
                return
            else:
                m = self.dic.match_all(s)
                if not m:
                    __get_chunk(self, s[1:], num - 1, seg + [s[0]])
                else:
                    for w in m:
                        __get_chunk(self, s[len(w):], num - 1, seg + [w])
        __get_chunk(self, s, depth, [])
        return ret
    def segment(self, s):
        while s:
            chunks = self.__get_chunks(s)
            best = max(chunks)
            yield best.words[0]
            s = s[len(best.words[0]):]

if __name__ == &quot;__main__&quot;:
    dic = Dict(&quot;dict.txt&quot;)
    chars = CharFreq('chars.txt')
    mmseg = MMSEG(dic, chars)
    print ' '.join(mmseg.segment(u&quot;北京欢迎你&quot;))
    print ' '.join(mmseg.segment(u&quot;研究生命起源的原因主要是因为它的重要性&quot;))
    print ' '.join(mmseg.segment(u'开发票'))
    print ' '.join(mmseg.segment(u'武松杀嫂雕塑是艺术，还是恶俗？大家怎么看的？'))
    print ' '.join(mmseg.segment(u'陈明真做客《麻辣天后宫》的那期视频哪里有？'))
    print ' '.join(mmseg.segment(u'压缩技术是解决网络传输负担的 有效技术。数据压缩有无损压缩和有损压缩两种。在搜索引擎中用到的压缩技术属于无损压缩。接下来，我们将先讲解各种倒排索引压缩算法，然后来分析搜索引擎技术中词典和倒排表的压缩。'))
[/python]
用到的两个文件<a href="http://program.dengshilong.org/wp-content/uploads/2014/07/dict.txt">dict.txt</a>和<a href="http://program.dengshilong.org/wp-content/uploads/2014/07/chars.txt">chars.txt</a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>786</wp:post_id>
		<wp:post_date><![CDATA[2014-07-08 23:44:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-08 15:44:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mmseg%e5%88%86%e8%af%8d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mmseg"><![CDATA[mmseg]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e8%af%8d"><![CDATA[分词]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791200]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>给sphinxclient.c增加flush索引到硬盘功能</title>
		<link>http://127.0.0.1:8000/blog/2014/07/11/%e7%bb%99sphinxclient-c%e5%a2%9e%e5%8a%a0flush%e7%b4%a2%e5%bc%95%e5%88%b0%e7%a1%ac%e7%9b%98%e5%8a%9f%e8%83%bd/</link>
		<pubDate>Fri, 11 Jul 2014 03:35:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=799</guid>
		<description></description>
		<content:encoded><![CDATA[在Sphinx中，如果你调用的是C的api，并使用更新属性的功能，而此时，你想将更新后的索引冲刷到硬盘，你就会发现C的api中没有提供这个功能。而在Java,PHP,Python中，都提供了FlushAttributes这个接口来完成这个功能，于是你不得不另外在写一个程序来调用这个接口。

仔细想想，Sphinx都是用C++写的，而C的API中竟然没有提供这个接口，反倒是其它语言有提供，真是匪夷所思。所幸，代码都是开源的，想要自己有这个接口，自己动手写一个就好了，也许这就是开源的好处。

代码如下：
[c]
int sphinx_flush_attributes(sphinx_client * client) {
	char *buf, *req, *p;
	int req_len = 0;
	if (!client) {
		printf(&quot;not valid client\n&quot;);
		return -1;
	}
	buf = malloc ( 12 + req_len ); // request body length plus 12 header bytes
	if ( !buf ) {
		set_error ( client, &quot;malloc() failed (bytes=%d)&quot;, req_len );
		return -1;
	}

	req = buf;

	send_word ( &amp;req, SEARCHD_COMMAND_FLUSHATTRS );
	send_word ( &amp;req, VER_COMMAND_FLUSHATTRS );
	send_int ( &amp;req, req_len );

	// send query, get response
	if ( !net_simple_query ( client, buf, req_len ) )
		return -1;

	// parse response
	if ( client-&gt;response_len &lt; 4 ) {
		set_error ( client, &quot;incomplete reply&quot; );
		return -1;
	}

	p = client-&gt;response_start;
	return unpack_int ( &amp;p );
}
[/c]
之后还要添加
SEARCHD_COMMAND_FLUSHATTRS  = 7，
VER_COMMAND_FLUSHATTRS  = 0x100，
以及在头文件中添加int sphinx_flush_attributes(sphinx_client * client)；即可。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>799</wp:post_id>
		<wp:post_date><![CDATA[2014-07-11 11:35:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-11 03:35:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%bb%99sphinxclient-c%e5%a2%9e%e5%8a%a0flush%e7%b4%a2%e5%bc%95%e5%88%b0%e7%a1%ac%e7%9b%98%e5%8a%9f%e8%83%bd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="flush"><![CDATA[flush]]></category>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="post_tag" nicename="sphinxclient"><![CDATA[sphinxclient]]></category>
		<category domain="post_tag" nicename="%e5%bc%80%e6%ba%90"><![CDATA[开源]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e7%b4%a2%e5%bc%95"><![CDATA[索引]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791201]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>求一个数的质因子分解</title>
		<link>http://127.0.0.1:8000/blog/2014/07/14/%e6%b1%82%e4%b8%80%e4%b8%aa%e6%95%b0%e7%9a%84%e8%b4%a8%e5%9b%a0%e5%ad%90%e5%88%86%e8%a7%a3/</link>
		<pubDate>Mon, 14 Jul 2014 12:57:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=806</guid>
		<description></description>
		<content:encoded><![CDATA[两年前面试4399时，和面试官说起用Python来做欧拉工程，于是面试官很感兴趣地说，有没有写一些小模块来求解，当时只是摇头，想想写写算法题还可以，写模块就太大了。现在想来，模块也无非是一些函数的集合，在接欧拉工程的过程中，就会经常遇到一些问题，需要用类似的方法解决，如果把这些共同的部分写在一起，不也是一个模块了？

质因子分解是经常需要用到的，这里给一个解决的办法。例如要求120的质因子分解，先用2去除，一直到不能整除为止，记得到2^3,以及剩下的15，之后用3去除，得到3以及剩下的5，之后用5去除，得到5以及0，分解过程结束。写成程序如下：
[python]
from collections import defaultdict
def get_divisors(n):
    divisors = defaultdict(int)
    if n % 2 == 0:
        while n % 2 == 0:
            divisors[2] += 1
            n /= 2
    i = 3
    while i * i &lt;= n:
        if n % i == 0:
            while n % i == 0:
                divisors[i] += 1
                n /= i
        i += 2
    if n &gt; 1:
        divisors[n] += 1
    return divisors
[/python]
有了这个方法就可以用来求一些数的最小公倍数，例如求，2 3  5 8 的最小公倍数
[python]
L = [2, 3, 5, 8]
factors = defaultdict(int)
for i in L:
    divisors = get_divisors(i)
    for d in divisors.iterkeys():
        factors[d] = max(factors[d], divisors[d])
res = 1
for d in factors.iterkeys():
    res *= d ** factors[d]
print res
[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>806</wp:post_id>
		<wp:post_date><![CDATA[2014-07-14 20:57:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-14 12:57:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%b1%82%e4%b8%80%e4%b8%aa%e6%95%b0%e7%9a%84%e8%b4%a8%e5%9b%a0%e5%ad%90%e5%88%86%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%9c%80%e5%b0%8f%e5%85%ac%e5%80%8d%e6%95%b0"><![CDATA[最小公倍数]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="%e8%b4%a8%e5%9b%a0%e5%ad%90"><![CDATA[质因子]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791202]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最短编辑距离</title>
		<link>http://127.0.0.1:8000/blog/2014/07/14/%e6%9c%80%e7%9f%ad%e7%bc%96%e8%be%91%e8%b7%9d%e7%a6%bb/</link>
		<pubDate>Mon, 14 Jul 2014 13:58:59 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=810</guid>
		<description></description>
		<content:encoded><![CDATA[最短编辑距离说的是两个字符串A和B，求用最少的字符操作将字符串A转化为字符串B。这里所说的字符操作包括
1.删除一个字符
2.插入一个字符
3.将一个字符改为另一个字符

分析：
先比较A和B的第一个字符，分两种情况
1.两个字符相等
此时只需要计算A和B剩下字符的编辑距离
2.两个字符不相等
此时有三种选择，
（1）删除A的第一个字符，之后求A剩下的字符与B的编辑距离
（2）在A中插入B的第一个字符，之后求A与B剩下字符的编辑距离
（3）将A的第一个字符变成B的第一个字符，之后求A剩下的字符与B剩下的字符的编辑距离
之后返回这三种情况的最小值，再加上1，即是A转化为B的最短编辑距离

依照上述方法，很容易写出一个递归方法
[python]
def edit_distance(a, b):
    if a == '':
        return len(b)
    if b == '':
        return len(a)
    if a[0] == b[0]:
        return edit_distance(a[1:], b[1:])
    else:
        return min(edit_distance(a[1:], b), edit_distance(a, b[1:]), edit_distance(a[1:], b[1:])) + 1
A=&quot;fxpimu&quot;
B=&quot;xwrs&quot;    
print edit_distance(A, B)
[/python]
唯一的缺点是，这种方法太慢了，于是想到用动态规划，此时最好还是从后面考虑，也就是考虑A和B最后一个字符的相等情况，再根据上面的分析计算。
[python]
def edit_distance(a, b):
    la = len(a)
    lb = len(b)
    dp = [[0 for i in xrange(lb + 1)] for j in xrange(la + 1)]
    for i in xrange(1, la + 1):
        dp[i][0] = i
    for j in xrange(1, lb + 1):
        dp[0][j] = j
    for i in xrange(la):
        for j in xrange(lb):
            if a[i] == b[j]:
                dp[i + 1][j + 1] = dp[i][j]
            else:
                dp[i + 1][j + 1] = min(dp[i + 1][j], dp[i][j + 1], dp[i][j]) + 1
    return dp[la][lb]
    
    
A=&quot;fxpimu&quot;
B=&quot;xwrs&quot;
print edit_distance(A, B)
[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>810</wp:post_id>
		<wp:post_date><![CDATA[2014-07-14 21:58:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-14 13:58:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%80%e7%9f%ad%e7%bc%96%e8%be%91%e8%b7%9d%e7%a6%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92"><![CDATA[动态规划]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e8%be%91%e8%b7%9d%e7%a6%bb"><![CDATA[编辑距离]]></category>
		<category domain="post_tag" nicename="%e9%80%92%e5%bd%92"><![CDATA[递归]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791203]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>取石子游戏</title>
		<link>http://127.0.0.1:8000/blog/2014/07/14/%e5%8f%96%e7%9f%b3%e5%ad%90%e6%b8%b8%e6%88%8f/</link>
		<pubDate>Mon, 14 Jul 2014 15:23:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=813</guid>
		<description></description>
		<content:encoded><![CDATA[取石子游戏说的是有两堆任意数量的小石子，游戏由两个人轮流取石子，对于取法，游戏规定有两种，一种是可以在任意的一堆中，取走任意多的石子；一种是在两堆中同时取走相同数量的石子。游戏规定，最后把石子全部取完的为胜者。现在假设初始时两堆石子的数目为a和b, a &lt;=  b，假设双方都采取最好的策略，问先取的人是胜者还是败者。

对于这题，可以得到在以下情况下，先取的人必败，其它情况下，先取的人必胜。
1 2
3 5
4 7
6 10
8 13
9 16
...

可以看出，这两个数字之间一定有规律，而说到规律，很容易想到的是黄金分割比。记得那时还很粗心的将其中的数字写错了，于是任晓祎同学就过来纠正了。时光飞逝啊，已经过去三年了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>813</wp:post_id>
		<wp:post_date><![CDATA[2014-07-14 23:23:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-14 15:23:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8f%96%e7%9f%b3%e5%ad%90%e6%b8%b8%e6%88%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8f%96%e7%9f%b3%e5%ad%90"><![CDATA[取石子]]></category>
		<category domain="category" nicename="math"><![CDATA[数学]]></category>
		<category domain="post_tag" nicename="%e9%bb%84%e9%87%91%e5%88%86%e5%89%b2%e6%af%94"><![CDATA[黄金分割比]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791204]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>扔蛋问题</title>
		<link>http://127.0.0.1:8000/blog/2014/07/15/%e6%89%94%e8%9b%8b%e9%97%ae%e9%a2%98/</link>
		<pubDate>Mon, 14 Jul 2014 23:30:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=815</guid>
		<description></description>
		<content:encoded><![CDATA[扔蛋问题说的是，100层楼，给两个特制鸡蛋。从某层扔下鸡蛋，鸡蛋就会碎。问至少要测试多少次才能试出这个层数。对于这个问题，许多人都可以背出答案14层。但如果是200层呢?

事实上，还可以对这题进行扩展，假设n层，e个鸡蛋，求至少要测试多少次，才能测出这个层数。

对于这题，可以用动态规划。还是在面4399时，面试官要我解释什么是动态规划，当时没能解释清楚。现在想来，动态规划有两个重要的因素，一个是最优子结构，还有一个是重叠子问题。按我的理解，最优子结构说的是，当前的最优解包含了子问题的最优解。重叠子问题说的是，子问题具有重叠部分。

而对于这题，可以写出一个递推公式,设n为楼层数,e为鸡蛋数。
f(n,e) = 1 + min{max{f(n - r, e),f(r - 1, e -1)}} 其中r属于{2,3,...,n - 1},初始条件为f(n,1) = n, f(1,e) = 1, f(2,e) = 2. 这里要求n,e都是正整数。
写成程序如下：
[python]
def egg(n, e=2):
    dp = [[n for i in xrange(e + 1)] for j in xrange(n + 1)]
    for i in xrange(1, n + 1):
        dp[i][1] = i
    for i in xrange(1, e + 1):
        dp[1][i] = 1
        dp[2][i] = 2
    for i in xrange(3, n + 1):
        for j in xrange(2, e + 1):
            for r in xrange(1, n):
                dp[i][j] = min(dp[i][j], 1 + max(dp[i - r][j], dp[r - 1][j - 1]))
                
    return dp[n][e]

print egg(100, 2)
[/python]


对于鸡蛋数为2时，还有特殊的解法。在鸡蛋数为2时，楼层数与测试次数如下：
1 1
2 2
3 2
4 3
5 3
6 3
7 4
8 4
9 4
10 4
11 5
...
于是可以猜测,对于楼层数n ,只要找到第一个x ,使得 x * (x + 1) / 2 >= n即可，对于100,正好是14。类似地，对于开头提出的鸡蛋数为2，楼层数为200时，测试层数也可以类似的求解]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>815</wp:post_id>
		<wp:post_date><![CDATA[2014-07-15 07:30:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-14 23:30:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%89%94%e8%9b%8b%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92"><![CDATA[动态规划]]></category>
		<category domain="post_tag" nicename="%e6%89%94%e8%9b%8b%e9%97%ae%e9%a2%98"><![CDATA[扔蛋问题]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791205]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>选择排序中的交换次数</title>
		<link>http://127.0.0.1:8000/blog/2014/07/15/%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f%e4%b8%ad%e7%9a%84%e4%ba%a4%e6%8d%a2%e6%ac%a1%e6%95%b0/</link>
		<pubDate>Mon, 14 Jul 2014 23:43:16 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=826</guid>
		<description></description>
		<content:encoded><![CDATA[给你一个list L, 如 L=[2,8,3,50], 对L进行选择排序并输出交换次数,
如样例L的结果为1

对于这题，无非就是写一个选择排序，在排序过程中记下交换的次数。很意外的是Pythontip上竟然会有那么多人写错，
按照选择排序的定义，写一个应该是分分钟的事。或许这帮人都没看书。
[python]
L=[2,8,3,50]
length = len(L)
count = 0
for i in xrange(length):
    minum = L[i]
    index = i
    for j in xrange(i + 1, length):
        if L[j] &lt; minum:
            minum = L[j]
            index = j
    if index != i:
        L[i],L[index] = L[index],L[i]
        count += 1
print count
[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>826</wp:post_id>
		<wp:post_date><![CDATA[2014-07-15 07:43:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-14 23:43:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f%e4%b8%ad%e7%9a%84%e4%ba%a4%e6%8d%a2%e6%ac%a1%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="%e9%80%89%e6%8b%a9%e6%8e%92%e5%ba%8f"><![CDATA[选择排序]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791206]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最大连续子序列</title>
		<link>http://127.0.0.1:8000/blog/2014/07/15/%e6%9c%80%e5%a4%a7%e8%bf%9e%e7%bb%ad%e5%ad%90%e5%ba%8f%e5%88%97/</link>
		<pubDate>Tue, 15 Jul 2014 00:23:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=828</guid>
		<description></description>
		<content:encoded><![CDATA[知道这题，是在冼镜光的《C名题精选百则》中。记得这题是自己做出来的，所以稍微回忆一下，就能记起来。也许算法之所以这么难，就是因为不是自己想出来的，所以虽然看过，却很容易忘记。或许应该不只是看算法，而要知道原始作者的思考过程，这样才能真正理解。就像要想理解TCP/IP协议一样，比较好的办法是自己去设计TCP协议，看如何保证可靠传输。扯远了。

对于这题，很容易写出如下程序：
[python]
def max_con_sum(s):
    length = len(s)
    max_sum = s[0]
    i = 0
    temp_sum = s[0]
    while i + 1 &lt; length:
        i += 1
        if temp_sum &lt; 0:
            temp_sum = 0;
        temp_sum += s[i]
        if temp_sum &gt; max_sum:
            max_sum = temp_sum
            
    return max_sum
L = [2,-3,3,50]
print max_con_sum(L)
[/python]
而如果还想知道最大连续子序列的开始位置和结束位置，之需要再增加额外的记录信息即可。
[python]
def max_con_sum(s):
    length = len(s)
    max_sum = s[0]
    start = 0;
    end = 0
    i = 0
    temp_sum = s[0]
    while i + 1 &lt; length:
        i += 1
        if temp_sum &lt; 0:
            temp_sum = 0;
            start = i
        temp_sum += s[i]
        if temp_sum &gt; max_sum:
            max_sum = temp_sum
            end = i
            
    return (max_sum,start,end)
L = [2, -3, 3, 50]
max_sum,start,end =  max_con_sum(L)
print max_sum,start,end
[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>828</wp:post_id>
		<wp:post_date><![CDATA[2014-07-15 08:23:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-15 00:23:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%80%e5%a4%a7%e8%bf%9e%e7%bb%ad%e5%ad%90%e5%ba%8f%e5%88%97]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%9c%80%e5%a4%a7%e8%bf%9e%e7%bb%ad%e5%ad%90%e5%ba%8f%e5%88%97"><![CDATA[最大连续子序列]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791207]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>筛法得到素数</title>
		<link>http://127.0.0.1:8000/blog/2014/07/15/%e7%ad%9b%e6%b3%95%e5%be%97%e5%88%b0%e7%b4%a0%e6%95%b0/</link>
		<pubDate>Tue, 15 Jul 2014 01:25:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=831</guid>
		<description></description>
		<content:encoded><![CDATA[在欧拉工程中，很多时候都需要用到素数，而得到素数比较好就是用筛法生成。筛法还是很容易理解的，随便找一本教科书的可以找到。

有了这个函数后，要得到100以内的素数就非常容易了。

[python]
def getPrimes(n):
    primes = [True for i in xrange(n + 1)]
    primes[0] = primes[1] = False
    for x in xrange(2, n + 1):
        if not primes[x]:
            continue
        m = x * x
        while m &lt;= n:
            primes[m] = False
            m += x
    return [i for i in xrange(n + 1) if primes[i]]

print get_primes(100)
[/python]
2014年8月16日更新：
才发现这个函数的速度还不理想，于是改成
[python]
def getPrimes(n):
    primes = [True] * (n + 1)
    primes[0] = primes[1] = False
    i = 2
    while i * i &lt;= n:
        if primes[i]:
            primes[i * i:n + 1:i] = [False] * ((n - i * i) / i + 1)
        i += 1
    return [i for i in xrange(n + 1) if primes[i]]
[/python]
之所以这么改，可参看<a href="http://program.dengshilong.org/2014/08/16/python%E7%AD%9B%E6%B3%95%E6%B1%82%E7%B4%A0%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96/">Python筛法求素数的优化</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>831</wp:post_id>
		<wp:post_date><![CDATA[2014-07-15 09:25:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-15 01:25:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ad%9b%e6%b3%95%e5%be%97%e5%88%b0%e7%b4%a0%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e7%ad%9b%e6%b3%95"><![CDATA[筛法]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791208]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>整数划分</title>
		<link>http://127.0.0.1:8000/blog/2014/07/15/%e6%95%b4%e6%95%b0%e5%88%92%e5%88%86/</link>
		<pubDate>Tue, 15 Jul 2014 07:57:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=833</guid>
		<description></description>
		<content:encoded><![CDATA[整数划分说的是给定一个正整数N，求一共有多少种方式将N分解成不超过N的正整数和。
例如：N=4时，一共有5种划分，如下：
4 = 4
4 = 3 + 1
4 = 2 + 2
4 = 2 + 1 + 1
4 = 1 + 1 + 1 + 1

如果没记错的话，在《C名题精选百则》中出现过这题。我们可以考虑更普遍的情况，将正整数N分解成不超过M的整数和的情况。
对于这种情况，可以将分解分成包含整数M和不包含整数M的情况。令f(N,M)为总共的分解方式，则
f(N,M) = f(N - M, M) + f(N, M -1)，于是写成程序如下：
[python]
def partition(n):
    return _partition(n, n)
    
def _partition(n, m):
    if n == 0:
        return 1
    if n &lt; 0:
        return 0
    if m == 1:
        return 1
    else:
        return _partition(n - m, m) + _partition(n, m - 1)
for i in xrange(1, 10):
    print i, partition(i)
[/python]
只是当n比较大时，递归的效率太慢了，于是用动态规划重写：
[python]
def partition(n):
    dp = [[0 for i in xrange(n + 1)] for j in xrange(n + 1)]
    for i in xrange(n + 1):
        dp[i][1] = 1
        dp[0][i] = 1
    for i in xrange(1, n + 1):
        for j in xrange(1, n + 1):
            if i - j &gt;= 0:
                dp[i][j] = dp[i - j][j] + dp[i][j - 1]
            else:
                dp[i][j] = dp[i][j - 1]
    return dp[n][n]

for i in xrange(1, 10):
    print i, partition(i)
[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>833</wp:post_id>
		<wp:post_date><![CDATA[2014-07-15 15:57:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-15 07:57:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b4%e6%95%b0%e5%88%92%e5%88%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92"><![CDATA[动态规划]]></category>
		<category domain="post_tag" nicename="%e6%95%b4%e6%95%b0%e5%88%92%e5%88%86"><![CDATA[整数划分]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="%e9%80%92%e5%bd%92"><![CDATA[递归]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791209]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux挂载U盘</title>
		<link>http://127.0.0.1:8000/blog/2014/07/17/linux%e6%8c%82%e8%bd%bdu%e7%9b%98/</link>
		<pubDate>Thu, 17 Jul 2014 02:54:14 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=836</guid>
		<description></description>
		<content:encoded><![CDATA[挂载U盘
mount -t auto /dev/sdb1 /mnt/usb
如果在mnt目录下不存在usb目录 则先执行 mkdir /mnt/usb,其中/mnt/usb为挂载目录,也可以使用将U盘挂载到其它目录

之后卸载U盘
umount /mnt/usb

如果是文件名中包含中文，还会遇到乱码问题，所以还要加上-o iocharset=utf8]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>836</wp:post_id>
		<wp:post_date><![CDATA[2014-07-17 10:54:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-17 02:54:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e6%8c%82%e8%bd%bdu%e7%9b%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="u%e7%9b%98"><![CDATA[U盘]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791210]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ubuntu中打开PDF文件</title>
		<link>http://127.0.0.1:8000/blog/2014/07/20/ubuntu%e4%b8%ad%e6%89%93%e5%bc%80pdf%e6%96%87%e4%bb%b6/</link>
		<pubDate>Sun, 20 Jul 2014 02:07:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=842</guid>
		<description></description>
		<content:encoded><![CDATA[习惯在命令行下工作，都忘记用什么软件打开PDF了，才发现是用evince打开。

于是在命令行下执行evince 文件名即可打开，例如要打开ex1.pdf,则执行evince ex1.pdf]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>842</wp:post_id>
		<wp:post_date><![CDATA[2014-07-20 10:07:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-20 02:07:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ubuntu%e4%b8%ad%e6%89%93%e5%bc%80pdf%e6%96%87%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="evince"><![CDATA[evince]]></category>
		<category domain="post_tag" nicename="pdf"><![CDATA[pdf]]></category>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791211]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Octave中的for循环</title>
		<link>http://127.0.0.1:8000/blog/2014/07/20/octave%e4%b8%ad%e7%9a%84for%e5%be%aa%e7%8e%af/</link>
		<pubDate>Sun, 20 Jul 2014 02:56:32 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=844</guid>
		<description></description>
		<content:encoded><![CDATA[之前就选修过Angrew Ng的机器学习,但是那是一味的只追求进度，所以收获甚微，于是这次又重新选修了这门课。

这么课程使用Octave语言，这可以说是Matlab的开源版本，使用这种高阶语言，可以让我们更专注于算法层面。今天在实现sigmoid函数时，老是出错。原来是忘记了在每个for循环之后加上end. 还有一点需要说明的是,在Octave中，数组是从1开始的。
[matlab]
x = [1 2; 3 4]
g = zeros(size(x));
for i = 1:size(x,1)
    for j = 1:size(x,2)
        g(i,j) = 1 / (1 + e ^ (-x(i, j)));
    end 
end
g
[/matlab]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>844</wp:post_id>
		<wp:post_date><![CDATA[2014-07-20 10:56:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-07-20 02:56:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[octave%e4%b8%ad%e7%9a%84for%e5%be%aa%e7%8e%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="octave"><![CDATA[octave]]></category>
		<category domain="category" nicename="machine-learning"><![CDATA[机器学习]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791212]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>重温manufactoria</title>
		<link>http://127.0.0.1:8000/blog/2014/08/13/%e9%87%8d%e6%b8%a9manufactoria/</link>
		<pubDate>Wed, 13 Aug 2014 02:26:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=855</guid>
		<description></description>
		<content:encoded><![CDATA[最近又玩了一遍manufactoria,发现有些关卡都快忘记怎么过的，这次还是写下来好了。
关卡按照从左到右，从上到下计数。
1. Move robots from the entrance(top) to the exit (bottom)! 将机器从入口(顶部)移到出口(底部)!
简单，不多说
2.  If a robot's string starts with blue, accept. Otherwise, reject!  如果机器以蓝色字符开头，则接受。否则，丢弃。
3.  ACCEPT:if there are three or more blues! 如果有三个或三个以上的蓝色的，则接受
4. ACCEPT: if a robot contains NO red! 如果机器不包含红色的，则接受。
5. OUTPUT:The input,but with the first symbol at the end!  对于输入的字符，将第一个字符移到末尾作为输出
6. ACCEPT: if the tape has only alternating colors! 如果只存在交替字符，则接受。
意思就是字符如果是交替出现的则接受，如蓝红蓝红蓝，红蓝红蓝等等，而蓝蓝红，红蓝蓝等出现连续相同的字符，所以不接受
7. OUTPUT：Replace blue with green, and red with yellow! 输出：将蓝色换成绿色，将红色换成黄色。
8. ACCEPT: if the tape ends with two blues!  如果末尾是两个蓝色，则接受。
9. OUTPUT： Put a green at the begining,  and a yellow at the end! 输出： 对于输入的字符，在开头中添加一个绿色字符，在末尾中添加一个黄色字符。
10. ACCEPT: Strings that begin and end with the same color! 如果开始字符和结束字符时相同，则接受。
11. ACCEPT: With blue as 1 and red as 0, accept odd binary string! 把蓝色当做1，红色当做0， 接受奇数二进制数。
其实就是接受蓝色结尾的字符。
12. ACCEPT: Some number of blue, then the same number of red! 接受： 一些蓝色的，然后相同数量的红色的。
也就是接受诸如蓝蓝红红，蓝蓝蓝红红红等，当然空字符也要接受，因为空字符代表0个蓝色，0个红色。
解决办法是每次除去一个蓝色和红色
13.OUTPUT: Swap blue for red, and red for blue! 输出： 将蓝色换成红色，红色换成蓝色。
也就是将字符串中的颜色互换。
14. OUTPUT: All of the blue, but none of the red! 输出字符串中的所有蓝色字符，不输出红色字符。
也就是将字符串中的所有红色字符去掉，留下蓝色的。
15. OUTPUT： The input, but with the last symbol moved to the front! 输出： 对于输入的字符，将最后一个字符移动最前面。
在末尾添加一个绿色，用来标示最后一个字符
16. OUTPUT: With blue as 1 and red as 0, multiply by 8! 输出：把蓝色当做1，红色当做0，将二进制字符串乘以8.
其实也就是在字符串末尾添加3个0，也就是添加三个红色
17.ACCEPT: With blue as 1 and red as 0, accept binary strings &gt; 15! 接受：把蓝色当做1，红色当做0，接受大于15的字符串。
18. An equal number of blue and red, in any order! 只要字符串中包含相同个数的蓝色和红色，则接受。
使用与12相同的办法
19.OUTPUT：Put a yellow in the middle of the (even-lenght) string! 输出： 在字符串（偶数个字符串）的中间放置一个黄色字符。
在头尾都添加黄色，之后每个循环，头部的向前移一步，尾部的向后移一步。
20.ACCEPT: X blue, then X red, then X more blue, for any X! 接受： X个蓝色，然后X个红色，接着X个蓝色，对于X没有限制。
也就是接受蓝红蓝，蓝蓝红红蓝蓝等字符串，对于空字符也接受，因为它代表0个蓝色，然后0个红色，接着0个蓝色。
使用与12题相同的办法
21.OUTPUT: The input, but with all blues moved to the front! 输出：对于输入，将字符串中所有的蓝色移到前面。
逆向思维，将红色字符移到后面
22.OUTPUT: With blue as 1 and red as 0, add 1 to the binary string! 输出： 将蓝色当做1，红色当做0，将二进制字符串加上1.
在末尾添加一个黄色，每个循环，如果黄色左边的是蓝色，则蓝色变成红色，并且黄色左后退一个字符，
如果黄色左边的红色，则将红色变成蓝色，程序结束。
23. ACCEPT: With blue as 1 and red as 0,  accept natural powers of four! 接受：把蓝色当做1，红色当做0，接受四的开方
24.ACCEPT: (Even-length) strings that repeat midway through! 接受：(偶数长度)接受从中间开始重复的字符串
意思就是接受的字符串是偶数长度，前半段和后半段是一样的，如蓝红红蓝红红，
25. ACCEPT: If there are exactly twice as many blues as red! 接受：如果蓝色的个数是红色个数的两倍，则接受。
每个循环，除去两个蓝色和一个红色
26. OUTPUT: Reverse the input string! 输出：将输入的字符串逆转输出
27.OUTPUT: Subtract 1 from the binary string!(Input &gt;= 1) 输出：从二进制字符串中减去1(输入字符串&gt;=1)
在末尾添加一个黄色，每个循环，如果黄色左边的是红色，则红色变成蓝色，并且黄色左后退一个字符，
如果黄色左边的蓝色，则将蓝色变成红色，程序结束。
28.ACCEPT: Perfectly symmetrical strings! 接受：完美对称字符串！
意思就是回文串，也就是从左读到右和从右读到左是一样的。
每个循环，头尾消去的字符是一样的。
29.ACCEPT: Two identical strings, separated by a green! 接受：两个相同的字符串，由绿色隔开。
30. ACCEPT: Read the tape as two numbers, A and B, split by a green: accept if A &gt; B! 接受：读入的字符串当做两个二进制数，A和B，由一个绿色隔开，如果A&gt;B则接受。
每次比较A和B的字符，分四种情况
蓝蓝，继续比较A和B剩余的字符
红红，继续比较A和B剩余的字符
蓝红，这种情况下，有个小技巧，将B的字符再消去一个，这时A剩余的字符比B剩余的字符长，则A&gt;B
红蓝,A剩余的字符比B剩余的字符长，则A&gt;B
31. OUTPUT: Read the tape as two numbers, A and B, split by a green: output A + B! 输出：读入的字符串当做两个二进制数，A和B，由一个绿色隔开，输出A+B的和！
将A和B都转成黄色字符，之后再将黄色字符转成二进制。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>855</wp:post_id>
		<wp:post_date><![CDATA[2014-08-13 10:26:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-13 02:26:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e9%87%8d%e6%b8%a9manufactoria]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="manufactoria"><![CDATA[manufactoria]]></category>
		<category domain="category" nicename="programming"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791213]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>POJ2524-Ubiquitous Religions</title>
		<link>http://127.0.0.1:8000/blog/2014/08/13/poj2524-ubiquitous-religions/</link>
		<pubDate>Wed, 13 Aug 2014 04:21:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=857</guid>
		<description></description>
		<content:encoded><![CDATA[连并查集都忘记是怎么回事了，实在是不应该。还是复习一下为妙。
poj2524这一题是并差集的简单应用，先从这题开始。

There are so many different religions in the world today that it is difficult to keep track of them all. You are interested in finding out how many different religions students in your university believe in.

You know that there are n students in your university (0 &lt; n &lt;= 50000). It is infeasible for you to ask every student their religious beliefs. Furthermore, many students are not comfortable expressing their beliefs. One way to avoid these problems is to ask m (0 &lt;= m &lt;= n(n-1)/2) pairs of students and ask them whether they believe in the same religion (e.g. they may know if they both attend the same church). From this data, you may not know what each person believes in, but you can get an idea of the upper bound of how many different religions can be possibly represented on campus. You may assume that each student subscribes to at most one religion.

input:
The input consists of a number of cases. Each case starts with a line specifying the integers n and m. The next m lines each consists of two integers i and j, specifying that students i and j believe in the same religion. The students are numbered 1 to n. The end of input is specified by a line in which n = m = 0.

output:
For each test case, print on a single line the case number (starting with 1) followed by the maximum number of different religions that the students in the university believe in.

sample input
10 9
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
10 4
2 3
4 5
4 8
5 8
0 0
sample output
Case 1: 1
Case 2: 7
题目描述
​世界上有许多不同的宗教，要记录全部是很困难的。你有兴趣找出在你所在的大学，有多少不同宗教信仰的学生。

你所在的大学有n个学生(0 &lt; n &lt;= 50000).问遍所有学生的宗教信仰是不实际的。并且，一些学生对于表达他们的信仰会觉得不舒服。一个避免这些问题的解决办法是问m(0 &lt;= m &lt;= n(n-1)/2)对学生，他们是否属于同一个宗教(也就是他们同时出现在相同的教堂).从这些数据里，你不能知道每一个人的信仰，但是可以知道校园里宗教数量的一个上界。你可以假设一个学生至多属于一个宗教。

输入：
输入中包含一些测试用例。每个例子由一行包含整数n和m开始。接下来的m行由两个整数i和j组成,i和j属于同一个宗教.学生从1到n编号.输入的结束由一行n = m = 0标示.

输出：
每一个测试用例，输出一个数字标示第几个测试用例(从1开始)跟着是这所大学的所有学生可能的最大宗教信仰数。

[c]
#include &lt;stdio.h&gt;
#include &lt;iostream&gt;
using namespace std;
const int MAX=50001;
int father[MAX];
int rank[MAX];
void make_set(int x) {
    father[x] = x;
    rank[x] = 1;
}
int find_set(int x) {
    if (x != father[x]) {
        father[x] = find_set(father[x]);
    }
    return father[x];
}
void union_set(int x, int y) {
    int fx = find_set(x);
    int fy = find_set(y);
    if (fx == fy)
        return;
    if (rank[fx] &gt; rank[fy]) {
        father[fy] = fx;
        rank[fx] += rank[fy] ;
    } else {
        rank[fy] += rank[fx];
        father[fx] = fy;
    }
}
int main() {
    int n, m, a, b;
    int test_case = 0;
    while (true) {
        scanf(&quot;%d %d&quot;, &amp;n, &amp;m);
        if (n == 0 &amp;&amp; m == 0) {
            break;
        }
        test_case++;
        for (int i = 1; i &lt;= n; i++) {
            make_set(i);
        }
        while (m--) {
            scanf(&quot;%d %d&quot;, &amp;a, &amp;b);
            union_set(a, b);
        }
        int count = 0;
        for (int i = 1; i &lt;= n; i++) {
            if (i == father[i]) {
                count++;
            }
        }
        printf(&quot;Case %d: %d\n&quot;, test_case, count);
    }
    return 0;
}
[/c]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>857</wp:post_id>
		<wp:post_date><![CDATA[2014-08-13 12:21:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-13 04:21:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[poj2524-ubiquitous-religions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%b9%b6%e6%9f%a5%e9%9b%86"><![CDATA[并查集]]></category>
		<category domain="category" nicename="data-structure"><![CDATA[数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791214]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>堆排序</title>
		<link>http://127.0.0.1:8000/blog/2014/08/13/%e5%a0%86%e6%8e%92%e5%ba%8f/</link>
		<pubDate>Wed, 13 Aug 2014 12:00:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=861</guid>
		<description></description>
		<content:encoded><![CDATA[对于求最小的K个数和最大的K个数，一种解决办法是使用堆。对于堆，数据结构的书籍中都有讲到，可是面试时不知是紧张还是什么原因，连堆都忘记了，悲哀，真是悲哀。

想来堆排序还是不难的，如果要对n个数字从小到大排序，则先建立这n个数字的大顶堆，之后堆顶与最后一个数字交换，此时就得到最大的数字，且在最后一位中，之后之需要对前n-1个数字排序。这里堆顶与最后一个数字交换后，会破坏了大顶堆，需要重建堆。对于大顶堆，意思就是堆顶的元素是最大的，之后是堆顶的左右子节点。

这里主要就是两个步骤，一个是建立大顶堆，一个是重建堆。
看代码可能会更容易一些
[c]
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
void swap(int &amp;a, int &amp;b) {
    int temp = a;
    a = b;
    b = temp;
}
void adjust_heap(int *a, int cur, int n) {
    int left, right;
    while (true) {
        left = 2 * cur + 1;
        right = 2 * cur + 2;
        int index = cur;
        if (left &lt; n &amp;&amp; a[left] &gt; a[index]) {
            index = left;
        }
        if (right &lt; n &amp;&amp; a[right] &gt; a[index]) {
            index = right;
        }
        if (index != cur) {
            swap(a[cur], a[index]);
            cur = index;
        } else {
            break;
        }
    }
}
void build_heap(int *a, int n) {
    for (int i = (n - 1) / 2; i &gt;= 0; i--) {
        adjust_heap(a, i, n);
    }
}
void heap_sort(int *a, int n) {
    build_heap(a, n);
    for (int i = n - 1; i &gt; 0; i--) {
        swap(a[0], a[i]);
        adjust_heap(a, 0, i);
    }
} 
int main() {
    int a[] = {10, 2, 5, 7, 6, 13 , 8, 7};
    int n = sizeof(a) / sizeof(int);
    heap_sort(a, n);
    for (int i = 0; i &lt; n - 1; i++) {
        printf(&quot;%d &quot;, a[i]);
    }
    printf(&quot;%d\n&quot;, a[n - 1]);
    return 0;
}
[/c]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>861</wp:post_id>
		<wp:post_date><![CDATA[2014-08-13 20:00:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-13 12:00:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a0%86%e6%8e%92%e5%ba%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%a0%86"><![CDATA[堆]]></category>
		<category domain="post_tag" nicename="%e5%a0%86%e6%8e%92%e5%ba%8f"><![CDATA[堆排序]]></category>
		<category domain="category" nicename="data-structure"><![CDATA[数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791215]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最小的K个数</title>
		<link>http://127.0.0.1:8000/blog/2014/08/14/%e6%9c%80%e5%b0%8f%e7%9a%84k%e4%b8%aa%e6%95%b0/</link>
		<pubDate>Thu, 14 Aug 2014 04:37:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=865</guid>
		<description></description>
		<content:encoded><![CDATA[对于求最大的K个数和最小的K个数，一个解决的办法是使用堆，这里以最小的K个数为例。
题目描述：
输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。


输入：
每个测试案例包括2行：
第一行为2个整数n，k(1<=n，k<=200000)，表示数组的长度。
第二行包含n个整数，表示这n个数，数组中的数的范围是[0,1000 000 000]。

输出：
对应每个测试案例，输出最小的k个数，并按从小到大顺序打印。

样例输入：
8 4
4 5 1 6 2 7 3 8
样例输出：
1 2 3 4

对于这题，可以使用堆来解决。首先建立一个K个元素的大顶堆，对于之后的n-k个元素，每个与堆顶比较，如果大于堆顶，则它不可能是最小的K个数之一，如果小于堆顶，则将堆顶替换，并重建大顶堆。之后剩下的K个元素就是最小的K个数。对它们从小到大排序就可以得到结果。
写成代码如下：
[c]
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
void swap(int &amp;a, int &amp;b) {
    int temp = a;
    a = b;
    b = temp;
}
void adjust_heap(int *a, int cur, int n) {
    int left, right;
    while (true) {
        left = 2 * cur + 1;
        right = 2 * cur + 2;
        int index = cur;
        if (left &lt; n &amp;&amp; a[left] &gt; a[index]) {
            index = left;
        }
        if (right &lt; n &amp;&amp; a[right] &gt; a[index]) {
            index = right;
        }
        if (index != cur) {
            swap(a[cur], a[index]);
            cur = index;
        } else {
            break;
        }
    }
}
void build_heap(int *a, int n) {
    for (int i = (n - 1) / 2; i &gt;= 0; i--) {
        adjust_heap(a, i, n);
    }
}
void heap_sort(int *a, int n) {
    build_heap(a, n);
    for (int i = n - 1; i &gt; 0; i--) {
        swap(a[0], a[i]);
        adjust_heap(a, 0, i);
    }
} 
int main() {
    int n, k, num;
    while(scanf(&quot;%d %d&quot;, &amp;n, &amp;k) != EOF) {
        int *a = new int[k];
        for (int i = 0; i &lt; n; i++) {
            scanf(&quot;%d&quot;, &amp;num);
            if (i &lt;= k - 1) {
                a[i] = num;
                if (i == k - 1) {
                    build_heap(a, k);
                }
            } else {
                if (a[0] &gt; num) {
                    swap(a[0], num);
                    adjust_heap(a, 0, k);
                }
            }
        }
        heap_sort(a, k);
        for (int i = 0; i &lt; k - 1; i++) {
            printf(&quot;%d &quot;, a[i]);
        }
        printf(&quot;%d\n&quot;, a[k - 1]);
        delete[] a;
    }
    return 0;
}
[/c]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>865</wp:post_id>
		<wp:post_date><![CDATA[2014-08-14 12:37:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-14 04:37:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%80%e5%b0%8f%e7%9a%84k%e4%b8%aa%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%a0%86"><![CDATA[堆]]></category>
		<category domain="category" nicename="data-structure"><![CDATA[数据结构]]></category>
		<category domain="post_tag" nicename="%e6%9c%80%e5%b0%8f%e7%9a%84k%e4%b8%aa%e6%95%b0"><![CDATA[最小的K个数]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791216]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>POJ2001-Shortest Prefixes</title>
		<link>http://127.0.0.1:8000/blog/2014/08/14/poj2001-shortest-prefixes/</link>
		<pubDate>Thu, 14 Aug 2014 08:49:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=868</guid>
		<description></description>
		<content:encoded><![CDATA[Trie又称为前缀树或字典树，它有许多重要用途，如搜索提示，以及作为AC自动机的基础。POJ2001-最短前缀这题是Trie的基础应用。
<strong>Description</strong>
A prefix of a string is a substring starting at the beginning of the given string. The prefixes of "carbon" are: "c", "ca", "car", "carb", "carbo", and "carbon". Note that the empty string is not considered a prefix in this problem, but every non-empty string is considered to be a prefix of itself. In everyday language, we tend to abbreviate words by prefixes. For example, "carbohydrate" is commonly abbreviated by "carb". In this problem, given a set of words, you will find for each word the shortest prefix that uniquely identifies the word it represents.

In the sample input below, "carbohydrate" can be abbreviated to "carboh", but it cannot be abbreviated to "carbo" (or anything shorter) because there are other words in the list that begin with "carbo".

An exact match will override a prefix match. For example, the prefix "car" matches the given word "car" exactly. Therefore, it is understood without ambiguity that "car" is an abbreviation for "car" , not for "carriage" or any of the other words in the list that begins with "car".
<strong>Input</strong>
The input contains at least two, but no more than 1000 lines. Each line contains one word consisting of 1 to 20 lower case letters.
<strong>Output</strong>
The output contains the same number of lines as the input. Each line of the output contains the word from the corresponding line of the input, followed by one blank space, and the shortest prefix that uniquely (without ambiguity) identifies this word.
<strong>Sample Input</strong>
carbohydrate
cart
carburetor
caramel
caribou
carbonic
cartilage
carbon
carriage
carton
car
carbonate
<strong>Sample Output</strong>
carbohydrate carboh
cart cart
carburetor carbu
caramel cara
caribou cari
carbonic carboni
cartilage carti
carbon carbon
carriage carr
carton carto
car car
carbonate carbona
​​​​​<strong>描述</strong>
一个字符串的前缀是从头开始的字符串的子串。"carbon"的前缀有："c","ca","car","carb","carbo"和"carbon".注意在这个问题中空串不认为是前缀，但是每个非空字符串自身可以认为是一个前缀。在日常用于中，我们倾向于用前缀来缩写词。例如，“carbohydrate"常缩写成"carb".在这个问题中，我们给出一系列单词，要求能够唯一标识单词的最短前缀。

例如在下面的例子中，"carbohydrate"可以缩写成"carboh",但是它不能缩写成"carbo"(或者更短),因为在这些词中，还有一个词是由"carbo"开始的.

精确匹配将覆盖前缀匹配。例如，前缀"car"精确匹配单词"car".因此,”car"可以毫无歧义的认为是"car"的简写,而不是"carriage"的，或者其它一些由"car"作为前缀的单词.
<strong>输入：</strong>
输入至少包含两个，不超过1000行，每行宝行一个由1到20个字母组成的单词。
<strong>输出：</strong>
输出包含与输入相同的行数。每一行输出由对应的输入组成，跟着一个空格，之后是唯一(无歧义)标示单词的最短前缀.
<strong>示例输入：</strong>
carbohydrate
cart
carburetor
caramel
caribou
carbonic
cartilage
carbon
carriage
carton
car
carbonate
<strong>示例输出：</strong>
carbohydrate carboh
cart cart
carburetor carbu
caramel cara
caribou cari
carbonic carboni
cartilage carti
carbon carbon
carriage carr
carton carto
car car
carbonate carbona
解答：
在节点中增加一个time字段来记录路径被经过的次数，如果time=1,则只出现一次，说明可以用来标示单词，作为最短前缀。
代码如下：

[c]
#include
#include
#include
using namespace std;
const int NUM = 26;
const int MAX = 1000;
const int LENGTH = 21;
char words[MAX][LENGTH];
struct NODE {
    int time;
    NODE *next[NUM];
    NODE () {
        time = 0;
        memset(next, 0, sizeof(next));
    }
};

void insert(NODE *root, char *s) {
    NODE *cur = root;
    while (*s != '&#92;&#48;') {
        int index = *s - 'a';
        if (!cur-&gt;next[index]) {
            cur-&gt;next[index] = new NODE();
            cur = cur-&gt;next[index];
            cur-&gt;time = 1;
        } else {
            cur = cur-&gt;next[index];
            (cur-&gt;time)++;
        }
        s++;
    }
}
void search(NODE *root, char *s) {
    NODE *cur = root;
    while (*s != '&#92;&#48;') {
        int index = *s - 'a';
        cur = cur-&gt;next[index];
        if (cur-&gt;time != 1) {
            printf(&quot;%c&quot;, *s);
            s++;
        } else {
            printf(&quot;%c&quot;, *s);
            break;
        }
    }
    printf(&quot;\n&quot;);
}
int main() {
    int total = 0;
    NODE * root = new NODE();
    while (scanf(&quot;%s&quot;, words[total]) != EOF) {
        insert(root, words[total]);
        total++;
    }
    for (int i = 0; i &lt; total; i++) {
        printf(&quot;%s &quot;, words[i]);
        search(root, words[i]);
    }
    return 0;
}
[/c]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>868</wp:post_id>
		<wp:post_date><![CDATA[2014-08-14 16:49:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-14 08:49:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[poj2001-shortest-prefixes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="trie"><![CDATA[trie]]></category>
		<category domain="post_tag" nicename="%e5%89%8d%e7%bc%80%e6%a0%91"><![CDATA[前缀树]]></category>
		<category domain="post_tag" nicename="%e5%ad%97%e5%85%b8%e6%a0%91"><![CDATA[字典树]]></category>
		<category domain="category" nicename="data-structure"><![CDATA[数据结构]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791217]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HDU2222-Keywords Search</title>
		<link>http://127.0.0.1:8000/blog/2014/08/16/hdu2222-keywords-search/</link>
		<pubDate>Sat, 16 Aug 2014 03:12:23 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=873</guid>
		<description></description>
		<content:encoded><![CDATA[AC自动机作为多模式匹配的经典方法，在关键词过滤中有重要应用，在我看来，AC自动机主要是这样几个步骤，第一步是先建立关键词的trie数，第二步是构建自动机，建立关键词之间的联系，第三步是利用第二步构建的自动机进行检索。HDU2222-关键词搜索是AC自动机的一个简单应用。关于AC自动机的资料，可以看这里<a href="http://www.notonlysuccess.com/index.php/aho-corasick-automaton/" target="_blank">http://www.notonlysuccess.com/index.php/aho-corasick-automaton/</a>.
<strong>问题描述</strong>
现在，搜索引擎如谷歌，百度等已经走进每个人的生活。
Wiskey也想在他的图片检索系统中实现这个功能。
每一张图片有一段描述，当用户输入关键字查找图片时，系统会将这些关键字与图片的描述进行匹配，然后显示与这些关键字最匹配的图片。
为了简化用题，这里给你出一段图片的描述，和一些关键字，请你告诉我​将匹配多少个关键字。
<strong>输入</strong>
第一行是一个整数，它的意思是有多少个测试用例。
每一个测试用例包含整数N，它的意思是有多少个关键字。(N &lt;= 10000)
每一个关键字是由'a'-'z'的字符组成，长度不超过50.
用例的最后一行​是描述，长度不超过1000000.
<strong>示例输入</strong>
1
5
she
he
say
shr
her
yasherhs
<strong>示例输出</strong>
3

解法：
AC自动机的简单应用。有一个坑是，输入中关键词存在重复时，要计算多次。

代码如下
[c]
#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;queue&gt;
using namespace std;
const int NUM = 26;
struct NODE {
    int cnt;
    NODE *fail;
    NODE *next[NUM];
    NODE () {
        cnt = 0;
        fail = NULL;
        memset(next, 0, sizeof(next));
    }
};

void insert(NODE *root, char *s) {
    NODE *cur = root;
    while (*s) {
        int index = *s - 'a';
        if (!cur-&gt;next[index]) {
            cur-&gt;next[index] = new NODE();
        }
        cur = cur-&gt;next[index];
        s++;
    }
    cur-&gt;cnt++;
} 
void ac_build(NODE *root) {
    queue &lt;NODE *&gt; q;
    NODE *cur;
    root-&gt;fail = NULL;
    for (int i = 0; i &lt; NUM; i++) {
        if (root-&gt;next[i]) {
            root-&gt;next[i]-&gt;fail = root;
            q.push(root-&gt;next[i]);
        }
    } 
    while (!q.empty()) {
        cur = q.front();
        q.pop();
        for (int i = 0; i &lt; NUM; i++) {
            if (cur-&gt;next[i]) {
                q.push(cur-&gt;next[i]);
                NODE *temp = cur-&gt;fail;
                while (temp) {
                    if (temp-&gt;next[i]) {
                        cur-&gt;next[i]-&gt;fail = temp-&gt;next[i];
                        break;
                    }
                    temp = temp-&gt;fail;
                }
                if (temp == NULL) {
                    cur-&gt;next[i]-&gt;fail = root;
                }
            }
        }
    }
}
int ac_find(NODE *root, char *s) {
    int sum = 0;
    NODE *cur = root;
    while (*s) {
        int index = *s - 'a';
        while (cur-&gt;next[index] == NULL &amp;&amp; cur != root) {
            cur = cur-&gt;fail;
        }
        cur = (cur-&gt;next[index] == NULL) ? root : cur-&gt;next[index]; 
        NODE *temp = cur;
        while (temp != root &amp;&amp; temp-&gt;cnt != -1) {  
            sum += temp-&gt;cnt;
            temp-&gt;cnt = -1;
            temp = temp-&gt;fail;
        }
        s++;
    }
    return sum;
}
int main() {
    int ncase, n;
    char word[51];
    char desc[1000001];
    scanf(&quot;%d&quot;, &amp;ncase);
    while (ncase--) {
        NODE *root = new NODE();
        scanf(&quot;%d&quot;, &amp;n);
        for (int i = 0; i &lt; n; i++) {
            scanf(&quot;%s&quot;, word);
            insert(root, word);
        }
        scanf(&quot;%s&quot;, desc);
        ac_build(root);
        int res = ac_find(root, desc);
        printf(&quot;%d\n&quot;, res);
    }
    return 0;
}
[/c]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>873</wp:post_id>
		<wp:post_date><![CDATA[2014-08-16 11:12:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-16 03:12:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[hdu2222-keywords-search]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ac%e8%87%aa%e5%8a%a8%e6%9c%ba"><![CDATA[AC自动机]]></category>
		<category domain="category" nicename="data-structure"><![CDATA[数据结构]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791218]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最大子矩阵</title>
		<link>http://127.0.0.1:8000/blog/2014/08/16/%e6%9c%80%e5%a4%a7%e5%ad%90%e7%9f%a9%e9%98%b5/</link>
		<pubDate>Sat, 16 Aug 2014 05:50:19 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=876</guid>
		<description></description>
		<content:encoded><![CDATA[昨天去面试，面试官出了一道最大连续子序列的题目后，很快就做出来，因为前不久还做过笔记的。之后出了一道，最大子矩阵的题目。也就是给出一个矩阵，如：
0 -2 -7 0 
9 2 -6 2 
-4 1 -4 1 
-1 8 0 -2 
求它的子矩阵的最大和。
如
9 2 
-4 1 
-1 8
是最大子矩阵，和为15.​

想了一会之后，找到了一个转化为最大连续子序列的办法。也就是先对列求和，之后再用最大连续子序列的方法。给出这个办法后，还想考虑优化，只是一直想不出来。回来之后，想起编程之美上有类似的题目，看了之后，没想到已经是最优的了。又想起以前在POJ应该做过类似的题目，于是找到了POJ1050- To The Max. 编写代码如下：
[c]
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define N 100
int a[N][N];
int b[N];
int max_sub_array(int *a, int n) {
    int max_sum = a[0];
    int sum = a[0];
    for (int i = 1; i &lt; n; i++) {
        if (sum &lt; 0) {
            sum = 0;
        }
        sum += a[i];
        if (sum &gt; max_sum) {
            max_sum = sum;
        }
    }
    return max_sum;
}
int main() {
    int n;
    scanf(&quot;%d&quot;, &amp;n);
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            scanf(&quot;%d&quot;, &amp;a[i][j]);
        }
    }
    int max_sum = -127 * 100 * 100;
    for (int i = 0; i &lt; n; i++) {
        for (int k = 0; k &lt; n; k++) {
            b[k] = 0;
        }
        for (int j = i; j &lt; n; j++) {
            for (int k = 0; k &lt; n; k++) {
                b[k] += a[j][k];
            }
            int sum = max_sub_array(b, n);
            if (sum &gt; max_sum) {
                max_sum = sum;
            }
        }
    }
    printf(&quot;%d\n&quot;, max_sum);
    return 0;
}
[/c]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>876</wp:post_id>
		<wp:post_date><![CDATA[2014-08-16 13:50:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-16 05:50:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%80%e5%a4%a7%e5%ad%90%e7%9f%a9%e9%98%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%9c%80%e5%a4%a7%e5%ad%90%e7%9f%a9%e9%98%b5"><![CDATA[最大子矩阵]]></category>
		<category domain="post_tag" nicename="%e6%9c%80%e5%a4%a7%e8%bf%9e%e7%bb%ad%e5%ad%90%e5%ba%8f%e5%88%97"><![CDATA[最大连续子序列]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791219]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python筛法求素数的优化</title>
		<link>http://127.0.0.1:8000/blog/2014/08/16/python%e7%ad%9b%e6%b3%95%e6%b1%82%e7%b4%a0%e6%95%b0%e7%9a%84%e4%bc%98%e5%8c%96/</link>
		<pubDate>Sat, 16 Aug 2014 13:13:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=882</guid>
		<description></description>
		<content:encoded><![CDATA[在pythontip上做题时,有这样一道题，
给你一个正整数N(1 <= N <= 10000000)，求{1,2,3,...,N}中质数的个数。
如N=3， 输出2.
也就是求N以内质数的个数。
刚开始用以前写的筛法写了一个最初版本，
[python]
N = 10000000
primes = [True for i in xrange(N + 1)] 
primes[0] = primes[1] = False
for i in xrange(2, N + 1): 
    if not primes[i]:
        continue
    n = i * i 
    while n &lt; N + 1:
        primes[n] = False
        n += i
print len([i for i in xrange(N + 1) if primes[i]])
[/python]
发现超时，用time模块的clock测试,用了16s.之后一步一步优化，先将len([i for i in xrange(N + 1) if primes[i]])这句改成primes.count(True)时间缩短到14s,之后看了讨论组里的讨论,将
[python]
n = i * i 
    while n &lt; N + 1:
        primes[n] = False
        n += i
[/python]
这部分改成
[python]
primes[i * i:N + 1:i] = [False] * ((N - i * i) / i + 1)
[/python]
时间没有明显的变化，因为看到[False] * ((N - i * i) / i + 1)，于是将[True for i in xrange(N + 1)] 这行改成[True] * (N + 1) ，速度明显加快，只用了4s,经过这样优化后，程序变成了
[python]
N = 10000000
primes = [True] * (N + 1) 
primes[0] = primes[1] = False
for i in xrange(2, N + 1): 
    if not primes[i]:
        continue
    primes[i * i:N + 1:i] = [False] * ((N - i * i) / i + 1)
print primes.count(True)
[/python]
之后想办法将for循环去掉。于是将它改成
[python]
i = 2
while i * i &lt;= N:
    if primes[i]:
        primes[i * i:N + 1:i] = [False] * ((N - i * i) / i + 1)
    i += 1
[/python]
最终为
[python]
N = 10000000
primes = [True] * (N + 1) 
primes[0] = primes[1] = False
i = 2
while i * i &lt;= N:
    if primes[i]:
        primes[i * i:N + 1:i] = [False] * ((N - i * i) / i + 1)
    i += 1
print primes.count(True)
[/python]
时间跑到了2s以内，提交后通过了。

之后将之前求素数的程序<a href="http://program.dengshilong.org/2014/07/15/%E7%AD%9B%E6%B3%95%E5%BE%97%E5%88%B0%E7%B4%A0%E6%95%B0/">筛法得到素数</a>进行修改,得到
[python]
def getPrimes(n):
    primes = [True] * (n + 1)
    primes[0] = primes[1] = False
    i = 2
    while i * i &lt;= n:
        if primes[i]:
            primes[i * i:n + 1:i] = [False] * ((n - i * i) / i + 1)
        i += 1
    return [i for i in xrange(n + 1) if primes[i]]
[/python]
​]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>882</wp:post_id>
		<wp:post_date><![CDATA[2014-08-16 21:13:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-16 13:13:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python%e7%ad%9b%e6%b3%95%e6%b1%82%e7%b4%a0%e6%95%b0%e7%9a%84%e4%bc%98%e5%8c%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%88%97%e8%a1%a8%e8%a7%a3%e6%9e%90"><![CDATA[列表解析]]></category>
		<category domain="category" nicename="math"><![CDATA[数学]]></category>
		<category domain="post_tag" nicename="%e7%ad%9b%e6%b3%95"><![CDATA[筛法]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<category domain="post_tag" nicename="%e7%b4%a0%e6%95%b0"><![CDATA[素数]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791220]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>790</wp:comment_id>
			<wp:comment_author><![CDATA[邓世龙的学习笔记 &raquo; 筛法得到素数]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://program.dengshilong.org/2014/07/15/%e7%ad%9b%e6%b3%95%e5%be%97%e5%88%b0%e7%b4%a0%e6%95%b0/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.251.90.111]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-08-16 21:17:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-08-16 13:17:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 之所以这么改，可参看Python筛法求素数的优化 [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>数字漩涡 </title>
		<link>http://127.0.0.1:8000/blog/2014/08/22/%e6%95%b0%e5%ad%97%e6%bc%a9%e6%b6%a1/</link>
		<pubDate>Fri, 22 Aug 2014 02:56:26 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=893</guid>
		<description></description>
		<content:encoded><![CDATA[还在学校的时候，绍祝师兄每次面试回来，如果有趣题都会和我讨论，因为正好坐他边上，记得这题也是那时讨论的一题。记得当时想了一会后就做出来了。只是时隔多年，再次遇到这题，已经忘记当初是怎么做了。

题目很简单，对于3 打印
 1 2 3
8 9 4
7 6 5
对于4，打印
 1  2   3  4
12 13 14  5
11 16 15  6
10  9  8  7
​​
观察之后发现规律，先是向右一直走，之后向下一直走，之后向左，最后向上，每次变换方向的原因有两个，一个是走到矩形的边界，另一个是沿着这个方向走，前面的一个位置已经走过了。在当前位置，要找下一个有效位置，只需按顺序遍历上面四个方向即可。写成代码如下：
[python]
def spiral_number(N):
    step_x = [0, 1, 0, -1]
    step_y = [1, 0, -1, 0]
    a = [[0 for j in xrange(N)] for j in xrange(N)]
    dir = 0
    i = 0
    j = 0
    a[i][j] = 1
    n = 2
    while n &lt;= N ** 2:
        x = i + step_x[dir]
        y = j + step_y[dir]
        if x &gt;= 0 and x &lt; N and y &gt;= 0 and y &lt; N and a[x][y] == 0:
            a[x][y] = n
            n += 1
            i = x
            j = y
        else:
            dir = (dir + 1 + len(step_x)) % len(step_x)
        
    for i in xrange(N):
        for j in xrange(N):
            print a[i][j],
        print

spiral_number(4)
[/python]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>893</wp:post_id>
		<wp:post_date><![CDATA[2014-08-22 10:56:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-22 02:56:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%95%b0%e5%ad%97%e6%bc%a9%e6%b6%a1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%9e%9a%e4%b8%be"><![CDATA[枚举]]></category>
		<category domain="post_tag" nicename="%e6%bc%a9%e6%b6%a1"><![CDATA[漩涡]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791221]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lucene入门例子</title>
		<link>http://127.0.0.1:8000/blog/2014/08/27/lucene%e5%85%a5%e9%97%a8%e4%be%8b%e5%ad%90/</link>
		<pubDate>Wed, 27 Aug 2014 13:27:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=896</guid>
		<description></description>
		<content:encoded><![CDATA[开始Lucene之路,从官网下了最新的4.9.0,从先从小例子开始.
建索引
[java]
package org.dsl;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig.OpenMode;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;
import java.io.File;
import java.io.IOException;
public class Index {
    public static void main(String[] args) throws IOException {
        String INDEX_DIR = &quot;e:\\index&quot;;
        Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_4_9);
        IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_4_9, analyzer);
        IndexWriter writer = null;
        iwc.setOpenMode(OpenMode.CREATE);
        iwc.setUseCompoundFile(false);
        try {
            writer = new IndexWriter(FSDirectory.open(new File(INDEX_DIR)), iwc);
            Document doc = new Document();
            doc.add(new TextField(&quot;title&quot;, &quot;who are you, you are a man&quot;, Field.Store.YES));
            doc.add(new TextField(&quot;content&quot;, &quot;A long way to go there. Please drive a car&quot;, Field.Store.NO));
            writer.addDocument(doc);
            doc = new Document();
            doc.add(new TextField(&quot;title&quot;, &quot;are you sure&quot;, Field.Store.YES));
            doc.add(new TextField(&quot;content&quot;, &quot;He is a good man. He is a driver&quot;, Field.Store.NO));
            writer.addDocument(doc);
            writer.commit();
            writer.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
}
[/java]
搜索
[java]
package org.dsl;
import java.io.File;
import java.util.Date;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.Term;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;
public class Search {
    private Search() {}
    public static void main(String[] args) throws Exception {
        String index = &quot;e:\\index&quot;;
        IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));
        IndexSearcher searcher = new IndexSearcher(reader);
        String queryString = &quot;driver&quot;;
        Query query = new TermQuery(new Term(&quot;content&quot;, queryString));
        System.out.println(&quot;Searching for: &quot; + query.toString());
        Date start = new Date();
        TopDocs results = searcher.search(query, null, 100);
        Date end = new Date();
        System.out.println(&quot;Time: &quot;+(end.getTime()-start.getTime())+&quot;ms&quot;);
        ScoreDoc[] hits = results.scoreDocs;
        int numTotalHits = results.totalHits;
        System.out.println(numTotalHits + &quot; total matching documents&quot;);
        for (int i = 0; i &lt; hits.length; i++) {
            String output = &quot;&quot;;
            Document doc = searcher.doc(hits[i].doc);
            output += &quot;doc=&quot;+hits[i].doc+&quot; score=&quot;+hits[i].score;
            String title = doc.get(&quot;title&quot;);
            if (title != null) {
                output += &quot; &quot; + title;
            }
            System.out.println(output);
        }
        reader.close();
    }
}
[/java]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>896</wp:post_id>
		<wp:post_date><![CDATA[2014-08-27 21:27:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-27 13:27:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lucene%e5%85%a5%e9%97%a8%e4%be%8b%e5%ad%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="lucene"><![CDATA[Lucene]]></category>
		<category domain="post_tag" nicename="lucene"><![CDATA[Lucene]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791222]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Screen-会话管理工具</title>
		<link>http://127.0.0.1:8000/blog/2014/09/04/screen-%e4%bc%9a%e8%af%9d%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7/</link>
		<pubDate>Thu, 04 Sep 2014 14:47:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=901</guid>
		<description></description>
		<content:encoded><![CDATA[工作一年后,才知道有Screen这个东西,太不应该了,也许真是环境影响人.

今天遇到问题,导师过来指导,看我的SecureCRT开着很多个会话,没有用Screen,于是提醒可以用这个.之前在公司的wiki上看到过介绍,本以为就是SecureCRT,原来是一个管理会话工具,有了它之后,就不需要再开很多个会话,然后关闭了.会话间的切换也可以很方便的用快捷键命令,而不是鼠标,因为鼠标极其影响效率.

用了公司一个员工的配置
hardstatus alwayslastline "%{=b}%{b}%-w%{.BW}%10&gt;%n*%t%{-}%+w%&lt; %=%{kG}%C%A, %Y-%m-%d"
screen -t local1 0 bash
screen -t local2 1 bash
screen -t local3 2 bash
screen -t local4 3 bash
screen -t local5 4 bash

select 0

vim ~/.screenrc,复制上面内容.之后就可以使用Screen了.一些常用命令如下:
c-a : Ctrl + a
screen -S name #开一个session
screen -S name -X quit #杀死session
c-a c #创建一个窗口
c-a n #next 窗口
c-a p #previous 窗口
c-a A #为窗口命名
c-a d #detach screen
c-a #跳转到number的窗口
screen -ls #查看窗口
screen -r name #连接一个session
screen -x name #共享session
<span style="color: #000000;">可以参考</span><a href="http://hunsefee.diandian.com/post/2010-10-28/7319178" target="_blank">http://hunsefee.diandian.com/post/2010-10-28/7319178</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>901</wp:post_id>
		<wp:post_date><![CDATA[2014-09-04 22:47:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-04 14:47:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[screen-%e4%bc%9a%e8%af%9d%e7%ae%a1%e7%90%86%e5%b7%a5%e5%85%b7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="screen"><![CDATA[Screen]]></category>
		<category domain="category" nicename="software"><![CDATA[软件安装]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791223]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>solr分布式搜索时设置分页的一个错误 </title>
		<link>http://127.0.0.1:8000/blog/2014/09/19/solr%e5%88%86%e5%b8%83%e5%bc%8f%e6%90%9c%e7%b4%a2%e6%97%b6%e8%ae%be%e7%bd%ae%e5%88%86%e9%a1%b5%e7%9a%84%e4%b8%80%e4%b8%aa%e9%94%99%e8%af%af/</link>
		<pubDate>Fri, 19 Sep 2014 13:16:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=905</guid>
		<description></description>
		<content:encoded><![CDATA[最近在做一个站内搜索功能,有用到一个分页功能.搜索时会传两个参数pageId和pageSize 用来指定页号与每页的条数.solr已经提供了start和rows两个参数,于是将分页参数与之对应起来,在component初始化时写了如下代码:
[java]
String pidStr = req.getParams().get(PAGE_ID);
if ( pidStr != null ) { 
      int pageId = req.getParams().getInt(PAGE_ID, 0);
      int pageSize = req.getParams().getInt(PAGE_SIZE, 10);
      pageId = (pageId &gt; -1) ? pageId : 0; 
      pageSize = (pageSize &gt; 0 ) ? pageSize : 10; 
      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());
      params.set(CommonParams.START, pageId * pageSize);
      params.set(CommonParams.ROWS, pageSize);
      params.set(CommonParams.WT, &quot;json&quot;);
      params.set(CommonParams.OMIT_HEADER, &quot;true&quot;);
      req.setParams(params);
}
[/java]
可是一直得不到正确的结果，在后台输出日志,发现start和rows在设置了上面的值后，start和rows会用来构建新的查询,在新的查询中start会变为0,而rows会变成start与rows的和，可是之后start和rows又会变成原先的值，于是得不到想要的结果。

举个例子,假设要搜第三页,每页10条,则可设置pageId为2,pageSize为10,于是start被设置成20,rows被设置成10,之后start和rows会被用于生成向shard发送的请求,start被设置为0,rows设置为30.问题在于这个请求发出之后start的值又变成了20,rows变成了10,百思不得其解.
 
跟踪代码到createMainQuery函数,看到如下代码：
[java]
if (rb.shards_start &gt; -1) {
    // if the client set shards.start set this explicitly
    sreq.params.set(CommonParams.START, rb.shards_start);
} else {
    sreq.params.set(CommonParams.START, &quot;0&quot;);
}
if (rb.shards_rows &gt; -1) {
    // if the client set shards.rows set this explicity
    sreq.params.set(CommonParams.ROWS, rb.shards_rows);
} else {
    sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset()
            + rb.getSortSpec().getCount());
}
[/java]
打印日志rb.shards_start与rb.shards_rows都为-1,于是start变为0,row变成30,这是正确的,那么关键点就是要找出start和rows何时变成20与10，跟踪程序找不到原因。看后台日志,发现初始化每次都会执行两次,然后想到分布式，才渐渐明白问题的原因.

在一次分布式查询中,solr的leader会接受请求，然后对请求进行解析，之后重新构建请求，将新的请求发给各个Shard,Shard做非分布式查询之后,将结果发给leader,之后leader汇总各个Shard的响应,进行最后的处理(如做offset等),问题是leader和Shard都是同一份代码,而且初始化部分每个Shard接收leader的请求后都要执行,于是start和rows又被重新设置了.在上面的例子中,start和rows在Shard中分别被设置成20和10了,只会Shard做非分布式查询,这样Shard只会返回10条数据给leader，这显然不是想要的.
  
之后发现,在leader构建的新的请求中,会添加isShard=true参数,于是可以修改代码如下:
[java]
boolean isShard = req.getParams().getBool(ShardParams.IS_SHARD, false);
if ( pidStr != null &amp;&amp; !isShard) { //分布式时，只有leader才需要执行这里
[/java]
之后结果就是正确的。到这里，才有点明白分布式程序，真不好写.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>905</wp:post_id>
		<wp:post_date><![CDATA[2014-09-19 21:16:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-19 13:16:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e5%88%86%e5%b8%83%e5%bc%8f%e6%90%9c%e7%b4%a2%e6%97%b6%e8%ae%be%e7%bd%ae%e5%88%86%e9%a1%b5%e7%9a%84%e4%b8%80%e4%b8%aa%e9%94%99%e8%af%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e5%b8%83%e5%bc%8f"><![CDATA[分布式]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e9%a1%b5"><![CDATA[分页]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791224]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[solr4-8%e5%88%86%e5%b8%83%e5%bc%8f%e6%90%9c%e7%b4%a2%e6%97%b6%e8%ae%be%e7%bd%ae%e5%88%86%e9%a1%b5%e7%9a%84%e4%b8%80%e4%b8%aa%e9%94%99%e8%af%af]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[solr4%e5%88%86%e5%b8%83%e5%bc%8f%e6%90%9c%e7%b4%a2%e6%97%b6%e8%ae%be%e7%bd%ae%e5%88%86%e9%a1%b5%e7%9a%84%e4%b8%80%e4%b8%aa%e9%94%99%e8%af%af]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sphinx-for-Chinese的分词细粒度问题解决代码</title>
		<link>http://127.0.0.1:8000/blog/2014/10/19/sphinx-for-chinese%e7%9a%84%e5%88%86%e8%af%8d%e7%bb%86%e7%b2%92%e5%ba%a6%e9%97%ae%e9%a2%98%e8%a7%a3%e5%86%b3%e4%bb%a3%e7%a0%81/</link>
		<pubDate>Sun, 19 Oct 2014 09:12:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=910</guid>
		<description></description>
		<content:encoded><![CDATA[感觉上，这段代码不贴上来，仿佛欠别人钱似的。趁现在还有些精力，以后很长一段时间都不会接触Sphinx了，赶紧把这件事给做了。
具体为什么这样改，可以看前面的文章。以下修改是基于sphinx-for-chinese-2.2.1-dev-r4311版本，之需要修改sphinx.cpp即可。

在2296行后面添加如下代码：
[c]
struct CSphWord
{
    BYTE m_sAccum[3 * SPH_MAX_WORD_LEN + 3];
    int length;
    const BYTE *m_pTokenStart;
    const BYTE *m_pTokenEnd;
};
class ISphWords
{
public:
    int Length () const
    {
        return m_dData.GetLength();
    }

    const CSphWord * First () const
    {
        return m_dData.Begin();
    }

    const CSphWord * Last () const
    {
        return &amp;m_dData.Last();
    }
    void Clean() {
        m_dData.Reset();
    }     

    void AddWord ( BYTE * word, int length, const BYTE *start, const BYTE *end)
    {
            CSphWord &amp; tWord = m_dData.Add();
            memcpy(tWord.m_sAccum, word, length);
            tWord.length = length;
            tWord.m_pTokenStart = start;
            tWord.m_pTokenEnd = end;
    }

public:
    CSphVector&lt;CSphWord&gt; m_dData;
};
[/c]

在2296行,virtual int GetMaxCodepointLength () const { return m_tLC.GetMaxCodepointLength(); }后面添加如下方法成员：
[c]virtual BYTE *              ProcessParsedWord();[/c]
在2303行，Darts::DoubleArray::result_pair_type    m_pResultPair[256];后面添加如下数据成员：
[c]
/*****add by luodongshan for indexer*****/
        int totalParsedWordsNum; //总共需要处理的词
        int processedParsedWordsNum; //已经处理的词
        int isIndexer; //是否开启细粒度分词
        bool needMoreParser; //需要更细粒度分词
        const char * m_pTempCur;
        char  m_BestWord[3 * SPH_MAX_WORD_LEN + 3];
        int m_iBestWordLength;
        ISphWords m_Words;
        CSphWord *current;
        bool isParserEnd;
[/c]
在6448行，m_bHasBlend = false;后面添加如下初始化代码：
[c]
        char *penv = getenv(&quot;IS_INDEX&quot;);
        if (penv != NULL) {
                isIndexer = 1;
        } else {
                isIndexer = 0;
        }     
        needMoreParser = false;
        current = NULL;
        isParserEnd = false;
[/c]
在6743后面添加新增方法成员ProcessParsedWord的实现：
[c]
template &lt; bool IS_QUERY &gt;
BYTE * CSphTokenizer_UTF8Chinese&lt;IS_QUERY&gt;::ProcessParsedWord() {
    for (; current != NULL &amp;&amp; current &lt;= m_Words.Last(); ) {
        memcpy(m_sAccum, current-&gt;m_sAccum, current-&gt;length);
        m_pTokenStart = current-&gt;m_pTokenStart;
        m_pTokenEnd = current-&gt;m_pTokenEnd;
        current++;
        return m_sAccum;
    }
    isParserEnd = false;
    m_Words.Clean();
    current = NULL;
    return NULL;
}
[/c]
在6785行， bool bGotSoft = false; // hey Beavis he said soft huh huhhuh 后面增加如下代码：
[c]
        if (isIndexer &amp;&amp; isParserEnd) { //使用MMSEG分词结束，处理细粒度分词得到的词
                return ProcessParsedWord();
        }  
[/c]
在6791行， int iNum;后面增加如下代码：
[c]
        /***add by dengsl 2014/06/24****/
        if(isIndexer &amp;&amp; needMoreParser) { //对最优匹配进行细粒度分词
                while (m_pTempCur &lt; m_BestWord + m_iBestWordLength) {
                        if(processedParsedWordsNum == totalParsedWordsNum) { //此位置的前缀词已处理完，跳到下一位置
                                size_t minWordLength = m_pResultPair[0].length;
                                for(int i = 1; i &lt; totalParsedWordsNum; i++) {
                                        if(m_pResultPair[i].length &lt; minWordLength) {
                                                minWordLength = m_pResultPair[i].length;
                                        }     
                                }     
                                m_pTempCur += minWordLength;
                                m_pText=(Darts::DoubleArray::key_type *)(m_pCur + (m_pTempCur - m_BestWord));
                                iNum = m_tDa.commonPrefixSearch(m_pText, m_pResultPair, 256, m_pBufferMax-(m_pCur+(m_pTempCur-m_BestWord)));
                                totalParsedWordsNum = iNum;
                                processedParsedWordsNum = 0;
                        } else {
                                iWordLength = m_pResultPair[processedParsedWordsNum].length;
                                processedParsedWordsNum++;
                                if (m_pTempCur == m_BestWord &amp;&amp; iWordLength == m_iBestWordLength) {
                                        continue;
                                }     
                                memcpy(m_sAccum, m_pText, iWordLength);
                                m_sAccum[iWordLength] = '&#92;&#48;';
                                if( 3 * SPH_MAX_WORD_LEN + 3 &gt;= iWordLength + 2) {
                                        m_sAccum[iWordLength + 1] = '&#92;&#48;';
                                        if(m_pTokenEnd == m_pBufferMax) { //是结尾，保存结尾符标志
                                                m_sAccum[iWordLength + 1] = 1;
                                        }     
                                }     
                                m_Words.AddWord(m_sAccum, iWordLength + 2, m_pCur + (m_pTempCur - m_BestWord), m_pCur + (m_pTempCur - m_BestWord) + iWordLength);
                        }     
                }     
                m_pCur += m_iBestWordLength;
                needMoreParser = false;
                iWordLength = 0;
                current = const_cast&lt; CSphWord * &gt; ( m_Words.First() );
        }     
        /***add end by dengsl 2014/06/24****/
[/c]
在6832行，iNum = m_tDa.commonPrefixSearch(m_pText, m_pResultPair, 256, m_pBufferMax-m_pCur);后面增加如下代码：
[c]
                /***add by dengsl 2014/06/24****/
                if(isIndexer &amp;&amp; iNum &gt; 1) {
                        m_iBestWordLength=getBestWordLength(m_pText, m_pBufferMax-m_pCur);
                        memcpy(m_sAccum, m_pText, m_iBestWordLength);
                        m_sAccum[m_iBestWordLength]='&#92;&#48;';
                        m_pTokenStart = m_pCur;
                        m_pTokenEnd = m_pCur + m_iBestWordLength;

                        totalParsedWordsNum = iNum;
                        needMoreParser = true;
                        processedParsedWordsNum = 0;
                        memcpy(m_BestWord, m_pText, m_iBestWordLength);
                        m_BestWord[m_iBestWordLength]='&#92;&#48;';
                        m_pTempCur = m_BestWord;
                        if( 3 * SPH_MAX_WORD_LEN + 3 &gt;= m_iBestWordLength + 2) {
                                m_sAccum[m_iBestWordLength + 1] = '&#92;&#48;';
                                if(m_pTokenEnd == m_pBufferMax) { //是结尾，保存结尾符标志
                                        m_sAccum[m_iBestWordLength + 1] = 1;
                                }     
                        }     
                        return m_sAccum;
                }     
                /***add by dengsl 2014/06/24****/
[/c]
在6903行，将
[c]return NULL;[/c]
修改为
[c]
/* dengsl */
isParserEnd = true;
return ProcessParsedWord();
[/c]
在6914行，将
[c]
 if_const ( IS_BLEND &amp;&amp; !BlendAdjust ( pCur ) )
     return NULL;
[/c]
修改成：
[c]
/* dengsl */
if_const ( IS_BLEND &amp;&amp; !BlendAdjust ( pCur ) ) {
    isParserEnd = true;
    return ProcessParsedWord();
}  
[/c]
在27210行，m_tHits.AddHit ( uDocid, iWord, m_tState.m_iHitPos );后面增加如下代码：
[c]
        ///add by luodongshan 20140626
            if(sWord != NULL) {
                int sWord_len = strlen((char*)sWord);
                if(sWord_len + 2 &lt;= 3 * SPH_MAX_WORD_LEN + 3 &amp;&amp; sWord[sWord_len + 1] == 1 &amp;&amp;
                        getenv(&quot;IS_INDEX&quot;) != NULL &amp;&amp; !bSkipEndMarker )  {
                    CSphWordHit * pHit = const_cast &lt; CSphWordHit * &gt; ( m_tHits.Last() );
                    HITMAN::SetEndMarker ( &amp;pHit-&gt;m_iWordPos );

                }     
            }     
            ///add by luodongshan 20140626 end
[/c]
将过上面的修改，重新编译源码，之后设置环境变量IS_INDEX,即运行export IS_INDEX=1,就可以支持细粒度的划分。

一个需要注意的地方是,对于searchd,也变成细粒度分词了，这并不是我们想要的，所以对于searchd，需要使用未修改代码的searchd.因为我们想建索引时细粒度，搜索时粗粒度。

之所以要这样，是因为如果不这样处理，很多结果会搜出来了。如有文章内容分别为中大酒店，中大假日酒店。如果搜索时也是细粒度，则有中大，酒店，中，大，大酒店，酒，店等查询词，而大酒店只在中大酒店中存在，所以只会搜出中大酒店，这并不是我们想要的。
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>910</wp:post_id>
		<wp:post_date><![CDATA[2014-10-19 17:12:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-19 09:12:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sphinx-for-chinese%e7%9a%84%e5%88%86%e8%af%8d%e7%bb%86%e7%b2%92%e5%ba%a6%e9%97%ae%e9%a2%98%e8%a7%a3%e5%86%b3%e4%bb%a3%e7%a0%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="sphinx-for-chinese"><![CDATA[Sphinx-for-chinese]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e8%af%8d"><![CDATA[分词]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e7%bb%86%e7%b2%92%e5%ba%a6"><![CDATA[细粒度]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791225]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>int,double等转化成byte数组</title>
		<link>http://127.0.0.1:8000/blog/2014/09/24/intdouble%e7%ad%89%e8%bd%ac%e5%8c%96%e6%88%90byte%e6%95%b0%e7%bb%84/</link>
		<pubDate>Wed, 24 Sep 2014 14:23:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=913</guid>
		<description></description>
		<content:encoded><![CDATA[最近需要用到这个功能，本来想自己写，怕写错了，上网找了一下，都没找到合适的。看了solr与源码中的TrieField.java,有这一部分的代码，copy到这里。
[java]
public class ByteUtil {
    public static int toInt(byte[] arr) {
        return (arr[0] &lt;&lt; 24) | ((arr[1] &amp; 0xff) &lt;&lt; 16)
                | ((arr[2] &amp; 0xff) &lt;&lt; 8) | (arr[3] &amp; 0xff);
    }

    public static long toLong(byte[] arr) {
        int high = (arr[0] &lt;&lt; 24) | ((arr[1] &amp; 0xff) &lt;&lt; 16)
                | ((arr[2] &amp; 0xff) &lt;&lt; 8) | (arr[3] &amp; 0xff);
        int low = (arr[4] &lt;&lt; 24) | ((arr[5] &amp; 0xff) &lt;&lt; 16)
                | ((arr[6] &amp; 0xff) &lt;&lt; 8) | (arr[7] &amp; 0xff);
        return (((long) high) &lt;&lt; 32) | (low &amp; 0x0ffffffffL);
    }

    public static float toFloat(byte[] arr) {
        return Float.intBitsToFloat(toInt(arr));
    }

    public static double toDouble(byte[] arr) {
        return Double.longBitsToDouble(toLong(arr));
    }

    public static byte[] toArr(int val) {
        byte[] arr = new byte[4];
        arr[0] = (byte) (val &gt;&gt;&gt; 24);
        arr[1] = (byte) (val &gt;&gt;&gt; 16);
        arr[2] = (byte) (val &gt;&gt;&gt; 8);
        arr[3] = (byte) (val);
        return arr;
    }

    public static byte[] toArr(long val) {
        byte[] arr = new byte[8];
        arr[0] = (byte) (val &gt;&gt;&gt; 56);
        arr[1] = (byte) (val &gt;&gt;&gt; 48);
        arr[2] = (byte) (val &gt;&gt;&gt; 40);
        arr[3] = (byte) (val &gt;&gt;&gt; 32);
        arr[4] = (byte) (val &gt;&gt;&gt; 24);
        arr[5] = (byte) (val &gt;&gt;&gt; 16);
        arr[6] = (byte) (val &gt;&gt;&gt; 8);
        arr[7] = (byte) (val);
        return arr;
    }

    public static byte[] toArr(float val) {
        return toArr(Float.floatToRawIntBits(val));
    }

    public static byte[] toArr(double val) {
        return toArr(Double.doubleToRawLongBits(val));
    }
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>913</wp:post_id>
		<wp:post_date><![CDATA[2014-09-24 22:23:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-24 14:23:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[intdouble%e7%ad%89%e8%bd%ac%e5%8c%96%e6%88%90byte%e6%95%b0%e7%bb%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="byte%e6%95%b0%e7%bb%84"><![CDATA[byte数组]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="java-2"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="%e8%bd%ac%e6%8d%a2"><![CDATA[转换]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791226]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>796</wp:comment_id>
			<wp:comment_author><![CDATA[邓世龙的学习笔记 &raquo; solr非存储字段变成存储字段]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://program.dengshilong.org/2014/09/25/solr%e9%9d%9e%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5%e5%8f%98%e6%88%90%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.251.90.111]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-09-25 23:23:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-09-25 15:23:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] 还有就是,对于int,double等数值型数据,需要调用Field(String name, byte[] value)方法，也就是先将int,double等转化成byte[]数组，之后再构建。具体转化方法参见int,double等转化成byte数组. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>solr非存储字段变成存储字段</title>
		<link>http://127.0.0.1:8000/blog/2014/09/25/solr%e9%9d%9e%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5%e5%8f%98%e6%88%90%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5/</link>
		<pubDate>Thu, 25 Sep 2014 15:01:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=917</guid>
		<description></description>
		<content:encoded><![CDATA[试想这样一种情形，一个publish_time，原先是只索引不保存，运行了很长一段时间后，发现需要返回这个字段，于是改成既索引又保存。这样新进来的数据就可以返回这个字段的值，可是原先保存的数据将无法返回这个字段的值，因为没有保存。那如何解决这个问题？

一个解决的办法是将数据重新跑一遍，重建索引，这样所有的数据都可以返回publish_time这个字段。想想还有没有其它办法，看到建了索引，这样还是有办法可以拿到数据，一个解决的办法是读fiedcache. 索引加载时，会在fieldcache里记录字段信息，这样可以提高字段查询的速度。事实上，在上述例子中，进行publish_time字段查询时，就可以拿到所有数据的publish_time字段信息,而这些信息就是来自于fieldcache.

于是找到了一个切入点，在进行段合并时，将之前没有保存的字段信息从fieldcache中读出，写到新的段中，这样新生成的段中,所有数据都会有publish_time字段信息。

于是问题的关键就变成了如何处理在段合并时，读取fieldcache信息，并且增加到新段中.从《Lucene原理与代码分析》中可以知道，段合并主要是在SegmentMerger中完成,具体是在copyFieldsWithDeletions和copyFieldsNoDeletions中。看名字就可以知道这两个函数是对应的，所以只要讨论其中一个就行了。在合并时主要分两种情况，一种是合并的段所有字段的顺序和个数都是一样的，这样只要将段数据复制到新段中即可，另一种则需要像添加一篇新文档一样将段中的文档一篇篇添加，具体体现就在fieldsWriter.addDocument(doc);这句。

对于后一情况，需要从fieldcache中读取之前没有保存的字段，如FieldCache.DEFAULT.getInts(reader, fieldName)，这里的reader是一个SegmentReader实例, fieldName则是字段名,这样就可以得到字段的值,。而文档已经由Document doc = reader.document(docCount,  fieldSelectorMerge)读出，之后构建一个Field将它添加到文档中，并将文档添加到段中即可.

需要注意的是,reader一定要加载索引，否则会报，terms index was not loaded when this reader was created错误.

还有就是,对于int,double等数值型数据,需要调用Field(String name, byte[] value)方法，也就是先将int,double等转化成byte[]数组，之后再构建。具体转化方法参见<a href="http://program.dengshilong.org/2014/09/24/intdouble%E7%AD%89%E8%BD%AC%E5%8C%96%E6%88%90byte%E6%95%B0%E7%BB%84/" target="_blank">int,double等转化成byte数组</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>917</wp:post_id>
		<wp:post_date><![CDATA[2014-09-25 23:01:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-25 15:01:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e9%9d%9e%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5%e5%8f%98%e6%88%90%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fieldcache"><![CDATA[fieldcache]]></category>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e6%ae%b5%e5%90%88%e5%b9%b6"><![CDATA[段合并]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791227]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr分布式group查询过程</title>
		<link>http://127.0.0.1:8000/blog/2014/10/18/solr%e5%88%86%e5%b8%83%e5%bc%8fgroup%e6%9f%a5%e8%af%a2%e8%bf%87%e7%a8%8b/</link>
		<pubDate>Sat, 18 Oct 2014 03:45:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=926</guid>
		<description></description>
		<content:encoded><![CDATA[最近因为需要在分布式group查询时自定义自己的排序，因为在许多应用中都需要定义针对应用的排序规则。例如在用户名时，需要针对name,添加最匹配原则最左侧优先,最短优先等排序规则。而要使用这些规则， 一个前提条件是，先要拿到这个字段的值。可是在Solr提供的api中，无法定义这样精细的规则，所以必须修改代码才能支持.

在此之前，要了解分布式group查询的过程.当进行分布式group查询时,从QueryComponent中，可以知道,leader会向shard发送三次请求,分别对应三个阶段 ResponseBuilder.STAGE_TOP_GROUPS，ResponseBuilder.STAGE_EXECUTE_QUERY，ResponseBuilder.STAGE_GET_FIELDS三个阶段。

第一个阶段也可称为firstPhase,主要是得到字段的分组信息，也就是得到字段有哪些分组,请求的构造在 SearchGroupsRequestFactory中.在shard中，对这次请求作出响应是在QueryComponent中的process函数 内，if (params.getBool(GroupParams.GROUP_DISTRIBUTED_FIRST, false)) 中完成的，查询得到的结果由SearchGroupsResultTransformer的transform进行转换。对于shard返回的结 果，leader在SearchGroupShardResponseProcessor中进行处理.

第二个阶段也可称为secondPhase,这个阶段主要是得到每个分组内的文档id,在这个阶段,leader会将上一阶段得到的分组 信息发给shard,请求的构造在TopGroupsShardRequestFactory中.在shard中,对这次请求作出响应是在 QueryComponent中的process函数内，else if (params.getBool(GroupParams.GROUP_DISTRIBUTED_SECOND, false))中完成，查询得到的结果由TopGroupsResultTransformer的transform函数进行转换。对于shard返回的 结果,leader在TopGroupsShardResponseProcessor中进行处理

第三个阶段主要是得到文档的字段信息，在这个阶段，leader会将最终结果中的文档id发送给shard,请求的构造在 StoredFieldsShardRequestFactory中.在shard中，对这次请求作出响应是在QueryComponent中的 process函数内,String ids = params.get(ShardParams.IDS);语句后的if (ids != null)中。对于shard返回的结果,leader是在StoredFieldsShardResponseProcessor中. 

分布式group查询的过程差不多就这样，以后再介绍如何定义自己的排序。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>926</wp:post_id>
		<wp:post_date><![CDATA[2014-10-18 11:45:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-18 03:45:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e5%88%86%e5%b8%83%e5%bc%8fgroup%e6%9f%a5%e8%af%a2%e8%bf%87%e7%a8%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="group%e6%9f%a5%e8%af%a2"><![CDATA[group查询]]></category>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e5%b8%83%e5%bc%8f"><![CDATA[分布式]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791228]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sphinx更新属性无法为负值</title>
		<link>http://127.0.0.1:8000/blog/2014/10/19/sphinx%e6%9b%b4%e6%96%b0%e5%b1%9e%e6%80%a7%e6%97%a0%e6%b3%95%e4%b8%ba%e8%b4%9f%e5%80%bc/</link>
		<pubDate>Sun, 19 Oct 2014 04:36:08 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=929</guid>
		<description></description>
		<content:encoded><![CDATA[离职已经三个多月了，关于Sphinx的知识都快忘的差不多了，所以得赶紧记下来，以备不时之需。

离职前，在Sphinx-for-Chinese讨论组里异常活跃，很热心帮助群里的人解决问题。其中有个问题就是属性更新时无法设置为负值。于是看看Sphinx的更新属性流程。从searchd.cpp的main函数开始,到ServiceMain，TickPreforked,HandleClient,HandleClientSphinx,HandleCommandUpdate在这里看到
[c]
ARRAY_FOREACH ( i, tUpd.m_dAttrs )
    {
        tUpd.m_dAttrs[i] = tReq.GetString().ToLower().Leak();
        tUpd.m_dTypes[i] = SPH_ATTR_INTEGER;
        if ( iVer&gt;=0x102 )
        {     
            if ( tReq.GetDword() )
            {     
                tUpd.m_dTypes[i] = SPH_ATTR_UINT32SET;
                bMvaUpdate = true;
            }     
        }     
    }
[/c]
也就是说，这里默认是SPH_ATTR_INTEGER，而在Sphinx里，这个是无符号整型。因为在后面的一个判断语句里，有如下句子
[c]
} else
{     
       tUpd.m_dPool.Add ( tReq.GetDword() );
} 
[/c]  
查看GetDword()，就可以知道返回的是无符号整型。

之后跳转到DoCommandUpdate,UpdateAttributes
在其中发现这样一句话：
// this is a hack
 // Query parser tries to detect an attribute type. And this is wrong because, we should
 // take attribute type from schema. Probably we'll rewrite updates in future but
 // for now this fix just works.
 // Fixes cases like UPDATE float_attr=1 WHERE id=1;
也就是说，Sphinx更新属性时，没有去读取配置文件。而只是根据上面代码中的设定去读取更新信息，所以没有办法读取负数。一个主要的原因是，Sphinx没有32位整型数据的概念，只有32位无符号整型的概念。

因为这样，你也许会尝试将要更为负值的字段设置成64位整型，因为这个是有正负的，可是尝试之后还是不行。这是因为在代码里，没有根据配置文件去读数据，所以它还是按照上面的设定去读数据，这样还是无符号的。所以对于这个问题，还有待Sphinx的开发人员去解决.

太久没用vim看代码了,连ctags的跳转是ctrl + ] 和ctrl + o都快忘记了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>929</wp:post_id>
		<wp:post_date><![CDATA[2014-10-19 12:36:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-19 04:36:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sphinx%e6%9b%b4%e6%96%b0%e5%b1%9e%e6%80%a7%e6%97%a0%e6%b3%95%e4%b8%ba%e8%b4%9f%e5%80%bc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="sphinx"><![CDATA[Sphinx]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e6%9b%b4%e6%96%b0"><![CDATA[更新]]></category>
		<category domain="post_tag" nicename="%e8%b4%9f%e5%80%bc"><![CDATA[负值]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791229]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr分布式请求stage理解</title>
		<link>http://127.0.0.1:8000/blog/2014/10/20/solr%e5%88%86%e5%b8%83%e5%bc%8f%e8%af%b7%e6%b1%82stage%e7%90%86%e8%a7%a3/</link>
		<pubDate>Mon, 20 Oct 2014 12:52:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=940</guid>
		<description></description>
		<content:encoded><![CDATA[从QueryComponent可以知道，一个分布式solr请求从发起请求到对响应的结果进行处理会经历许多的stage.

对于分布式普通请求，从private int regularDistributedProcess(ResponseBuilder rb)的实现中可以看到，会经历ResponseBuilder.STAGE_PARSE_QUERY,ResponseBuilder.STAGE_EXECUTE_QUERY,ResponseBuilder.STAGE_GET_FIELDS,ResponseBuilder.STAGE_DONE等stage。从private void handleRegularResponses(ResponseBuilder rb, ShardRequest sreq)，分布式普通请求有ShardRequest.PURPOSE_GET_TOP_IDS，ShardRequest.PURPOSE_GET_FIELDS两次响应

对于分布式group请求,从private int groupedDistributedProcess(ResponseBuilder rb)的实现中可以看到，则会经历ResponseBuilder.STAGE_PARSE_QUERY，ResponseBuilder.STAGE_TOP_GROUPS，ResponseBuilder.STAGE_EXECUTE_QUERY，ResponseBuilder.STAGE_GET_FIELDS，ResponseBuilder.STAGE_DONE等stage。从private void handleGroupedResponses(ResponseBuilder rb, ShardRequest sreq)可以看到，分布式group请求有ShardRequest.PURPOSE_GET_TOP_GROUPS,ShardRequest.PURPOSE_GET_TOP_IDS,ShardRequest.PURPOSE_GET_FIELDS三次响应.

对于不同的请求和响应，有相应的类或者方法来实现。当然也可以自己实现相应的类或者方法来处理。即便是QueryComponent也可以自己定义，只需要实现相应的接口即可。

对于private int regularDistributedProcess(ResponseBuilder rb),一个可能的实现是：
[java]
 private int regularDistributedProcess(ResponseBuilder rb) {
        ComponentDistributedStage cdStage = stages.getCDStage(rb.stage);
        int nextState = ResponseBuilder.STAGE_DONE;
        if (cdStage != null) {
            cdStage.distributedProcess(rb, this);
            if (stages.containsNextState(rb.stage))
                nextState = stages.getNextState(rb.stage);
        }
        return nextState;
    }
[/java]
这里stages是一个Map,保存相应stage的实现类，父类型为ComponentDistributedStage。具体实现一个stage时，实现相应的接口即可。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>940</wp:post_id>
		<wp:post_date><![CDATA[2014-10-20 20:52:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-20 12:52:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e5%88%86%e5%b8%83%e5%bc%8f%e8%af%b7%e6%b1%82stage%e7%90%86%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="post_tag" nicename="stage"><![CDATA[stage]]></category>
		<category domain="post_tag" nicename="%e5%88%86%e5%b8%83%e5%bc%8f"><![CDATA[分布式]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791230]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>几道数学笔试题</title>
		<link>http://127.0.0.1:8000/blog/2014/10/25/%e5%87%a0%e9%81%93%e6%95%b0%e5%ad%a6%e7%ac%94%e8%af%95%e9%a2%98/</link>
		<pubDate>Sat, 25 Oct 2014 09:01:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=942</guid>
		<description></description>
		<content:encoded><![CDATA[从扬大数院毕业后，与数学渐行渐远，许多时候，考虑问题都角度渐渐变得工程，也就是直观，而不是从抽象的角度来解决。组里有一个实习生，带来了几道笔试题，思考后，解决了，从解决问题的角度，明显看出，越来越工程化了。

第一题说的是用6种颜色去涂一个立方体，问有几种涂法？

一个明显的解答是6的阶乘，也就是720次，可是其中有很多种涂色，经过旋转后是一样的，所以这是错的。看到这题，立刻想到了魔方，之后想到了骰子，考虑到骰子更加直观，就用骰子。思考之后，其实挺简单的。把1这面朝上，那么1的对面，也就是底面有5种可能的情况。之后再看侧面的情况，对于侧面，固定一面之后，它的对面还有3中可能的情况，之后剩下两个侧面，有2种情况。所以一共有5 * 3 * 2 = 30种情况。这题一个难点是最开始的1这面的选择，以及侧面时，固定一面的选择。对于1这面的选择，是不能算概率的，因为无论怎么排，总是可以把1这面朝上。而对于侧面时固定一面，这固定一面也是不能算概率的，因为无论怎么排，都可以固定一面。

第二题说的是，对于座位编号从1到5的5个人，将他们的座位打乱，每个人都不在自己座位上的情况有几种？

经过上一题的训练后，抽象一下题目 ，对于座位编号从1到 n的n个人，将他们的座位打乱，每个人都不在自己座位上的情况有几种
所以对于这题，相当于n为5的情况。依然用上面的类似方法。对于编号1的人，他一共有4种情况不在自己的座位上，假设他占了编号为5的座位。那么对于编号为5的这个人，他有两种情况可以选择，第一种，他占了座位1，则此时还剩三个人，这相当于n为3的情况，计算得到一种有2种可能；第二种情况是5不在座位1上，那么剩下的情况就相当于n=4的情形，计算得到有9中可能。于是最终结果等于5 * (2 + 9) = 44。而从这里也可以得到一个递推公式。设t(n)为人数为n时的可能情形。则t(n) = (n - 1) * (t(n - 1) + t(n - 2)，于是得到一个序列为0 1 2 9 44 265 ....

第三题说的是，一共有27个人想喝饮料，三个空瓶子可以换一瓶饮料，那么一共需要买多少瓶饮料才能保证每个人都能喝到一瓶饮料？

对于这题，立刻想到经典的借瓶子策略，对于这里，即只需要2个空瓶就可以喝一瓶饮料，这是因为当有2个空瓶时，可以向老板借一个空瓶，凑齐三个空瓶换来一瓶饮料，喝完之后，把空瓶换给老板。我想这里也是可以用到这个策略，于是写了一个序列1 2 6 18，等于27。所以最终的答案是18瓶。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>942</wp:post_id>
		<wp:post_date><![CDATA[2014-10-25 17:01:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-25 09:01:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%87%a0%e9%81%93%e6%95%b0%e5%ad%a6%e7%ac%94%e8%af%95%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e6%8e%92%e5%88%97"><![CDATA[排列]]></category>
		<category domain="category" nicename="math"><![CDATA[数学]]></category>
		<category domain="post_tag" nicename="%e7%ac%94%e8%af%95%e9%a2%98"><![CDATA[笔试题]]></category>
		<category domain="post_tag" nicename="%e7%bb%84%e5%90%88"><![CDATA[组合]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791231]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何实现site查询</title>
		<link>http://127.0.0.1:8000/blog/2014/10/27/%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0site%e6%9f%a5%e8%af%a2/</link>
		<pubDate>Mon, 27 Oct 2014 13:55:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=949</guid>
		<description></description>
		<content:encoded><![CDATA[在Solr的索引记录里看到，很多HostName是逆序的，如news.qq.com记录成moc.qq.swen, www.qq.com记录成moc.qq.www,moc.qq,finance.qq.com记录成moc.qq.ecnanif。后来才知道，这是为了实现像google那样的site功能.

site功能就是要查找索引中某一域名下的记录。一个实现办法就是实现上面的逆序存储。如此，要找出qq.com下的所有记录只需要用moc.qq.*去比较HostName即可。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>949</wp:post_id>
		<wp:post_date><![CDATA[2014-10-27 21:55:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-10-27 13:55:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0site%e6%9f%a5%e8%af%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="site%e6%9f%a5%e8%af%a2"><![CDATA[site查询]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791232]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr索引升级错误</title>
		<link>http://127.0.0.1:8000/blog/2014/11/08/solr%e7%b4%a2%e5%bc%95%e5%8d%87%e7%ba%a7%e9%94%99%e8%af%af/</link>
		<pubDate>Sat, 08 Nov 2014 07:53:58 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=952</guid>
		<description></description>
		<content:encoded><![CDATA[最近需要将Solr从1.4升级到4.8，于是需要将索引数据进行升级，而1.4无法直接升级到4.8，需要经过如下转化。从1.4升级到3.6，3.6升级到4.0，4.0升级到4.8。有几个引擎的数据升级很顺利，可是也有那么几个引擎的数据升级过程中出现了错误。

错误都出现在4.0升级到4.8时。调用栈如下：
Caused by: java.lang.IllegalArgumentException: maxValue must be non-negative (got: -1)
        at org.apache.lucene.util.packed.PackedInts.bitsRequired(PackedInts.java:1180)
        at org.apache.lucene.codecs.lucene41.ForUtil.bitsRequired(ForUtil.java:243)
        at org.apache.lucene.codecs.lucene41.ForUtil.writeBlock(ForUtil.java:164)
        at org.apache.lucene.codecs.lucene41.Lucene41PostingsWriter.addPosition(Lucene41PostingsWriter.java:368)
        at org.apache.lucene.codecs.PostingsConsumer.merge(PostingsConsumer.java:123)
        at org.apache.lucene.codecs.TermsConsumer.merge(TermsConsumer.java:164)
        at org.apache.lucene.codecs.FieldsConsumer.merge(FieldsConsumer.java:72)
        at org.apache.lucene.index.SegmentMerger.mergeTerms(SegmentMerger.java:389)
        at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:112)
        at org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:4132)
        at org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3728)
        at org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:405)
        at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:482)

看代码后，在PostingsConsumer 120行附近，final int position = postingsEnum.nextPosition();，这个position是负的，所以报错。看这附近的代码，知道是对索引词的在文档中的位置信息进行压缩。可是词在文档中的位置不应该是负的，于是报错。问题是，为什么这里会出现负的位置，只能解释是数据问题。一个解决的办法是跳过为负的位置，如此升级确实成功了，只是不知道有没有什么副作用。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>952</wp:post_id>
		<wp:post_date><![CDATA[2014-11-08 15:53:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-08 07:53:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e7%b4%a2%e5%bc%95%e5%8d%87%e7%ba%a7%e9%94%99%e8%af%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="post_tag" nicename="%e5%8d%87%e7%ba%a7"><![CDATA[升级]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e7%b4%a2%e5%bc%95"><![CDATA[索引]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791233]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr in Action笔记一</title>
		<link>http://127.0.0.1:8000/blog/2014/11/12/solr-in-action%e7%ac%94%e8%ae%b0%e4%b8%80/</link>
		<pubDate>Tue, 11 Nov 2014 16:23:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=954</guid>
		<description></description>
		<content:encoded><![CDATA[Solr in Action是本好书，决定复习一遍。

为什么需要搜索引擎，或者说搜索引擎有什么特别的地方，需要在应用中用到它？

搜索引擎有四个主要特征：

1.文本为中心。

当用户需要在文本中查找所需要的信息时，基本上就需要用到搜索引擎了。

2.读多写少
搜索引擎的结果为了读做了很多优化，相应的，写数据就会变得慢一些。当应用读多写少，用搜索引擎是比较合适的，而如果写多读少，则应考虑其它方案。

3.面向文档
搜索引擎的一条记录成为一个文档，这个文档是一个整体，不需要依赖其它信息。

4.灵活的模式
意思是说，引擎中的记录不要求结构都一样，每条记录所具有的字段可以不同

搜索的基本应用：
1.关键词查询
2.相关性排序
相关性排序是搜索引擎区别与其它查询的重要特征，相关性排序也是一个非常重要的研究方向。

Solr是什么？
简单来说,Solr就是Lucene的一个外壳。底层，Solr使用Lucene来索引和查询数据，外层，Solr提供灵活的配置文件，避免像Lucene那样编写代码来定义字段类型。此外，Solr还提供一些功能，如高亮，缓存，分布式等。

为什么选择Solr?
因为Solr在稳定性，可扩展性，容错性三个方面都做的非常出色。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>954</wp:post_id>
		<wp:post_date><![CDATA[2014-11-12 00:23:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-11 16:23:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr-in-action%e7%ac%94%e8%ae%b0%e4%b8%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[duoshuo_thread_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[1304300066495791234]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr in Action笔记二</title>
		<link>http://127.0.0.1:8000/blog/2014/11/16/solr-in-action%e7%ac%94%e8%ae%b0%e4%ba%8c/</link>
		<pubDate>Sun, 16 Nov 2014 11:56:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=957</guid>
		<description></description>
		<content:encoded><![CDATA[初识Solr

1.安装Solr,
方法一，下载源码，编译，安装，这个单独介绍
方法二，下载二进制文件，解压，即可。

2.启动Solr
进入example目录,允许 java -jar start.jar，默认监听8983端口，访问http://localhost:8983/solr看看是否启动。
若端口被占用，修改启动端口即可，java -Djetty.port=8080 -jar start.jar 。

3.查询
Solr后台，查询表单的参数意义示例
字段 值 意义
q iPod 查询词
fq manu:Belkin 过滤，只显示manu中有Belkin的结果
sort price asc 排序，价格从低到高排列
start 0 分页参数,相当于mysql中的offset,即从第几条结果开始显示
rows 10 分页参数,想到与mysql中的limit,即总共显示几条结果
fl name,price,features,score 需要显示的字段
df text 默认搜索字段，对于没有制定搜索字段的查询，默认查询text字段
wt xml 返回结果显示格式，还有json,csv等多种格式供选择

4.相关性排序
可以对查询词进行加权，改变排序结果，如查询词“iPod power"变成"iPod power^2"，则power的权重是iPod的两倍

5.分页
使用start和rows参数，每页显示条数尽量小，因为需要都去返回字段的值，条数越多，速度越慢

6.排序
对返回结果使用如 price asc等进行排序

7.提供的搜索组件
dismax 如何翻译，待查
edismax 如何翻译，待查
hl 高亮
facet 平面搜索
spatial 地理位置搜索
spellchecking 拼写检查]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>957</wp:post_id>
		<wp:post_date><![CDATA[2014-11-16 19:56:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-16 11:56:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr-in-action%e7%ac%94%e8%ae%b0%e4%ba%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lucene 索引文件格式</title>
		<link>http://127.0.0.1:8000/blog/2014/11/19/lucene-%e7%b4%a2%e5%bc%95%e6%96%87%e4%bb%b6%e6%a0%bc%e5%bc%8f/</link>
		<pubDate>Wed, 19 Nov 2014 13:56:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=959</guid>
		<description></description>
		<content:encoded><![CDATA[随着对Solr的进一步深入，自然就想了解Lucene的索引文件格式。之前写的段合并小工具不知怎么不起作用了(后来发现是没有更新代码)，于是把觉先的《Lucene源码剖析》又翻出来看，顺便看了一下 Lucene索引格式。Solr使用的是1.4的，查看文件格式，与Lucene2.9的文件格式相差不大，依然有参考价值。

到索引目录下查看，一共有如下几种文件格式。对照<a href="http://lucene.apache.org/core/2_9_4/fileformats.html">http://lucene.apache.org/core/2_9_4/fileformats.html</a>，知道每一种格式的大概用途。
segments.gen, segments_N Segments File 主要保存索引段信息
.fnm Fields 域的元数据信息文件，保存域信息
.fdx Field Index 域数据索引文件，保存指向域数据文件的指针，方便快速访问域数据文件
.fdt Field Data 域数据文件，保存每个文档的字段,域的真正值就是在这里保存
.tis Term Infos 词典文件,记录索引词的信息
.tii Term Info Index 词典索引文件，记录到tis文件的指向，主要是为了加快访问词典文件
.frq Frequencies 文档号与词频文件，记录索引词在文档中的词频
.prx Positions 词位置信息文件，记录索引词的位置信息
.nrm Norms 标准化因子文件，记录文档和域的权重
.tvx Term Vector Index 词向量索引文件，保存到词向量文档文件和词向量域文件的指针
.tvd Term Vector Documents 词向量文档文件，记录文档第一个域与其它域的偏移
.tvf Term Vector Fields 词向量域文件，记录域级别的词向量
.del Deleted Document 记录哪个文档被删除

还有.cfs文件，也即是Compound File，当将所有索引文件合成一个文件时才会出现，主要是减少文件句柄。
write.lock,用来互斥的写索引文件。
而.tvx,tvd,tvf只有在启用词向量时才会出现。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>959</wp:post_id>
		<wp:post_date><![CDATA[2014-11-19 21:56:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-19 13:56:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lucene-%e7%b4%a2%e5%bc%95%e6%96%87%e4%bb%b6%e6%a0%bc%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="lucene"><![CDATA[Lucene]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e7%b4%a2%e5%bc%95"><![CDATA[索引]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>solr非存储字段变成存储字段解决代码</title>
		<link>http://127.0.0.1:8000/blog/2014/11/19/solr%e9%9d%9e%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5%e5%8f%98%e6%88%90%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5%e8%a7%a3%e5%86%b3%e4%bb%a3%e7%a0%81/</link>
		<pubDate>Wed, 19 Nov 2014 14:22:13 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=961</guid>
		<description></description>
		<content:encoded><![CDATA[看来这一段小代码还是有点用的，还是开源出来吧，免得再造轮子。注意，修改时基于Solr1.4,其它版本进行相应修改即可。

主要修改了两个类IndexWriter, SegmentMerger.添加辅助类ByteUtil,TypeUtil，Constant。

修改类IndexWriter:
在方法private int mergeMiddle(MergePolicy.OneMerge merge)里，
 将SegmentReader初始化 SegmentReader reader = merge.readers[i] =  readerPool.get(info, merge.mergeDocStores,MERGE_READ_BUFFER_SIZE, -1);
 修改成
[java]
       String temp = System
               .getProperty(Constant.DOCUMENT_MERGE_OPTION);
       boolean documentMerge =  temp != null &amp;&amp; temp.equals(&quot;true&quot;) ? true
               : false;
       if (documentMerge) {
           merge.readers[i] = readerPool.get(info, merge.mergeDocStores,
                   MERGE_READ_BUFFER_SIZE,
                   IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);
       } else {
           merge.readers[i] = readerPool.get(info, merge.mergeDocStores,
                   MERGE_READ_BUFFER_SIZE,
                   -1);
       }
       SegmentReader reader = merge.readers[i];
[/java]
 这是因为如果需要读FieldCache,则需要加载内存，否则会报错。而readerPool.get这个函数内有这样一个判断
[java]
      if (termsIndexDivisor != -1 &amp;&amp; !sr.termsIndexLoaded()) {
         // If this reader was originally opened because we
         // needed to merge it, we didn't load the terms
         // index.  But now, if the caller wants the terms
         // index (eg because it's doing deletes, or an NRT
         // reader is being opened) we ask the reader to
         // load its terms index.
         sr.loadTermsIndex(termsIndexDivisor);
       }
[/java]
    设置第四个参数为IndexReader.DEFAULT_TERMS_INDEX_DIVISOR，SegmentReader就会增加索引
修改类SegmentMerger:
在mergeFields函数里,将copyFieldsWithDeletions和copyFieldsNoDeletions增加一个参数 boolean documentMerge
 参数的值由如下语句得到
[java]
 String temp = System.getProperty(Constant.DOCUMENT_MERGE_OPTION);
 boolean documentMerge =  temp != null &amp;&amp; temp.equals(&quot;true&quot;) ? true : false;
[/java]
 
 函数copyFieldsWithDeletions和copyFieldsNoDeletions是对应的，这里只拿copyFieldsNoDeletions举例。
 在copyFieldsNoDeletions里，读取FieldCache的主要工作在以下这个判断语句里完成.
[java]
           if (documentMerge) {
               //Update Dengshilong 2014-09-25
               //here is where  documentMerge and read FieldCache actually do
               //read fields and types from start parameters
               //for every field ,read value from FieldCache , 
               //for numerical field use the correspond byte transform method to build a Field
               String fieldNamesStr = System
                       .getProperty(Constant.DOCUMENT_MERGE_FIELDS);
               String typesStr = System
                       .getProperty(Constant.DOCUMENT_MERGE_TYPES);
               String[] fieldNames = fieldNamesStr.split(&quot;,&quot;);
               String[] types = typesStr.split(&quot;,&quot;);
               for (; docCount &lt; maxDoc; docCount++) {
                   // NOTE: it's very important to first assign to doc then
                   // pass it to
                   // termVectorsWriter.addAllDocVectors; see LUCENE-1282
                   Document doc = reader.document(docCount,
                           fieldSelectorMerge);
                   Map typeMap = TypeUtil.TYPE_MAP;
                   for (int i = 0; i &lt; fieldNames.length; i++) {
                       String fieldName = fieldNames[i];
                       String type = types[i];
                       Fieldable field = (Fieldable) doc
                               .getFieldable(fieldName);
                       if (field == null) {
                           Types t = (Types) TypeUtil.TYPE_MAP.get(type);
                           switch(t) {
                           case INTEGER:
                               int[] vi = FieldCache.DEFAULT.getInts(reader, fieldName);
                               Field fi = new Field(fieldName, ByteUtil.toArr(vi[docCount]), Store.YES);
                               doc.add(fi);
                               break;
                           case LONG:
                               long[] vl = FieldCache.DEFAULT.getLongs(reader, fieldName);
                               Field fl = new Field(fieldName, ByteUtil.toArr(vl[docCount]), Store.YES);
                               doc.add(fl);
                               break;
                           case FLOAT:
                               float[] vf = FieldCache.DEFAULT.getFloats(reader, fieldName);
                               Field ff = new Field(fieldName, ByteUtil.toArr(vf[docCount]), Store.YES);
                               doc.add(ff);
                               break;
                           case DOUBLE:
                               double[] vd = FieldCache.DEFAULT.getDoubles(reader, fieldName);
                               Field fd = new Field(fieldName, ByteUtil.toArr(vd[docCount]), Store.YES);
                               doc.add(fd);
                               break; 
                           }
                       } else {
                           continue;
                       }    
                   }
                   
                   fieldsWriter.addDocument(doc);
                   checkAbort.work(300); 
               }
           }
[/java]
增加类ByteUtil用于int,double等数值型转化为byte[]数组;
[java]
package org.apache.lucene.util;
//The transform method is copy from TrieField.java
public class ByteUtil {
    public static int toInt(byte[] arr) {
        return (arr[0] &lt;&lt; 24) | ((arr[1] &amp; 0xff) &lt;&lt; 16)
                | ((arr[2] &amp; 0xff) &lt;&lt; 8) | (arr[3] &amp; 0xff);
    }

    public static long toLong(byte[] arr) {
        int high = (arr[0] &lt;&lt; 24) | ((arr[1] &amp; 0xff) &lt;&lt; 16)
                | ((arr[2] &amp; 0xff) &lt;&lt; 8) | (arr[3] &amp; 0xff);
        int low = (arr[4] &lt;&lt; 24) | ((arr[5] &amp; 0xff) &lt;&lt; 16)
                | ((arr[6] &amp; 0xff) &lt;&lt; 8) | (arr[7] &amp; 0xff);
        return (((long) high) &lt;&lt; 32) | (low &amp; 0x0ffffffffL);
    }
    public static float toFloat(byte[] arr) {
        return Float.intBitsToFloat(toInt(arr));
    }
    public static double toDouble(byte[] arr) {
        return Double.longBitsToDouble(toLong(arr));
    }

    public static byte[] toArr(int val) {
        byte[] arr = new byte[4];
        arr[0] = (byte) (val &gt;&gt;&gt; 24);
        arr[1] = (byte) (val &gt;&gt;&gt; 16);
        arr[2] = (byte) (val &gt;&gt;&gt; 8);
        arr[3] = (byte) (val);
        return arr;
    }

    public static byte[] toArr(long val) {
        byte[] arr = new byte[8];
        arr[0] = (byte) (val &gt;&gt;&gt; 56);
        arr[1] = (byte) (val &gt;&gt;&gt; 48);
        arr[2] = (byte) (val &gt;&gt;&gt; 40);
        arr[3] = (byte) (val &gt;&gt;&gt; 32);
        arr[4] = (byte) (val &gt;&gt;&gt; 24);
        arr[5] = (byte) (val &gt;&gt;&gt; 16);
        arr[6] = (byte) (val &gt;&gt;&gt; 8);
        arr[7] = (byte) (val);
        return arr;
    }

    public static byte[] toArr(float val) {
        return toArr(Float.floatToRawIntBits(val));
    }

    public static byte[] toArr(double val) {
        return toArr(Double.doubleToRawLongBits(val));
    }
}
[/java]
增加类TypesUtil，定义了INTEGER等类型常量
[java]
package org.apache.lucene.util;
import java.util.HashMap;
import java.util.Map;
//the types is copy form TrieField.java
public class TypeUtil {
    public enum Types {
        INTEGER,
        LONG,
        FLOAT,
        DOUBLE,
   }
   public final static Map TYPE_MAP = new HashMap() {{    
        put(&quot;int&quot;, Types.INTEGER);    
        put(&quot;tint&quot;, Types.INTEGER);
        put(&quot;long&quot;, Types.LONG); 
        put(&quot;tlong&quot;, Types.LONG);
        put(&quot;float&quot;, Types.FLOAT);
        put(&quot;tfloat&quot;, Types.FLOAT);
        put(&quot;double&quot;, Types.DOUBLE);
        put(&quot;tdouble&quot;, Types.DOUBLE);
   }}; 
}
[/java]
增加类Constant,定义了三个常量
[java]
package org.apache.lucene.util;
public class Constant {
  //add for documentMerge
  public final static String DOCUMENT_MERGE_OPTION = &quot;search.index.documentMerge&quot;;
  public final static String DOCUMENT_MERGE_FIELDS = &quot;search.index.documentMerge.fields&quot;;
  public final static String DOCUMENT_MERGE_TYPES = &quot;search.index.documentMerge.types&quot;;
}
[/java]
使用：
在solr启动脚本中,添加如下参数
search.index.documentMerge 为true时表示开启强制文档合并,其它值时表示不开启
search.index.documentMerge.fields 需要读取的字段，字段之间用逗号隔开
search.index.documentMerge.types 读取字段的类型,类型间用逗号隔开,这里的类型要与上面的字段一一对应起来
举个例子：

要对PublishTime,ContentLength进行读取,而它们的字段类型分别为tint,int于是添加如下参数
-Dsearch.index.documentMerge=true -Dsearch.index.documentMerge.fields=PublishTim,ContentLength
 -Dsearch.index.documentMerge.types=tint,int
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>961</wp:post_id>
		<wp:post_date><![CDATA[2014-11-19 22:22:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-19 14:22:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e9%9d%9e%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5%e5%8f%98%e6%88%90%e5%ad%98%e5%82%a8%e5%ad%97%e6%ae%b5%e8%a7%a3%e5%86%b3%e4%bb%a3%e7%a0%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fieldcache"><![CDATA[fieldcache]]></category>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>13球问题</title>
		<link>http://127.0.0.1:8000/blog/2014/11/23/13%e7%90%83%e9%97%ae%e9%a2%98/</link>
		<pubDate>Sat, 22 Nov 2014 16:39:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=965</guid>
		<description></description>
		<content:encoded><![CDATA[以前专门考虑过这个问题，只是没有记录笔记，和组里的同事说起这个问题，于是又考虑了一次，这次还是记下来为妙。

13球问题说的是有12个标准球和1个不合格的球，这个球可能偏重或者偏轻了，给你一个天平，问至少称多少次可以找到这个不合格的球。

考虑这个问题之前，可以先考虑高中时代，数学老师问过的8球问题。8球问题说的是一共有8个球，其中有一个球偏重了，给你一个天平，问至少称几次可以找到这个球。

一个很显然的办法是，两边各4个，之后拿重的一方再对分称，之后再拿重的一方对分称，一共三次就可以称出来。但这不是最优的，记得当时大部分同学都是这么考虑的，只有一个许杨冰同学不是这样，她说称两次即可知道。方法是，左边放三个，右边放三个，如果是左边重，则球一定在这3个中，从这个三个中取两个，天平两边各放一个，如果两边一样重，则偏重的球是剩下的那一个，如果两边不一样重，则偏重的一方就是那个球。当时就觉得许同学非同一般，后来高考时她考了全班第一。

大三的时候，学习了信息论，发现这个问题可以用信息论的观点来解释。考虑上面的8球问题，当只有3个球时，只称一次即可知道是哪一个球偏重了，也就是说，一次称球，可以知道3种情况，那么2此称球就可以知道9种情况。而8球问题，只有8种情况，所以只需称两次即可找到那个球。考虑上面的13球问题，这里一共有26种情况，1号球偏重，1号球偏轻，2号球偏重，2号球偏轻。。。，因为两次称球可以知道9种情况，那么三次称球可以知道27种情况，而13球一共只有26中情况，所以13球问题只需称3次就可以找到那个球，剩下的问题就是如何称了。

考虑之后，给出了一种解法。为了方便，我们给球编号，1，2，3，4，，，13。
1.首先把1，2，3，4放在左边天平，把5，6，7，8放在右边天平，
2.如果天平一样重，则那个球在剩下的5个球中，其它8个为标准球。之后在这5个球中取3个球，放在左边，取3个标准球放在天平右边，分三种情况
A 如果一样重，则不合格球在剩下的两个球中，对于剩下的两个球，取其中一个出来称，如果偏重或者偏轻，则找到了那个不合格球，如果一样重，则不合格球是剩下的一个(注意，这里我们不能知道它是偏重或者偏轻)。
B 如果左边轻，之后再称一次就可以知道是哪个球偏轻。
C 如果左边重，之后再称一次就可以知道是哪个球偏轻。
3.如果不一样重，则那个球在这8个球中。假设是左边重了，则剩下可能的8种情况，1，2，3，4号偏重，5，6，7，8号偏轻。之后的取法可以这样，左边放三个标准球再加上8号球，右边放5，6，7和4号球。依然分三种情况
A 如果一样重，则1 2 3号球偏重，称一次即可知道结果
B 如果左边重，则5 6 7 号球偏轻，称一次即可知道结果
C 如果左边轻，则8号球偏轻或者4号球偏重，称一次即可知道结果。

现在再来考虑，2时，剩下5个球的情况，5个球的时候，一共有10种情况，9号偏重，9号偏轻，，，13号偏重，所以称两次是无法知道具体是哪一个球偏重或者偏轻，这也是为什么在2的A情况中，如果一样重，则不合格球是剩下的一个，但我们无法知道它是偏重或者偏轻。所幸题目只要求我们找到那个球就可以了，没有要求知道它是偏重或者偏轻。

那么如果一定要找到那个球，且知道它是偏重或者偏轻呢？这样的话就不是这种方法能解决的了，需要精心设计的方法，继续考虑，等知道了再分享。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>965</wp:post_id>
		<wp:post_date><![CDATA[2014-11-23 00:39:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-22 16:39:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[13%e7%90%83%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="13%e7%90%83"><![CDATA[13球]]></category>
		<category domain="post_tag" nicename="8%e7%90%83"><![CDATA[8球]]></category>
		<category domain="post_tag" nicename="%e4%bf%a1%e6%81%af%e8%ae%ba"><![CDATA[信息论]]></category>
		<category domain="category" nicename="math"><![CDATA[数学]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>查看端口是否被占用</title>
		<link>http://127.0.0.1:8000/blog/2014/12/03/%e6%9f%a5%e7%9c%8b%e7%ab%af%e5%8f%a3%e6%98%af%e5%90%a6%e8%a2%ab%e5%8d%a0%e7%94%a8/</link>
		<pubDate>Wed, 03 Dec 2014 14:10:03 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=968</guid>
		<description></description>
		<content:encoded><![CDATA[如要查看8080端口被进程占用，以前都是用 lsof命令的,
lsof -i:8080

现在lsof命令不能用了，于是改成netstat
netstat  -nltp | grep 8080

以前执行这个命令时没有加上p参数，后来仔细看netstat的帮助，知道p参数是显示进程id和名字用的]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>968</wp:post_id>
		<wp:post_date><![CDATA[2014-12-03 22:10:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-03 14:10:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9f%a5%e7%9c%8b%e7%ab%af%e5%8f%a3%e6%98%af%e5%90%a6%e8%a2%ab%e5%8d%a0%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="lsof"><![CDATA[lsof]]></category>
		<category domain="post_tag" nicename="netstat"><![CDATA[netstat]]></category>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>语言特性还是有必要学习的</title>
		<link>http://127.0.0.1:8000/blog/2014/12/04/%e8%af%ad%e8%a8%80%e7%89%b9%e6%80%a7%e8%bf%98%e6%98%af%e6%9c%89%e5%bf%85%e8%a6%81%e5%ad%a6%e4%b9%a0%e7%9a%84/</link>
		<pubDate>Thu, 04 Dec 2014 13:08:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=970</guid>
		<description></description>
		<content:encoded><![CDATA[最近一个项目需要用脚本生成汉字拼音时来排序，组里同事说以前有同事写过一个，于是拿过来用，看了一下代码，发现有些地方还是可以优化的，

如以下代码：
[python]
self.polyphone = {}
for line in open(polyphone_path):
    k, context, pron, other = line.split(' ', 3)
    item = collections.defaultdict(dict)
    key = &quot;%X&quot; % ord(unicode(k, 'utf8'))
    item[key]['context'] = unicode(context, 'utf8')

    item[key]['pron'] = pron
    if self.polyphone.has_key(key):
        self.polyphone[key].append(item)
    else:
        self.polyphone[key] = []
        self.polyphone[key].append(item)  
[/python]     
这一段代码里需要判断字典里有没有包含key,如果没有，则要先声明value为空的list,之后再添加值,这种情况下collections中的defaultdict就派上用场了。
[python]
self.polyphone = defaultdict(list)
for line in open(polyphone_path):
    k, context, pron, other = line.split(' ', 3)
    item = defaultdict(dict)
    key = &quot;%X&quot; % ord(unicode(k, 'utf8'))
    item[key]['context'] = unicode(context, 'utf8')
    item[key]['pron'] = pron
    self.polyphone[key].append(item)  
[/python] 
defaultdict可以给定一个默认值，这样省去了判断key是否已经在字典里存在。

还见到如下代码：
[python]
polyphone = False
for item in self.polyphone[key]:
    if chars.find(item[key]['context']) != -1: 
        result.append(item[key]['pron'].strip()[:-1].lower())
        polyphone = True
        break

if not polyphone:
    result.append(self.dict[key].split(&quot;,&quot;)[0].strip()[:-1].lower())
[/python]
这段代码里，if not polyphonse判断里的句子只有在上面的for没有被break时才执行，也就是for循环执行时才执行，这种情况在编程中经常遇到，而python提供了for else循环语句，于是可以修改成：
[python]
for item in self.polyphone[key]:
    if chars.find(item[key]['context']) != -1: 
        result.append(item[key]['pron'].strip()[:-1].lower())
        break
else :
    result.append(self.dict[key].split(&quot;,&quot;)[0].strip()[:-1].lower())
[/python]
是不是瞬间简洁很多？所以说，语言特性还是有必要学习的，虽然算法和数据结构依然是核心，可是代码易维护，易懂也是非常重要的]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>970</wp:post_id>
		<wp:post_date><![CDATA[2014-12-04 21:08:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-04 13:08:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%af%ad%e8%a8%80%e7%89%b9%e6%80%a7%e8%bf%98%e6%98%af%e6%9c%89%e5%bf%85%e8%a6%81%e5%ad%a6%e4%b9%a0%e7%9a%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="defaultdict"><![CDATA[defaultdict]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="%e7%ae%80%e6%b4%81"><![CDATA[简洁]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr查询词提取</title>
		<link>http://127.0.0.1:8000/blog/2014/12/04/solr%e6%9f%a5%e8%af%a2%e8%af%8d%e6%8f%90%e5%8f%96/</link>
		<pubDate>Thu, 04 Dec 2014 13:28:02 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=972</guid>
		<description></description>
		<content:encoded><![CDATA[最近因为负责一个小功能，所以想尽力做好它。于是对会经常看看用户的查询，看看这些查询的结果是否满足需要，于是需要对这些查询词进行提取。本来还想用Python来写的，后来想想shell才是做这事的最佳方法，于是先从grep开始。

solr的日志中,query都是跟在‘q=’后面，且参数间用&隔开，于是执行如下命令，
grep -o 'q=.*\&' solr.log
得到如下结果
q=磐安&macro.skip=0&qt=macro&wt=json&
q=磐安+财政&macro.skip=0&qt=macro&wt=json&
q=保定+财政&macro.skip=0&qt=macro&wt=json&
q=磐安+财政&macro.skip=0&qt=macro&wt=json&
q=财政+长春&macro.skip=0&qt=macro&wt=json&
q=财政+长沙&macro.skip=0&qt=macro&wt=json&
q=存款收入&macro.skip=0&qt=macro&wt=json&
q=存款收入&qt=macro&wt=json&macro.groupOffset=0&macro.groupNames=利率走势&
q=存款收入&qt=macro&wt=json&macro.groupOffset=0&macro.groupNames=行业经济&
q=存款收入&qt=macro&wt=json&macro.groupOffset=0&macro.groupNames=区域宏观&
q=存款收入&qt=macro&wt=json&macro.groupOffset=0&macro.groupNames=中国宏观&

之后就是截取query部分，这时awk就派上用场了。先用&分割，得到第一段，之后用=分割，得到第二段
grep -o 'q=.*\&' solr.log | grep -v 'module2:' | grep -v 'solrconfig.xml' | awk -F '&' '{print $1}' | awk -F '=' '{print $2}'
结果如下：
磐安
磐安+财政
保定+财政
磐安+财政
财政+长春
财政+长沙
存款收入
存款收入
存款收入
存款收入
存款收入

之后想统计每个查询词的次数，此时先用sort排序，之后用uniq -c来统计，
grep -o 'q=.*\&' solr.log | grep -v 'module2:' | grep -v 'solrconfig.xml' | awk -F '&' '{print $1}' | awk -F '=' '{print $2}'  |sort | uniq -c
结果如下：
1 保定+财政
5 存款收入
1 磐安
2 磐安+财政
1 财政+长春
1 财政+长沙

而我希望按查询次数从高到低排列，于是再用sort -rn
grep -o 'q=.*\&' solr.log | grep -v 'module2:' | grep -v 'solrconfig.xml' | awk -F '&' '{print $1}' | awk -F '=' '{print $2}'  |sort | uniq -c | sort -rn
结果如下：
5 存款收入
2 磐安+财政 
1 财政+长沙
1 财政+长春
1 磐安
1 保定+财政

一行代码搞定。一句话，管道实在是太方便了，linux也是如此。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>972</wp:post_id>
		<wp:post_date><![CDATA[2014-12-04 21:28:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-04 13:28:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e6%9f%a5%e8%af%a2%e8%af%8d%e6%8f%90%e5%8f%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="awk"><![CDATA[awk]]></category>
		<category domain="post_tag" nicename="grep"><![CDATA[grep]]></category>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="sort"><![CDATA[sort]]></category>
		<category domain="post_tag" nicename="uniq"><![CDATA[uniq]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>提取雪球搜索页面主要内容</title>
		<link>http://127.0.0.1:8000/blog/2014/12/12/%e6%8f%90%e5%8f%96%e9%9b%aa%e7%90%83%e6%90%9c%e7%b4%a2%e9%a1%b5%e9%9d%a2%e4%b8%bb%e8%a6%81%e5%86%85%e5%ae%b9/</link>
		<pubDate>Fri, 12 Dec 2014 12:46:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=975</guid>
		<description></description>
		<content:encoded><![CDATA[虽然在索引组，但有时还需要干解析的活，而这时，正则表达式就派上用场了。一段时间没写正则后，写起来就没有办法那么畅快，例如这次就是提取不到结果，想了之后，最后锁定在点号不能匹配换行符，试了之后，果然是这样。在Java中，加上Pattern.DOTALL就好了，以下就是用来提取雪球搜索页面里主要内容的函数，这个主要内容提取出来后是一个JSON格式的.
[java]
public static String getXueQiuContent(String httpBody) {
    Pattern pattern = Pattern.compile(&quot;SNB.data.search\\s*?=\\s*?(\\{.+?\\});.*?seajs.use&quot;, Pattern.DOTALL);
    Matcher m = pattern.matcher(httpBody);
    if (m.find()) {
        httpBody = m.group(1);
        JSONObject obj;
        try {
            obj = new JSONObject(httpBody);
            JSONArray jsonArr =  (JSONArray) obj.get(&quot;list&quot;);
            httpBody = jsonArr.toString();
        } catch (JSONException e) {
          // TODO Auto-generated catch block
            e.printStackTrace();
        }
       
    }
    return httpBody;
}
[/java]
如果不知道这个Pattern.DOTALL,其实用[\\s\\S]也是可以得，因为\s匹配空白字符,\S匹配非空白字符，两者合在一起就可以匹配任何字符了。
对于爬虫组来说，要发现新的站点，都雪球这些网站去搜索一番还是可以尝试的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>975</wp:post_id>
		<wp:post_date><![CDATA[2014-12-12 20:46:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-12 12:46:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%8f%90%e5%8f%96%e9%9b%aa%e7%90%83%e6%90%9c%e7%b4%a2%e9%a1%b5%e9%9d%a2%e4%b8%bb%e8%a6%81%e5%86%85%e5%ae%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="%e6%ad%a3%e5%88%99"><![CDATA[正则]]></category>
		<category domain="post_tag" nicename="%e7%82%b9%e5%8f%b7"><![CDATA[点号]]></category>
		<category domain="category" nicename="programming"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>junit找不到方法</title>
		<link>http://127.0.0.1:8000/blog/2014/12/13/junit%e6%89%be%e4%b8%8d%e5%88%b0%e6%96%b9%e6%b3%95/</link>
		<pubDate>Sat, 13 Dec 2014 03:39:20 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=977</guid>
		<description></description>
		<content:encoded><![CDATA[最近迷上了单元测试，在写单元测试时，提示一下错误：
java.lang.NoSuchMethodError: junit.framework.ComparisonFailure.getExpected()Ljava/lang/String;

莫名其妙的，assertFalse怎么可能没有。后来才知道，原来是版本冲突了，因为添加了好多个junit的jar本，而Eclipse只找到最低版本的，将一些低版本的jar去掉就好了。

添加jar这个问题真是蛋疼，在Eclipse里对引用的jar一个目录一个目录的添加，还要肉眼去把低版本的删除，真是麻烦。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>977</wp:post_id>
		<wp:post_date><![CDATA[2014-12-13 11:39:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-13 03:39:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[junit%e6%89%be%e4%b8%8d%e5%88%b0%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="junit"><![CDATA[junit]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr in Action笔记三</title>
		<link>http://127.0.0.1:8000/blog/2014/12/14/solr-in-action%e7%ac%94%e8%ae%b0%e4%b8%89/</link>
		<pubDate>Sun, 14 Dec 2014 14:12:05 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=979</guid>
		<description></description>
		<content:encoded><![CDATA[Solr关键概念

1.反向索引
2.检索词和布尔查询：
并查询：
+new +house 或者
new AND house
或查询：
new house 或者
new OR house
排除查询:
new house –rental 或者
new house NOT rental
短语查询：
“new home” OR “new house”
3 bedrooms” AND “walk in closet” AND “granite countertops”
分组查询：
New AND (house OR (home NOT improvement NOT depot NOT grown))
(+(buying purchasing -renting) +(home house residence –(+property -bedroom)))

对于短语查询，之所以可以实现，是因为在反向索引中保存了词在文档中的位置信息。

3.模糊查询
通配符查询：
如果需要查询以offic开头的词，只需要查询 offic*
如果要使用通配符在开头的查询，如 *ing,则需要将ReversedWildcardFilterFactory添加到字段分析链中

范围查询：
yearsOld:[18 TO 21] 18 <= x <= 21
yearsOld:{18 TO 21} 18 < x < 21
yearsOld:[18 TO 21} 18 <= x < 21
created:[2012-02-01T00:00.0Z TO 2012-08-02T00:00.0Z]

编辑距离查询：
administrator~ 默认编辑距离为1
administrator~1 编辑距离为1
administrator~2  编辑距离为2

临近查询：
“chief officer”~1 距离为1
例如: “chief executive officer”, “officer chief”

4.相关性：
Solr默认相关性，距离看文档

5.准确率和召回率
准确率说的是一次查询中，查询结果有多少是相关的比率
召回率说的是一次查询中，有多少相关结果被返回的比率

一般来说，搜索引擎都是尽量在二者中寻求一个平衡

6.Solr的一些局限
Solr无法执行想数据库查询那样复杂的查询
当更新一个跨越很多个文档的字段时，Solr将很麻烦
对于返回许多文档的查询，Solr的性能将会下降]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>979</wp:post_id>
		<wp:post_date><![CDATA[2014-12-14 22:12:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-14 14:12:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr-in-action%e7%ac%94%e8%ae%b0%e4%b8%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>软连接和硬连接</title>
		<link>http://127.0.0.1:8000/blog/2014/12/27/%e8%bd%af%e8%bf%9e%e6%8e%a5%e5%92%8c%e7%a1%ac%e8%bf%9e%e6%8e%a5/</link>
		<pubDate>Sat, 27 Dec 2014 02:10:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=982</guid>
		<description></description>
		<content:encoded><![CDATA[软连接和硬链接是Linux中经常用到的，详细介绍可以参考https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/

要知道软连接和硬链接的区别，必须知道了解Linux的文件系统设计，这其中就有inode这个概念。一个文件被分为用户数据和元数据，其中用户数据是数据存储的地方，而元数据中的inode则是指向这个地方，而文件名只是便于人们记忆而已。对于inode号，可以使用stat或者ls -i查看.

一个inode号可以对应多个文件名，这种情况下就是硬链接。因此创建硬链接并不需要拷贝用户数据，也就是不像cp命令那样,新创建一个inode号，所以创建硬链接速度非常快。只是硬链接有一个局限的地方就是只能对文件创建硬链接，并且不能跨越文件系统。需要注意的一个问题是，修改硬连接，原文件的内容也会修改。而修改原文件，也会修改硬连接。

而创建软连接则会创建新的inode号，只是这个inode号指向的用户数据很特殊，它指向创建软连接的文件。对于软连接，则没有硬链接的那些限制，它可以跨越文件系统，可以对目录创建软链接。只是当把原文件删除后，软连接就变成了死链接了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>982</wp:post_id>
		<wp:post_date><![CDATA[2014-12-27 10:10:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-27 02:10:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%bd%af%e8%bf%9e%e6%8e%a5%e5%92%8c%e7%a1%ac%e8%bf%9e%e6%8e%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="%e7%a1%ac%e9%93%be%e6%8e%a5"><![CDATA[硬链接]]></category>
		<category domain="post_tag" nicename="%e8%bd%af%e9%93%be%e6%8e%a5"><![CDATA[软链接]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr索引升级</title>
		<link>http://127.0.0.1:8000/blog/2014/12/27/solr%e7%b4%a2%e5%bc%95%e5%8d%87%e7%ba%a7/</link>
		<pubDate>Sat, 27 Dec 2014 02:27:18 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=984</guid>
		<description></description>
		<content:encoded><![CDATA[相信现在很多人还在用Solr1.4,因为Solr1.4许多时候还是满足需求了。可是总有一天会想升级，因为新版本中的一些功能和特性让使用Solr更加方便。而如果要从Solr1.4升级到Solr4.8,可以经过Solr1.4->Solr3.6->Solr4.0->Solr4.8这个步骤.

从Solr1.4->Solr3.6，去官网下载Solr3.6,使用需要升级的索引搭建起Solr引擎，执行curl 'http://localhost:8983/solr/update?optimize=true&maxSegments=1&waitFlush=false'即可

从Solr3.6->Solr4.0,去官网下载Solr4.0, 将lucene-core-4.0.jar拷贝到某一目录下，如：lib4.0/lucene-core-4.0.jar(注意，可能需要其它的包如：slf-api和log-back相关包，同样拷贝到lib4.0目录下), 之后执行java -cp "lib4.0/*" org.apache.lucene.index.IndexUpgrader -verbose index/, 这里 index目录存放着Solr3.6索引文件。

从Solr4.0->Solr4.8, 去官网下载Solr4.8,将lucene-core-4.8拷贝到某一目录下, 如：lib4.0/lucene-core-4.8.jar,之后执行../jdk1.7/bin/java -cp "lib4.8/*" org.apache.lucene.index.IndexUpgrader -delete-prior-commits -verbose index/，这里因为Solr4.8需要用到jdk1.7，所以执行java命令时，必须是jdk1.7。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>984</wp:post_id>
		<wp:post_date><![CDATA[2014-12-27 10:27:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-27 02:27:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e7%b4%a2%e5%bc%95%e5%8d%87%e7%ba%a7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<category domain="post_tag" nicename="%e7%b4%a2%e5%bc%95"><![CDATA[索引]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>自动脚本登录服务器</title>
		<link>http://127.0.0.1:8000/blog/2014/12/27/%e8%87%aa%e5%8a%a8%e8%84%9a%e6%9c%ac%e7%99%bb%e5%bd%95%e6%9c%8d%e5%8a%a1%e5%99%a8/</link>
		<pubDate>Sat, 27 Dec 2014 02:59:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=986</guid>
		<description></description>
		<content:encoded><![CDATA[我们几乎每天都做这样的操作，输入账号和密码登陆跳转机，从跳转机输入帐号和密码登陆目标机器。当然输入账号和密码登陆跳转机可以在SecureCRT这些客户端中建立登录会话解决，可是后面这一步呢？事实上，后面这一步可以写一个脚本解决。

例如现在需要登录192.168.1.1这台机器,登录用户名和密码都为test，而要登录192.168.1.1，需要先登录到跳板机172.168.1.1,则我们可以新建会话链接192.168.1.1，在其中的会话选项中，ssh2中填上登录172.168.1.1需要的用户名和密码，在登录动作中，我们可以引用一个登录脚本。这里的登录动作指的是登录机器后需要进行的后续操作，在我们这里指的是登录跳板机后需要进行的操作，这当然是登录我们的目标主机了，于是可以写脚本，脚本的内容如下。
#$language = "VBScript"

#$interface = "1.0"
Sub main
  ' turn on synchronous mode so we don't miss any data
  crt.Screen.Synchronous = True
  crt.Screen.Send "ssh test@192.168.1.1" & VbCr
  ' Wait for a tring that looks like "password: " or "Password: "
  crt.Screen.WaitForString "assword:"
  ' Send your password followed by a carriage return
  crt.Screen.Send "test" & VbCr
  ' turn off synchronous mode to restore normal input processing
  crt.Screen.Synchronous = False
End Sub
如此，我们只需要在SecureCRT中点击一下这个会话，就可以登录到192.168.1.1这台服务器了，是不是很方便？]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>986</wp:post_id>
		<wp:post_date><![CDATA[2014-12-27 10:59:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-27 02:59:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%87%aa%e5%8a%a8%e8%84%9a%e6%9c%ac%e7%99%bb%e5%bd%95%e6%9c%8d%e5%8a%a1%e5%99%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="shell"><![CDATA[shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lucene中扩展codec功能</title>
		<link>http://127.0.0.1:8000/blog/2015/01/16/lucene%e4%b8%ad%e6%89%a9%e5%b1%95codec%e5%8a%9f%e8%83%bd/</link>
		<pubDate>Fri, 16 Jan 2015 13:04:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=991</guid>
		<description></description>
		<content:encoded><![CDATA[从Lucene4.0开始，提供了扩展codec功能，这个功能主要是留给想自己定义索引格式的开发者。
在此之前，有必要了解codec主要的作用，codec相关的类主要作用是读写索引。 而通过实现FilterCodec，可以很方便的定义自己的codec。 这个方便主要是可以将许多读写索引部分交给已有的codec实现，而只实现自己需要改进的部分。当然如果这样还不能满足需求 可以重新写一个codec。 

写个简单的例子更容易懂，
在Codec.java中，可以看到，读写索引主要实现以下几个方法 
[java]
 /** Encodes/decodes postings */
  public abstract PostingsFormat postingsFormat();

  /** Encodes/decodes docvalues */
  public abstract DocValuesFormat docValuesFormat();
  
  /** Encodes/decodes stored fields */
  public abstract StoredFieldsFormat storedFieldsFormat();
  
  /** Encodes/decodes term vectors */
  public abstract TermVectorsFormat termVectorsFormat();
  
  /** Encodes/decodes field infos file */
  public abstract FieldInfosFormat fieldInfosFormat();
  
  /** Encodes/decodes segment info file */
  public abstract SegmentInfoFormat segmentInfoFormat();
  
  /** Encodes/decodes document normalization values */
  public abstract NormsFormat normsFormat();

  /** Encodes/decodes live docs */
  public abstract LiveDocsFormat liveDocsFormat();
[/java]
一个纯文本保存索引的codec是SimpleTextCodec,这个codec的主要目的是用来学习

下面定义自己的codec
[java]public class HexinCodec extends FilterCodec {
    final private FieldInfosFormat myTermFieldInfoFormat;
    public HexinCodec() {
        super(&quot;HexinCodec&quot;, new Lucene46Codec());
        myTermFieldInfoFormat = new SimpleTextFieldInfosFormat();
    }
    public FieldInfosFormat fieldInfosFormat() {
        return myTermFieldInfoFormat;
    }
}
[/java]
最后，还是让上面的例子跑起来，首先下载Lucene4.8.0的源码，之后在codecs/src/java下新建包org.apache.lucene.codecs.hexin,
在这个包下面新建类HexinCodec.java,复制上面的代码。
之后编写测试用的建索引程序Index.java 
[java]
package org.hexin;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.codecs.Codec;
import org.apache.lucene.codecs.hexin.HexinCodec;
import org.apache.lucene.codecs.lucene46.Lucene46Codec;
import org.apache.lucene.codecs.simpletext.SimpleTextCodec;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig.OpenMode;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;

import java.io.File;
import java.io.IOException;
public class Index {
    public static void main(String[] args) throws IOException {
        //Codec codec = new SimpleTextCodec();
        Codec codec = new HexinCodec();
        //Codec codec = new Lucene46Codec();
        String INDEX_DIR = &quot;e:\\index&quot;;
        Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_48);
        IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_48, analyzer);
        iwc.setCodec(codec);
        IndexWriter writer = null;
        iwc.setOpenMode(OpenMode.CREATE);
        iwc.setUseCompoundFile(false);
        try {
            writer = new IndexWriter(FSDirectory.open(new File(INDEX_DIR)), iwc);
            Document doc = new Document();
            doc.add(new TextField(&quot;title&quot;, &quot;who are you, you are a man&quot;, Field.Store.YES));
            doc.add(new TextField(&quot;content&quot;, &quot;A long way to go there. Please drive a car&quot;, Field.Store.NO));
            writer.addDocument(doc);
            doc = new Document();
            doc.add(new TextField(&quot;title&quot;, &quot;are you sure&quot;, Field.Store.YES));
            doc.add(new TextField(&quot;content&quot;, &quot;He is a good man. He is a driver&quot;, Field.Store.NO));
            writer.addDocument(doc);
            writer.commit();
            writer.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }  
}
[/java]
编写测试用的搜索例子Search.java 
[java]
package org.hexin;
import java.io.File; 
import java.util.Date;

import org.apache.lucene.codecs.Codec;
import org.apache.lucene.codecs.simpletext.SimpleTextCodec;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.Term;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.FSDirectory;
public class Search {
    private Search() {}
    public static void main(String[] args) throws Exception {
        
        String index = &quot;e:\\index&quot;;
        IndexReader reader = DirectoryReader.open(FSDirectory.open(new File(index)));
        IndexSearcher searcher = new IndexSearcher(reader);
        String queryString = &quot;driver&quot;;
        Query query = new TermQuery(new Term(&quot;content&quot;, queryString));
        System.out.println(&quot;Searching for: &quot; + query.toString());
        Date start = new Date();
        TopDocs results = searcher.search(query, null, 100);
        Date end = new Date();
        System.out.println(&quot;Time: &quot;+(end.getTime()-start.getTime())+&quot;ms&quot;);
        ScoreDoc[] hits = results.scoreDocs;
        int numTotalHits = results.totalHits;
        System.out.println(numTotalHits + &quot; total matching documents&quot;);
        for (int i = 0; i &lt; hits.length; i++) {
            String output = &quot;&quot;;
            Document doc = searcher.doc(hits[i].doc);
            output += &quot;doc=&quot;+hits[i].doc+&quot; score=&quot;+hits[i].score;
            String title = doc.get(&quot;title&quot;);
            if (title != null) {
                output += &quot; &quot; + title;
            }
            System.out.println(output);
        }
        reader.close();
    }
}
[/java]

在Eclipse中运行Index.java,此时会报错
A SPI class of type org.apache.lucene.codecs.Codec with name 'Lucene46' does not exist. You need to add the corresponding 
JAR file supporting this SPI to your classpath.The current classpath supports the following names:[]

问过定坤后，知道一个解决的办法是去官网下载已经编译过的Lucene二进制包,将其中的META-INF拷贝到core/src/java目录下，写上下面两行
org.apache.lucene.codecs.simpletext.SimpleTextCodec
org.apache.lucene.codecs.hexin.HexinCodec
此时即可运行通过。查看索引文件，有一个fld结尾的文件，其内容为文本文件,保存着字段值,这个文件就是通过SimpleTextCodec写入的，
而其它文件则是通过Lucene46Codec写入的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>991</wp:post_id>
		<wp:post_date><![CDATA[2015-01-16 21:04:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-16 13:04:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lucene%e4%b8%ad%e6%89%a9%e5%b1%95codec%e5%8a%9f%e8%83%bd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="codec"><![CDATA[codec]]></category>
		<category domain="category" nicename="lucene"><![CDATA[Lucene]]></category>
		<category domain="post_tag" nicename="lucene"><![CDATA[Lucene]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr权限控制</title>
		<link>http://127.0.0.1:8000/blog/2015/01/20/solr%e6%9d%83%e9%99%90%e6%8e%a7%e5%88%b6/</link>
		<pubDate>Tue, 20 Jan 2015 13:47:37 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=994</guid>
		<description></description>
		<content:encoded><![CDATA[有些情况下，想给Solr增加权限控制，这样就不会被随意更新和删除。关于这点，在<a href="https://wiki.apache.org/solr/SolrSecurity" target="_blank">https://wiki.apache.org/solr/SolrSecurity</a>有详细的描述。觉得最坑人的一点是Solr-4470还没resolved。不管它，先使用Jetty添加权限控制

下载已经编译好的solr-4.8.0,进入example目录
编辑etc/webdefault.xml,添加如下内容:

[html]
&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
      &lt;web-resource-name&gt;Solr authenticated application&lt;/web-resource-name&gt;
      &lt;url-pattern&gt;/update/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
      &lt;role-name&gt;update-role&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
  &lt;/security-constraint&gt;
  
  &lt;login-config&gt;
    &lt;auth-method&gt;BASIC&lt;/auth-method&gt;
    &lt;realm-name&gt;Solr Update&lt;/realm-name&gt;
  &lt;/login-config&gt;
   [/html]

编辑 etc/jetty.xml, 添加如下内容：

[html]
 &lt;Call name=&quot;addBean&quot;&gt;
      &lt;Arg&gt;
        &lt;New class=&quot;org.eclipse.jetty.security.HashLoginService&quot;&gt;
          &lt;Set name=&quot;name&quot;&gt;Solr Update&lt;/Set&gt;
          &lt;Set name=&quot;config&quot;&gt;&lt;SystemProperty name=&quot;jetty.home&quot; default=&quot;.&quot;/&gt;/etc/realm.properties&lt;/Set&gt;
          &lt;Set name=&quot;refreshInterval&quot;&gt;0&lt;/Set&gt;
        &lt;/New&gt;
      &lt;/Arg&gt;
    &lt;/Call&gt;
     [/html]

增加 etc/realm.properties,写入如下内容，也就是用户名，密码以及角色：

[html]index: update, update-role[/html]

启动solr,到exampledocs目录下执行./post.sh solr.xml,返回401错误，说明未认证。修改post.sh,在调用curl时加上用户名和密码，如下：
curl --user index:update $URL --data-binary @$f -H 'Content-type:application/xml'

再次执行./post.sh solr.xml,执行成功，到solr后台查看,可以看到添加文件成功,说明认证设置成功]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>994</wp:post_id>
		<wp:post_date><![CDATA[2015-01-20 21:47:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-20 13:47:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e6%9d%83%e9%99%90%e6%8e%a7%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Solr权限控制solrj认证</title>
		<link>http://127.0.0.1:8000/blog/2015/01/22/solr%e6%9d%83%e9%99%90%e6%8e%a7%e5%88%b6solrj%e8%ae%a4%e8%af%81/</link>
		<pubDate>Thu, 22 Jan 2015 11:44:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1000</guid>
		<description></description>
		<content:encoded><![CDATA[在上篇中，我们通过在jetty中配置，是update需要进行用户名和密码认证，这篇中我们继续介绍如何在solrj中调用update

*测试添加文档 
先尝试使用solrj,编写测试程序 
[java]
String url = &quot;http://localhost:8989/solr&quot;; 
HttpSolrServer server = new HttpSolrServer(url); 
SolrInputDocume doc1 = new SolrInputDocument(); 
server.add(docs); 
[/java]
提示401错误,添加用户名和密码: 
[java]
String url = &quot;http://localhost:8989/solr&quot;; 
HttpSolrServer server = new HttpSolrServer(url); 
HttpClientUtil.setBasicAuth((DefaultHttpClient) server.getHttpClient(), &quot;index&quot;, &quot;update&quot;); 
SolrInputDocume doc1 = new SolrInputDocument(); 
server.add(docs); 
[/java]
提示 NonRepeatableRequestException, Cannot retry request with a non-repeatable request entity. 想跟踪过去,看看错误出自哪里,没办法调到源代码,于是尝试查询. 
*测试查询文档 
将etc/webdefault.xml中对<url-pattern>/update/*</url-pattern>的限制改成,<url-pattern>/select/*</url-pattern>,编写查询代码, 
[java]
String url = &quot;http://localhost:8989/solr&quot;; 
HttpSolrServer server = new HttpSolrServer(url); 
SolrQuery query = new SolrQuery(); 
String q = &quot;*:*&quot;; 
query.setQuery(q); 
[/java]
提示401错误,添加用户名和密码: 
[java]
String url = &quot;http://localhost:8989/solr&quot;; 
HttpSolrServer server = new HttpSolrServer(url); 
SolrQuery query = new SolrQuery(); 
String q = &quot;*:*&quot;; 
query.setQuery(q); 
[/java]
查询成功, 

*问题解决 
不明白原因,只是猜测post的信息不能反复使用,在setBasicAuth前面有一段说明, "Currently this is not preemtive authentication. So it is 
not currently possible to do a post request while using this setting.",意思就是认证过程不是最先进行的,所以现在不能用于post,可是认证 
过程可以用于get,于是察看get的执行过程,发现它先执行一次,发现要认证,于是再执行一次,而第二次执行时会先执行认证过程. 对于post过程,如果 
可以执行同样的过程,那就可以达到目的,关键问题是"Cannot retry request with a non-repeatable request entity",于是查看solr-4470是如何 
实现的,看到HttpSolrServer里代码如下: 
    [java]
     if (contentStream[0] instanceof RequestWriter.LazyContentStream) {
        post.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {
          @Override
          public Header getContentType() {
            return new BasicHeader(&quot;Content-Type&quot;, contentStream[0].getContentType());
          }
          
          @Override
          public boolean isRepeatable() {
            return false;
          }
          
        });
      } else {
        post.setEntity(new InputStreamEntity(contentStream[0].getStream(), -1) {
          @Override
          public Header getContentType() {
            return new BasicHeader(&quot;Content-Type&quot;, contentStream[0].getContentType());
          }
          
          @Override
          public boolean isRepeatable() {
            return false;
          }
        });
      }[/java]
修改成 
     [java]
     HttpEntity entity = new InputStreamEntity(contentStream[0].getStream(), -1) {
         @Override
         public Header getContentType() {
             return new BasicHeader(&quot;Content-Type&quot;, contentStream[0].getContentType());
         }
         @Override
         public boolean isRepeatable() {
             return false;
         }  
     };
     entity = new BufferedHttpEntity(entity);[/java]

在生产环境中，可以添加参数控制是否需要entity = new BufferedHttpEntity(entity);和 
HttpClientUtil.setBasicAuth((DefaultHttpClient) server.getHttpClient(), "index", "update");这两句]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1000</wp:post_id>
		<wp:post_date><![CDATA[2015-01-22 19:44:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-22 11:44:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[solr%e6%9d%83%e9%99%90%e6%8e%a7%e5%88%b6solrj%e8%ae%a4%e8%af%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="security"><![CDATA[security]]></category>
		<category domain="post_tag" nicename="solr"><![CDATA[solr]]></category>
		<category domain="post_tag" nicename="solrj"><![CDATA[solrj]]></category>
		<category domain="category" nicename="search"><![CDATA[搜索引擎]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最长平台</title>
		<link>http://127.0.0.1:8000/blog/2015/10/22/%e6%9c%80%e9%95%bf%e5%b9%b3%e5%8f%b0/</link>
		<pubDate>Thu, 22 Oct 2015 06:32:33 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1025</guid>
		<description></description>
		<content:encoded><![CDATA[最近又把冼镜光的《C语言名题精选百则--技巧篇》拿出来看看，确实不错。

已知一个已经从小到大排序的数组，这个数组中的一个平台(plateau) 就是连续的一串相同的元素，并且这一串元素不能再延伸。例如，在1，2，2，3，3，3，4，5，5，6中1，2.2，3.3.3，4，5.5，6都是平台。试编写一个程序，接受一个数组，把这个数组中最长的平台找出来。在上面的例子中，3.3.3就是该数组的最长平台。
这个问题曾经困扰过计算机科学家David Gries，他给出的方法如下

[java]
public class Pleateau {
	public static int pleateau(int[] nums) {
		int length = 1;
		for (int i = 1; i &lt; nums.length; i++) {
			if (nums[i] == nums[i - length]) {
				length++;
			}
		}
		return length;
	}
	public static void main(String[] args) {
		int[] nums = {1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6};
		System.out.println(pleateau(nums));
	}
}
[/java]


自己想到的方法如下

[java]
public class Pleateau {
	public static int pleateau(int[] nums) {
		int length = 1;
		int i = 0;
		while (i + length &lt; nums.length) {
			if (nums[i] == nums[i + length]) {
				length++;
			} else {
				i += length;
				while (i &lt; nums.length &amp;&amp; i &gt; 0 &amp;&amp;  nums[i] == nums[i - 1]) {
					i--;
				}
			}
		}
		return length;
	}
	public static void main(String[] args) {
		int[] nums = {1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6};
		System.out.println(pleateau(nums));
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1025</wp:post_id>
		<wp:post_date><![CDATA[2015-10-22 14:32:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-22 06:32:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%80%e9%95%bf%e5%b9%b3%e5%8f%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>支配值数目</title>
		<link>http://127.0.0.1:8000/blog/2015/10/22/%e6%94%af%e9%85%8d%e5%80%bc%e6%95%b0%e7%9b%ae/</link>
		<pubDate>Thu, 22 Oct 2015 07:14:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1033</guid>
		<description></description>
		<content:encoded><![CDATA[已知f[]与g[]两个整数数组，元素已经从小到大排列，请写一个程序，算出f[]中比g[]元素大的对数。换句话说，f[0]比g[]中多少个元素大，f[1]比g[]中多少元素大等，这些值的总和就是要求的答案。

例如，如果f[]中有1，3，5，7，9，而g[]中有2，3，4，7，8，比g[0]大的有f[1]~f[4], 比g[1]大的有f[2]~f[4]，比g[2]大的有f[2]~f[4]，比g[3]大的有f[4]，比g[4]大的有f[4]，因此答案是4 + 3 + 3 + 1 + 1 = 12

利用数组已经排好序的这个特性，可以写出高效的程序.
[java]
public class GTCount {
	public static int gtCount(int[] f, int[] g) {
		int i = 0;
		int j = 0;
		int result = 0;
		while (i &lt; f.length &amp;&amp; j &lt; g.length) {
			if (f[i] &gt; g[j]) {
				result += f.length - i;
				j++;
			} else {
				i++;
			}
		}
		return result;
	}
	public static void main(String[] args) {
		int[] f = {1, 3, 5, 7, 9};
		int[] g = {2, 3, 4, 7, 8};
		System.out.println(gtCount(f, g));
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1033</wp:post_id>
		<wp:post_date><![CDATA[2015-10-22 15:14:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-22 07:14:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%94%af%e9%85%8d%e5%80%bc%e6%95%b0%e7%9b%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>等值数目</title>
		<link>http://127.0.0.1:8000/blog/2015/10/22/%e7%ad%89%e5%80%bc%e6%95%b0%e7%9b%ae/</link>
		<pubDate>Thu, 22 Oct 2015 07:31:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1035</guid>
		<description></description>
		<content:encoded><![CDATA[已知两个整数数组f[]与g[]，它们的元素都已经从小到大排列好，而且两个数组中的元素都各不相同。例如，f[]中有1,3,4,7,9,而g[]中有3,5,7,8,10。试编写程序算出这两个数组之间有多少组相同的元素。

就上例而言，f[2]和g[1]为3是一组​；f[3]与g[2]为7是第二组

依然是利用已经排好序的这个特性。
[java]
public class EQCount {
	public static int eqCount(int[] f, int[] g) {
		int i = 0;
		int j = 0;
		int result = 0;
		while (i &lt; f.length &amp;&amp; j &lt; g.length) {
			if (f[i] == g[j]) {
				i++;
				j++;
				result++;
			} else if (f[i] &gt; g[j]) {
				j++;
			} else {
				i++;
			}
		}
		return result;
	}
	public static void main(String[] args) {
		int[] f = {1, 3, 4, 7, 9};
		int[] g = {3, 5, 7, 8, 10};
		System.out.println(eqCount(f, g));
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1035</wp:post_id>
		<wp:post_date><![CDATA[2015-10-22 15:31:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-22 07:31:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ad%89%e5%80%bc%e6%95%b0%e7%9b%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>两数组最短距离</title>
		<link>http://127.0.0.1:8000/blog/2015/10/22/%e4%b8%a4%e6%95%b0%e7%bb%84%e6%9c%80%e7%9f%ad%e8%b7%9d%e7%a6%bb/</link>
		<pubDate>Thu, 22 Oct 2015 07:35:45 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1037</guid>
		<description></description>
		<content:encoded><![CDATA[已知两个元素从小到大排列的数组x[]与y[],请编写一个程序算出两个数组元素彼此之间差的绝对值最小的一个树，此值称为数组的距离。

说明： 如果x[i]与y[i]是两个元素，那么 |x[i] - y[i]| 就是这两个元素之间的距离，所有这些距离的最小值，称为数组的距离。比如说x[]有1，3，5，7，9， y[]有2，6，8，那么最短距离就是1，因为x[0]与y[0]、 x[1]与y[0]、x[2]与y[1]、x[3]与y[1]、还有x[4]与y[2]的距离都是1。

依然是利用数组已经排好序的特性。
[java]
public class MinDist {
	public static int minDist(int[] x, int[] y) {
		int result = Integer.MAX_VALUE;
		int i = 0;
		int j = 0;
		while (i &lt; x.length &amp;&amp; j &lt; y.length) {	
			if (x[i] &gt;= y[j]) {
				result = Math.min(result, x[i] - y[j]);
				j++;
			} else {
				result = Math.min(result, y[j] - x[i]);
				i++;
			}	
		}
		return result;
	}
	public static void main(String[] args) {
		int[] x = {1, 3, 5, 7, 9};
		int[] y = {2, 6, 8};
		System.out.println(minDist(x, y));
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1037</wp:post_id>
		<wp:post_date><![CDATA[2015-10-22 15:35:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-22 07:35:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%b8%a4%e6%95%b0%e7%bb%84%e6%9c%80%e7%9f%ad%e8%b7%9d%e7%a6%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>等值首尾和</title>
		<link>http://127.0.0.1:8000/blog/2015/10/22/%e7%ad%89%e5%80%bc%e9%a6%96%e5%b0%be%e5%92%8c/</link>
		<pubDate>Thu, 22 Oct 2015 08:16:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1039</guid>
		<description></description>
		<content:encoded><![CDATA[假设有一个数组x[ ], 它有n个元素，每一个都大于零，称x[0] + x[1] + ... + x[i]为前置和(Prefix Sum),而 x[j] + x[j + 1] + ... + x[n - 1]为后置和(Suffix Sum)。试编写一个程序，求出x[ ] 中有多少组相同的前置和与后置和。

说明
如果x[ ] 的元素是3，6，2，1，4，5，2，则x[ ]的前置和有一下7个，即3，9，11，12，16，21，23；后置和则是2，7，11，12，14，20，23；于是11，12，与23这3对就是值相同的前置和与后置和，因为：
11 = 3 + 6 + 2(前置和) = 2 + 5 + 4 (后置和)
12 = 3 + 6 + 2 + 1(前置和) = 2 + 5 + 4 + 1 (后置和)
因为23是整个数组元素的和，因此前置和与后置和一定相同。

可以用变量prefix来表示前置和，用suffix来表示后置和，用i表示前置和累加元素的位置，i从前往后加，用j表示后置和累加元素的位置, j从后往前加。当prefix > suffix时，累加后置和，也就是j向前走；当prefix < suffix时，累加前置和，也就是i往后走；当prefix == suffix时，同时累加前置和与后置和，也就是i往后走，j往前走

[java]
 public class HeadTail {
	public static int headTail(int[] nums) {
		int i = 0;
		int j = nums.length - 1;
		int prefix = 0;
		int suffix = 0;
		int result = 0;
		while (i &lt; nums.length &amp;&amp; j &gt;= 0) {
			System.out.println(prefix + &quot; &quot; + suffix + &quot; &quot; + i + &quot; &quot; + j);
			if (prefix == suffix) {		
				prefix += nums[i++];
				suffix += nums[j--];
				result++;
			} else if (prefix &gt; suffix) {
				suffix += nums[j--];
			} else {			
				prefix += nums[i++];
			}
		}
		return result;
	}
	public static void main(String[] args) {
		int[] nums = {3, 6, 2, 1, 4, 5, 2};
		System.out.println(headTail(nums));
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1039</wp:post_id>
		<wp:post_date><![CDATA[2015-10-22 16:16:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-22 08:16:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%ad%89%e5%80%bc%e9%a6%96%e5%b0%be%e5%92%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>最大连续元素和</title>
		<link>http://127.0.0.1:8000/blog/2015/10/26/%e6%9c%80%e5%a4%a7%e8%bf%9e%e7%bb%ad%e5%85%83%e7%b4%a0%e5%92%8c/</link>
		<pubDate>Mon, 26 Oct 2015 09:08:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1041</guid>
		<description></description>
		<content:encoded><![CDATA[已知数组x[ ]储存了一组整数，请写一个程序，找出在数组中连续元素的和中最大的一个。举例而言，如果有数组1，2，-6，3，-2，4，-1，3，2，-4，那么连续的元素和有1 + 2 = 3，1 + 2 + (-6) = -3，2 + (-6) = -4，。。。，但最大的就是3 + (-2) + 4 + (-1) + 3 + 2这一段，值为9。这个题目通常叫做最大连续元素和问题，或者叫做最大连续子数组。

一个自然的办法是使用双重循环，但是性能不好。这个问题要求O(n)解法，需要动点脑筋。
[java]
public class MaximumSubarray {
	public static int maxSubArray(int[] nums) {
		int result = nums[0];
		int sum = nums[0];
		for (int i = 1; i &lt; nums.length; i++) {
			if (sum &lt; 0) {
				sum = 0;
			}
			sum += nums[i];
			result = Math.max(result, sum);
		}
		return result;      
    }
	public static void main(String[] args) {
		int[] nums = {1, 2, -6, 3, -2, 4, -1, 3, 2, -4};
		System.out.println(maxSubArray(nums));
	}
}
[/java]
还有一种是分治的方法，效率慢一些
[java]
public class MaximumSubarray {
	public static int maxSubArray(int[] nums) {
		return maxSubArray(nums, 0, nums.length - 1);    
    }
	public static int maxSubArray(int[] nums, int left, int right) {
		if (left &gt; right) {
			return Integer.MIN_VALUE;
		} else if (left == right) {
			return nums[left];
		} else {
			int middle = (right - left) / 2 + left;
			int leftMax = maxSubArray(nums, left, middle);
			int rightMax = maxSubArray(nums, middle + 1, right);
			int sum = 0;
			int maxToLeft = Integer.MIN_VALUE;
			for (int i = middle; i &gt;= left; i--) {
				sum += nums[i];
				maxToLeft = Math.max(maxToLeft, sum);
			}
			sum = 0;
			int maxToRight = Integer.MIN_VALUE;
			for (int i = middle + 1; i &lt;= right; i++) {
				sum += nums[i];
				maxToRight = Math.max(maxToRight, sum);
			}
			int result = maxToLeft + maxToRight;
			result = Math.max(result, leftMax);
			result = Math.max(result, rightMax);
			return result;
		}
	}
	public static void main(String[] args) {
		int[] nums = {1, 2, -6, 3, -2, 4, -1, 3, 2, -4};
		System.out.println(maxSubArray(nums));
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1041</wp:post_id>
		<wp:post_date><![CDATA[2015-10-26 17:08:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-26 09:08:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9c%80%e5%a4%a7%e8%bf%9e%e7%bb%ad%e5%85%83%e7%b4%a0%e5%92%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_post_restored_from]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:20:"restored_revision_id";i:1069;s:16:"restored_by_user";i:1;s:13:"restored_time";i:1446470837;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>查找矩阵</title>
		<link>http://127.0.0.1:8000/blog/2015/10/29/%e6%9f%a5%e6%89%be%e7%9f%a9%e9%98%b5/</link>
		<pubDate>Thu, 29 Oct 2015 03:53:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1046</guid>
		<description></description>
		<content:encoded><![CDATA[已知一个m行n列的矩阵M,它的元素满足一个很特殊的性质，即任一元素M[i][j]都小于它右边与下方的元素(如果存在的话),换言之，M[i][j] < M[i][j + 1]且M[i][j] < M[i + 1][j]。如int[ ][ ] nums = {{1, 4, 7, 11, 15},{2, 5, 8, 12, 19},{3, 6, 9, 16, 22},{10, 13, 14, 17, 24},{18, 21, 23, 26, 30}};

现在有一个值K，编写一个程序，检查矩阵M中是否有K。

对于矩阵M，可以将它划分成两部分区域，一部分是小于等于K的区域，一部分是大于K的区域。沿着两部分区域的边界线查找K即可。
[java]
public class SearchaMatrix {
	public static boolean searchMatrix(int[][] matrix, int target) {
		int m = matrix.length;
		int n = matrix[0].length;
        int i = 0;
        int j = n - 1;
        while (i &lt; m &amp;&amp; j &gt;= 0) {
        	if (matrix[i][j] &gt; target) {
        		j--;
        	} else if (matrix[i][j] &lt; target) {
        		i++;
        	} else {
        		return true;
        	}   	
        }
        return false;
    }
	public static void main(String[] args) {
		int[][] nums = {{1, 4, 7, 11, 15},{2, 5, 8, 12, 19},{3, 6, 9, 16, 22},{10, 13, 14, 17, 24},{18, 21, 23, 26, 30}};
		System.out.println(searchMatrix(nums, 17));
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1046</wp:post_id>
		<wp:post_date><![CDATA[2015-10-29 11:53:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-29 03:53:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%9f%a5%e6%89%be%e7%9f%a9%e9%98%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>产生Gray码</title>
		<link>http://127.0.0.1:8000/blog/2015/10/29/%e4%ba%a7%e7%94%9fgray%e7%a0%81/</link>
		<pubDate>Thu, 29 Oct 2015 08:40:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1053</guid>
		<description></description>
		<content:encoded><![CDATA[编写一个程序，用Gray码(Gray Code)的顺序列出一个集合的所有子集。

什么是Gray码? nbit的Gray码是一连串共有2的n次方个元素的数列，每一个元素都有nbit,而且任何相邻的两个元素之间都只有1bit的值不同。例如，
两个bit的Gray码:
00 01 11 10 是一组Gray码
3个bit的Gray码:
000 001 011 010 110 111 101 100 是一组Gray码
但是Gray码并不是惟一的，把他循环排列或是用反过来的顺序写，也会得到一组Gray码；比如说，如果把3bitGray码的最后3个元素放在前面去，就会得到:
111 101 100 000 001 011 010 110 也是一组Gray码

产生Gray码的方法很多，这里这介绍其中一种。
将2bit Gray码列出
00 
01
11
10
将3bit Gray码列出
000
001
011
010
110
111
101
100
观察3bit Gray码可以发现，它可以由2bit Gray码来得到。
3bit Gray码的前四个由2bit Gray码从第一个到最后一个在最前面的加上0得到
3bit Gray码的后四个 可以将2bit Gray从最后一个到第一个在最前面加上1得到
写成代码如下
[java]
public class GrayCode {
	public static List&lt;Integer&gt; grayCode(int n) {
	     List&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();
	     if (n == 0) {
	    	 result.add(0);
	     } else {
	    	 List&lt;Integer&gt; temp = grayCode(n-1);
	    	 for (Integer i: temp) {
	    		 result.add(i);
	    	 }
	    	 for (int i = temp.size() - 1; i &gt;= 0; i--) {
	    		 result.add(temp.get(i) + (1 &lt;&lt; (n - 1)));
	    	 }
	     }
	     return result;
	}
	public static void main(String[] args) {
		List&lt;Integer&gt; result = grayCode(1);
		for (Integer i: result) {
			System.out.println(i);
		}
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1053</wp:post_id>
		<wp:post_date><![CDATA[2015-10-29 16:40:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-29 08:40:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%a7%e7%94%9fgray%e7%a0%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>N后问题递归解</title>
		<link>http://127.0.0.1:8000/blog/2015/10/30/n%e5%90%8e%e9%97%ae%e9%a2%98%e9%80%92%e5%bd%92%e8%a7%a3/</link>
		<pubDate>Fri, 30 Oct 2015 07:49:43 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1059</guid>
		<description></description>
		<content:encoded><![CDATA[8后问题(Eight Queen Problem)是指在一个8 * 8的西洋棋盘上要如何放置8个皇后棋且不会互相吃到对方；皇后棋可以吃掉任何它所在的那一列、那一行，以及那两个对角线(米字形)上的任何棋子。请写一个程序，读入一个值n表示棋盘的大小，然后求出n * n格棋盘上放n个皇后棋且不会相互吃掉对方的所有解答。

说明。这是广义的N后问题，因为所要求的是“所有”解答，而不单是其中的一组，对大多数会运用递归的人来说，这个题目反而容易做些。这一类型题目的揭发通常要用到回溯(Backtrack)的技巧--不管用递归还是不用递归都是如此，虽然会浪费时间，但多半会找到答案。

依据题意，写了一个递归的方法，判断是否能放置皇后时有点麻烦，应该有更简便的方法。
[java]
 public class NQueens {
	public static int totalNQueens(int n) {
        boolean[][] board = new boolean[n][n];
        return _totalNQueens(0, n, board);
    }
	//check if queen can put on board[row][col]
	private static boolean canPutCheck(int row, int col, int n, boolean[][] board) {
		for (int i = 0; i &lt; n; i++) {
			if (board[row][i]) //row
				return false;
			if (board[i][col]) //col
				return false;
		}
		//diagonal
		int i = 0;
		while (row + i &lt; n &amp;&amp; col + i &lt; n) {
			if (board[row + i][col +i])
				return false;
			i++;
		}
		i = 0;
		while (row - i &gt;= 0 &amp;&amp; col - i &gt;= 0) {
			if (board[row - i][col - i])
				return false;
			i++;
		}
		//back diagonal
		i = 0;
		while (row + i &lt; n &amp;&amp; col - i &gt;= 0) {
			if (board[row + i][col - i])
				return false;
			i++;
		}
		i = 0;
		while (row - i &gt;= 0 &amp;&amp; col + i &lt; n) {
			if (board[row - i][col + i])
				return false;
			i++;
		}
		return true;
		
	}
	private static int _totalNQueens(int row, int n, boolean[][] board) {
		if (row == n) { 
			return 1;
		}
		int count = 0;
		for (int j = 0; j &lt; n; j++) {
			if (canPutCheck(row, j, n, board)) {
				board[row][j] = true;
				count += _totalNQueens(row + 1, n, board);
				board[row][j] = false; //backtrack
			}
		}
		return count;
		
	}
	public static void main(String[] args) {
		for (int i = 4; i &lt; 10; i++)
			System.out.println(i + &quot; &quot; + totalNQueens(i));
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1059</wp:post_id>
		<wp:post_date><![CDATA[2015-10-30 15:49:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-30 07:49:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[n%e5%90%8e%e9%97%ae%e9%a2%98%e9%80%92%e5%bd%92%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>产生所有排列--字典顺序</title>
		<link>http://127.0.0.1:8000/blog/2015/10/31/%e4%ba%a7%e7%94%9f%e6%89%80%e6%9c%89%e6%8e%92%e5%88%97-%e5%ad%97%e5%85%b8%e9%a1%ba%e5%ba%8f/</link>
		<pubDate>Sat, 31 Oct 2015 02:01:09 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1063</guid>
		<description></description>
		<content:encoded><![CDATA[编写一个程序，用字典顺序列出n个元素的所有排列(Permutation).

说明:
下面是一个n = 4，用字典顺序列出来的所有排列，一共为4! = 24个。
1234    2134    3124    4123
1243    2143    3142    4132
1324    2314    3214    4213
1342    2341    3241    4231
1423    2413    3412    4312
1432    2431    3421    4321

这里是一个递归的做法。看上面4! = 24个排列的第一列，它们的第一个元素都是1，第一列的最后一个是以1开头，用字典顺序排出来的最后，自然是1432.事实上，如果是n个元素的排列，以1开头的最后一个应该是1n(n-1)...432。下一列是2开头，把n(n-1)...432中最小的一个与第一个互换，也就是把倒数第一个与第一个互换，得到2n(n-1)..431，但这不是1n(n-1)...432的下一个，但是如果把后面的n - 1个元素反过来，就会得到2134...(n-1)n，是正确的顺序，于是进入第二列。

第二列的最后一个应该是2n(n-1)...431,把 n(n-1)...431中最小的与第一个互换，但因为1已经出现过了，所以把倒数第二个元素(自然是3)与第一个互换，得到3n(n-1)...421，再把后面的n - 1个元素反过来，得到3124...(n-1)n，就得到第三列的第一个。

第三列的最后一个是3n(n-1)...421, 把n(n-1)...421中最小的与第一个互换，但因为1，2已经出现过了，所以把倒数第3个元素(自然是4)与第一个互换，得到4n(n-1)...321，再将后面n - 1个反过来排，得到4123...(n - 1)n，正好是第4列的第一个元素。

于是我们可以得到一个递归的做法，从1234...n起，用一个递归的程序
1. i = n
2. 对后面n - 1个进行排列(递归的)
3. 把第i位与第1位互换
4. i减去1​
5. 把后面的n - 1位反过来排
6. 回到第2步
当i到第一位时程序结束。

需要注意的一点是，排序结束后，数组元素的位置是逆置的，要保证不改变数组元素，我们需要将数组进行一个逆置。
[java]
public class Permutions {
	public static List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) {
		List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;List&lt;Integer&gt;&gt;();
		if (nums.length == 0)
			return result;
		_permution(nums, 0, result);
		reverse(nums, 0, nums.length - 1); //after permutation, we need to reverse array
		return result;
	}
	public static void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
	public static void reverse(int[] nums, int begin, int end) {
		while (begin &lt; end) {
			swap(nums, begin, end);
			begin++;
			end--;
		}
	}
	public static void _permution(int[] nums, int start, List&lt;List&lt;Integer&gt;&gt; result) {
		if (start == nums.length - 1) {
			List&lt;Integer&gt; temp = new ArrayList&lt;Integer&gt;();
			for (int i = 0; i &lt; nums.length; i++) {
				temp.add(nums[i]);
			}
			result.add(temp);
			return;
		}
		int i = nums.length;
		while (i &gt; start) {
			_permution(nums, start + 1, result);
			swap(nums, start, i - 1);
			i--;
			if (i &lt;= start)
				break;
			reverse(nums, start + 1, nums.length - 1);	
		}
	}
	public static void main(String[] args) {
		int[] nums = {1, 2, 3, 4};
		List&lt;List&lt;Integer&gt;&gt; result = permute(nums);
		for (List&lt;Integer&gt; list: result) {
			for (Integer i: list) {
				System.out.print(i);
			}
			System.out.println(&quot;&quot;);
		}
		for (int i = 0; i &lt; nums.length; i++) {
			System.out.print(nums[i] + &quot; &quot;);
		}
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1063</wp:post_id>
		<wp:post_date><![CDATA[2015-10-31 10:01:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-31 02:01:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%a7%e7%94%9f%e6%89%80%e6%9c%89%e6%8e%92%e5%88%97-%e5%ad%97%e5%85%b8%e9%a1%ba%e5%ba%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>产生所有排列--字典顺序(非递归解)</title>
		<link>http://127.0.0.1:8000/blog/2015/11/02/%e4%ba%a7%e7%94%9f%e6%89%80%e6%9c%89%e6%8e%92%e5%88%97-%e5%ad%97%e5%85%b8%e9%a1%ba%e5%ba%8f%e9%9d%9e%e9%80%92%e5%bd%92%e8%a7%a3/</link>
		<pubDate>Mon, 02 Nov 2015 13:42:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://program.dengshilong.org/?p=1070</guid>
		<description></description>
		<content:encoded><![CDATA[编写一个程序，用字典顺序列出n个元素的所有排列(Permutation).​
说明:
下面是一个n = 4，用字典顺序列出来的所有排列，一共为4! = 24个。
1234 2134 3124 4123
1243 2143 3142 4132
1324 2314 3214 4213
1342 2341 3241 4231
1423 2413 3412 4312
1432 2431 3421 4321​

在<a href="http://program.dengshilong.org/2015/10/31/%E4%BA%A7%E7%94%9F%E6%89%80%E6%9C%89%E6%8E%92%E5%88%97-%E5%AD%97%E5%85%B8%E9%A1%BA%E5%BA%8F/" target="_blank">产生所有排列--字典顺序</a>中，用了递归的方法求解字典排列，这里使用非递归的方法。据Hall和Knuth的考证，200多年前(1812年)Fischer和Kruse在一本书中就提到了这个方法.

step 1: 从右往左找，找到第一个i使得nums[i] &lt; nums[i + 1]
step 2: 从右往左找，找到第一个j使得nums[i] &lt; nums[j]
step 3: 交换nums[i]与nums[j]
step 4: 将nums[i + 1],...nums[n]反转
在step 1时，如果找不到满足条件的i, 则结束程序。

例如153642,
从右往左找，找到第一个 i = 2 使得nums[i] &lt; nums[i + 1] 即3 &lt; 6
从右往左找，找到第一个 j = 3 使得nums[i] &lt; nums[j] 即 3 &lt; 4
交换nums[i]和nums[j], 得到154632
将nums[i + ],..nums[n]反转，即将632反转，得到154236
所以154236就是153642的下一个排列。

如此从要求12...n的字典排列，可以从12,...n开始，一直用求下一个排列的方法列出所有排列。

[java]
package chapter3;

import java.util.ArrayList;
import java.util.List;

public class Permutation {
	public static List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) {
		List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;List&lt;Integer&gt;&gt;();
		if (nums.length == 0)
			return result;
		while (true) {
			List&lt;Integer&gt; temp = new ArrayList&lt;Integer&gt;();
			for (int t: nums) {
				temp.add(t);		
			}
			result.add(temp);
			int i = nums.length - 2;
			while (i &gt;= 0 &amp;&amp; nums[i] &gt; nums[i + 1]) 
				i--;
			if (i &lt; 0)
				break;
			
			int j = nums.length - 1;
			while (j &gt; i &amp;&amp; nums[i] &gt; nums[j])
				j--;
			swap(nums, i, j);
			reverse(nums, i + 1, nums.length - 1);
		}
		reverse(nums, 0, nums.length - 1);
		return result;
	}
	public static void swap(int[] nums, int i, int j) {
		int temp = nums[i];
		nums[i] = nums[j];
		nums[j] = temp;
	}
	public static void reverse(int[] nums, int begin, int end) {
		while (begin &lt; end) {
			swap(nums, begin, end);
			begin++;
			end--;
		}
	}
	
	public static void main(String[] args) {
		int[] nums = {1, 2, 3, 4};
		List&lt;List&lt;Integer&gt;&gt; result = permute(nums);
		for (List&lt;Integer&gt; list: result) {
			for (Integer i: list) {
				System.out.print(i);
			}
			System.out.println(&quot;&quot;);
		}
		for (int i = 0; i &lt; nums.length; i++) {
			System.out.print(nums[i] + &quot; &quot;);
		}	
	}
}
[/java]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1070</wp:post_id>
		<wp:post_date><![CDATA[2015-11-02 21:42:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-02 13:42:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%ba%a7%e7%94%9f%e6%89%80%e6%9c%89%e6%8e%92%e5%88%97-%e5%ad%97%e5%85%b8%e9%a1%ba%e5%ba%8f%e9%9d%9e%e9%80%92%e5%bd%92%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c%e5%90%8d%e9%a2%98%e7%99%be%e5%88%99"><![CDATA[C名题百则]]></category>
		<category domain="category" nicename="algorithm"><![CDATA[算法]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
